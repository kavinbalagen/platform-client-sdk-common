{
    "basePath": "/",
    "consumes": [
        "application/json"
    ],
    "definitions": {
        "RequestType.CloseSession": {
            "enum": [
                "closeSession"
            ],
            "type": "string"
        },
        "RequestType": {
            "enum": [
                "configureSession",
                "configureAuthenticatedSession",
                "onAttachment",
                "getAttachment",
                "deleteAttachment",
                "onMessage",
                "closeSession",
                "echo",
                "getJwt",
                "disconnectCustomer",
                "resumeToken",
                "subscribeToPush",
                "getConfiguration"
            ],
            "type": "string"
        },
        "CloseSessionRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.CloseSession"
                },
                "token": {
                    "type": "string"
                },
                "closeAllConnections": {
                    "type": "boolean"
                }
            },
            "required": [
                "action",
                "token",
                "closeAllConnections"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.ConfigureSession": {
            "enum": [
                "configureSession"
            ],
            "type": "string"
        },
        "JourneyCustomer": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "idType": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "idType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "JourneyCustomerSession": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "JourneyActionMap": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "required": [
                "id",
                "version"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "JourneyAction": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "actionMap": {
                    "$ref": "#/definitions/JourneyActionMap"
                }
            },
            "required": [
                "id",
                "actionMap"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "JourneyContext": {
            "properties": {
                "customer": {
                    "$ref": "#/definitions/JourneyCustomer"
                },
                "customerSession": {
                    "$ref": "#/definitions/JourneyCustomerSession"
                },
                "triggeringAction": {
                    "$ref": "#/definitions/JourneyAction"
                }
            },
            "required": [
                "customer",
                "customerSession"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ConfigureSessionRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.ConfigureSession"
                },
                "token": {
                    "type": "string"
                },
                "deploymentId": {
                    "type": "string"
                },
                "journeyContext": {
                    "$ref": "#/definitions/JourneyContext"
                },
                "resumeToken": {
                    "type": "string"
                },
                "startNew": {
                    "type": "boolean"
                }
            },
            "required": [
                "action",
                "token",
                "deploymentId"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.DeleteAttachment": {
            "enum": [
                "deleteAttachment"
            ],
            "type": "string"
        },
        "DeleteAttachmentRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.DeleteAttachment"
                },
                "token": {
                    "type": "string"
                },
                "attachmentId": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "token",
                "attachmentId"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.GenerateDownloadUrl": {
            "enum": [
                "getAttachment"
            ],
            "type": "string"
        },
        "GenerateDownloadUrlRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.GenerateDownloadUrl"
                },
                "token": {
                    "type": "string"
                },
                "attachmentId": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "token",
                "attachmentId"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.GenerateUploadUrl": {
            "enum": [
                "onAttachment"
            ],
            "type": "string"
        },
        "GenerateUploadUrlRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.GenerateUploadUrl"
                },
                "token": {
                    "type": "string"
                },
                "attachmentId": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "fileType": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "fileMd5": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "token",
                "fileName",
                "fileType",
                "fileSize",
                "fileMd5"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.IncomingMessage": {
            "enum": [
                "onMessage"
            ],
            "type": "string"
        },
        "NormalizedType": {
            "description": "Message type.",
            "enum": [
                "Event",
                "Message",
                "Receipt",
                "Structured",
                "Text"
            ],
            "type": "string"
        },
        "Status": {
            "description": "Message receipt status, only used with type Receipt.",
            "enum": [
                "Delivered",
                "Failed",
                "Published",
                "Read",
                "Removed",
                "Sent"
            ],
            "type": "string"
        },
        "MediaType": {
            "description": "The type of attachment this instance represents.",
            "enum": [
                "Audio",
                "File",
                "Image",
                "Link",
                "Video"
            ],
            "type": "string"
        },
        "ContentAttachment": {
            "description": "Attachment content.\n\nMedia template header image.\n\nAttachment object.",
            "properties": {
                "contentSizeBytes": {
                    "type": "number",
                    "format": "double",
                    "description": "Size in bytes of the attachment content."
                },
                "filename": {
                    "type": "string",
                    "description": "Suggested file name for attachment."
                },
                "id": {
                    "type": "string",
                    "description": "Provider specific ID for attachment. For example, a LINE sticker ID."
                },
                "mediaType": {
                    "description": "The type of attachment this instance represents.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/MediaType"
                        }
                    ]
                },
                "mime": {
                    "type": "string",
                    "description": "Attachment mime type (https://www.iana.org/assignments/media-types/media-types.xhtml)."
                },
                "sha256": {
                    "type": "string",
                    "description": "Secure hash of the attachment content."
                },
                "text": {
                    "type": "string",
                    "description": "Text associated with attachment such as an image caption."
                },
                "url": {
                    "type": "string",
                    "description": "URL of the attachment."
                }
            },
            "required": [
                "mediaType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ButtonResponseType": {
            "description": "Describes the button that resulted in the Button Response.",
            "enum": [
                "Button",
                "QuickReply"
            ],
            "type": "string"
        },
        "ContentButtonResponse": {
            "description": "Button response content.\n\nButton response object representing the click of a structured message button, such as a\nquick reply.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID assigned to the button response (Deprecated)."
                },
                "payload": {
                    "type": "string",
                    "description": "The response payload associated with the clicked button."
                },
                "text": {
                    "type": "string",
                    "description": "The response text from the button click."
                },
                "type": {
                    "description": "Describes the button that resulted in the Button Response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ButtonResponseType"
                        }
                    ]
                }
            },
            "required": [
                "payload",
                "text",
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "CardActionType": {
            "description": "Describes the type of action.",
            "enum": [
                "Link",
                "Postback"
            ],
            "type": "string"
        },
        "ContentCardAction": {
            "description": "A card action that a user can take.\n\nThe default button action.",
            "properties": {
                "payload": {
                    "type": "string",
                    "description": "Text to be returned as the payload from a ButtonResponse when a button is clicked. The\npayload and text are a combination which will have to be unique across each card and\ncarousel in order to determine which button was clicked in that card or carousel."
                },
                "text": {
                    "type": "string",
                    "description": "The response text from the button click."
                },
                "type": {
                    "description": "Describes the type of action.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/CardActionType"
                        }
                    ]
                },
                "url": {
                    "type": "string",
                    "description": "A URL of a web page to direct the user to."
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "ContentCard": {
            "description": "Card content\n\nCard content object.",
            "properties": {
                "actions": {
                    "items": {
                        "additionalProperties": true
                    },
                    "type": "array",
                    "description": "An array of action objects."
                },
                "defaultAction": {
                    "description": "The default button action.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentCardAction"
                        }
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "Text to show in the description."
                },
                "image": {
                    "type": "string",
                    "description": "URL of an image."
                },
                "title": {
                    "type": "string",
                    "description": "Text to show in the title."
                },
                "video": {
                    "type": "string",
                    "description": "URL of a video."
                }
            },
            "required": [
                "actions",
                "title"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ContentCarousel": {
            "description": "Carousel content\n\nCarousel content object.",
            "properties": {
                "cards": {
                    "items": {
                        "$ref": "#/definitions/ContentCard"
                    },
                    "type": "array",
                    "description": "An array of card objects."
                }
            },
            "required": [
                "cards"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ContentType": {
            "description": "Type of this content element.",
            "enum": [
                "Attachment",
                "ButtonResponse",
                "Card",
                "Carousel",
                "GenericTemplate",
                "ListTemplate",
                "Location",
                "Mention",
                "Notification",
                "Postback",
                "QuickReply",
                "QuickReplyV2",
                "Reactions",
                "Story",
                "Text"
            ],
            "type": "string"
        },
        "ContentActions": {
            "description": "Actions to be taken (Deprecated).\n\nThe button actions (Deprecated).\n\nThe list actions (Deprecated).\n\nThe list item actions (Deprecated).\n\nUser actions available on the content. All actions are optional and all actions are\nexecuted simultaneously.",
            "properties": {
                "commandName": {
                    "type": "string",
                    "description": "Execute an organization's specific command (Deprecated)."
                },
                "context": {
                    "properties": {},
                    "additionalProperties": {
                        "additionalProperties": true
                    },
                    "type": "object",
                    "description": "Additional context for the command (Deprecated)."
                },
                "textback": {
                    "type": "string",
                    "description": "Text to be returned as the payload from a ButtonResponse when a button is clicked. The\ntextback and title are a combination which will have to be unique across each card and\ncarousel in order to determine which button was clicked in that card or carousel."
                },
                "url": {
                    "type": "string",
                    "description": "A URL of a web page to direct the user to."
                },
                "urlTarget": {
                    "type": "string",
                    "description": "The target window in which to open the URL. If empty will open a blank page or tab."
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "ButtonComponent": {
            "description": "Structured template button object.",
            "properties": {
                "actions": {
                    "description": "The button actions (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentActions"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this component (Deprecated)."
                },
                "text": {
                    "type": "string",
                    "description": "Deprecated - Use title instead."
                },
                "title": {
                    "type": "string",
                    "description": "Text to show inside the button."
                }
            },
            "required": [
                "actions",
                "title"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ContentGeneric": {
            "description": "Generic content (Deprecated).\n\nDeprecated, should use Card.",
            "properties": {
                "actions": {
                    "description": "Actions to be taken (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentActions"
                        }
                    ]
                },
                "components": {
                    "items": {
                        "$ref": "#/definitions/ButtonComponent"
                    },
                    "type": "array",
                    "description": "An array of component objects."
                },
                "description": {
                    "type": "string",
                    "description": "Text to show in the description."
                },
                "id": {
                    "type": "string",
                    "description": "A unique ID assigned to this rich message content (Deprecated)."
                },
                "image": {
                    "type": "string",
                    "description": "URL of an image."
                },
                "title": {
                    "type": "string",
                    "description": "Text to show in the title."
                },
                "video": {
                    "type": "string",
                    "description": "URL of a video."
                }
            },
            "required": [
                "title"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ListItemType": {
            "description": "The type of list item to render.",
            "enum": [
                "ListItem",
                "ListItemBig"
            ],
            "type": "string"
        },
        "ListItemComponent": {
            "description": "An entry in a List template.",
            "properties": {
                "actions": {
                    "description": "The list item actions (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentActions"
                        }
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "Text to show in the list item description."
                },
                "id": {
                    "type": "string",
                    "description": "An ID assigned to this list item."
                },
                "image": {
                    "type": "string",
                    "description": "URL of an image."
                },
                "rmid": {
                    "type": "string",
                    "description": "An ID of the rich message instance."
                },
                "title": {
                    "type": "string",
                    "description": "The main headline of the list item."
                },
                "type": {
                    "description": "The type of list item to render.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ListItemType"
                        }
                    ]
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "ListType": {
            "description": "The type of list this instance represents.",
            "enum": [
                "Selection",
                "Vertical"
            ],
            "type": "string"
        },
        "ContentList": {
            "description": "List content (Deprecated).\n\nList content object.",
            "properties": {
                "actions": {
                    "description": "The list actions (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentActions"
                        }
                    ]
                },
                "components": {
                    "items": {
                        "$ref": "#/definitions/ListItemComponent"
                    },
                    "type": "array",
                    "description": "An array of component objects."
                },
                "description": {
                    "type": "string",
                    "description": "Text to show in the description."
                },
                "id": {
                    "type": "string",
                    "description": "A unique ID assigned to this rich message content."
                },
                "listType": {
                    "description": "The type of list this instance represents.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ListType"
                        }
                    ]
                },
                "submitLabel": {
                    "type": "string",
                    "description": "Label for Submit button."
                },
                "title": {
                    "type": "string",
                    "description": "Text to show in the title."
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "ContentLocation": {
            "description": "Location content.\n\nLocation object.",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Location postal address."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "Latitude of the location."
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "Longitude of the location."
                },
                "text": {
                    "type": "string",
                    "description": "Location name."
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Location."
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "AdditionalIDType": {
            "description": "Type of the Identifier",
            "enum": [
                "Deployment",
                "Subject"
            ],
            "type": "string"
        },
        "RecipientAdditionalIdentifier": {
            "description": "Additional identifiers for describing messaging recipient.",
            "properties": {
                "type": {
                    "description": "Type of the Identifier",
                    "allOf": [
                        {
                            "$ref": "#/definitions/AdditionalIDType"
                        }
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "The Identifier value."
                }
            },
            "required": [
                "type",
                "value"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "IDType": {
            "description": "The recipient ID type. This is used to indicate the format used for the ID.",
            "enum": [
                "Email",
                "Opaque",
                "Phone"
            ],
            "type": "string"
        },
        "MessagingRecipient": {
            "description": "Information about the recipient the message is received from.\n\nInformation about the recipient the message is sent to or received from.\n\nInformation about the recipient the message is sent to.\n\nMention content.",
            "properties": {
                "additionalIds": {
                    "items": {
                        "$ref": "#/definitions/RecipientAdditionalIdentifier"
                    },
                    "type": "array",
                    "description": "List of recipient additional identifiers"
                },
                "email": {
                    "type": "string",
                    "description": "E-mail address of the recipient."
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the recipient."
                },
                "id": {
                    "type": "string",
                    "description": "The recipient ID specific to the provider."
                },
                "idType": {
                    "description": "The recipient ID type. This is used to indicate the format used for the ID.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/IDType"
                        }
                    ]
                },
                "image": {
                    "type": "string",
                    "description": "URL of an image that represents the recipient."
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the recipient."
                },
                "nickname": {
                    "type": "string",
                    "description": "Nickname or display name of the recipient."
                }
            },
            "required": [
                "id"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ContentPostback": {
            "description": "Structured message postback (Deprecated).\n\nPostback response object representing the click of a rich media button (Deprecated).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID assigned to the button response."
                },
                "payload": {
                    "type": "string",
                    "description": "The response payload associated with the clicked button."
                },
                "text": {
                    "type": "string",
                    "description": "The response text from the button click."
                }
            },
            "required": [
                "payload"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "Action": {
            "description": "Specifies the type of action that is triggered upon clicking the quick reply.",
            "enum": [
                "Message"
            ],
            "type": "string"
        },
        "ContentQuickReply": {
            "description": "Quick reply content.\n\nQuick reply object.",
            "properties": {
                "action": {
                    "description": "Specifies the type of action that is triggered upon clicking the quick reply.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Action"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A unique ID assigned to the quick reply (Deprecated)."
                },
                "image": {
                    "type": "string",
                    "description": "URL of an image associated with the quick reply."
                },
                "payload": {
                    "type": "string",
                    "description": "Content of the payload included in the quick reply response. Could be an ID identifying\nthe quick reply response."
                },
                "text": {
                    "type": "string",
                    "description": "Text to show inside the quick reply. This is also used as the response text after\nclicking on the quick reply."
                }
            },
            "required": [
                "payload",
                "text"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ContentQuickReplyV2": {
            "description": "Quick reply V2 content.\n\nQuick reply object V2.",
            "properties": {
                "actions": {
                    "items": {
                        "$ref": "#/definitions/ContentQuickReply"
                    },
                    "type": "array",
                    "description": "An array of quick reply objects."
                },
                "title": {
                    "type": "string",
                    "description": "Text to show as the title of the quick reply."
                }
            },
            "required": [
                "actions",
                "title"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ReactionType": {
            "description": "Type of reaction.",
            "enum": [
                "Angry",
                "Care",
                "Haha",
                "Like",
                "Love",
                "None",
                "Pride",
                "Sad",
                "Thankful",
                "Wow"
            ],
            "type": "string"
        },
        "ContentReaction": {
            "description": "User reaction to public message.",
            "properties": {
                "count": {
                    "type": "number",
                    "format": "double",
                    "description": "Number of users that reacted this way to the message."
                },
                "reactionType": {
                    "description": "Type of reaction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ReactionType"
                        }
                    ]
                }
            },
            "required": [
                "count",
                "reactionType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "StoryType": {
            "description": "Type of ephemeral story attachment.",
            "enum": [
                "Mention",
                "Reply"
            ],
            "type": "string"
        },
        "ContentStory": {
            "description": "Ephemeral story content.\n\nAn ephemeral story.",
            "properties": {
                "replyToId": {
                    "type": "string",
                    "description": "ID of the ephemeral story being replied to."
                },
                "type": {
                    "description": "Type of ephemeral story attachment.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StoryType"
                        }
                    ]
                },
                "url": {
                    "type": "string",
                    "description": "URL to the ephemeral story."
                }
            },
            "required": [
                "type",
                "url"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "NotificationTemplateParameter": {
            "description": "Template parameters for placeholders in template.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Parameter name."
                },
                "text": {
                    "type": "string",
                    "description": "Parameter text value."
                }
            },
            "required": [
                "text"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "NotificationTemplateBody": {
            "description": "The template body.\n\nTemplate body object.",
            "properties": {
                "parameters": {
                    "items": {
                        "$ref": "#/definitions/NotificationTemplateParameter"
                    },
                    "type": "array",
                    "description": "Template parameters for placeholders in template."
                },
                "text": {
                    "type": "string",
                    "description": "Body text. For WhatsApp, ignored."
                }
            },
            "required": [
                "parameters"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "NotificationTemplateFooter": {
            "description": "The template footer.\n\nTemplate footer object.",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "Footer text. For WhatsApp, ignored."
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "HeaderType": {
            "description": "Template header type.",
            "enum": [
                "Media",
                "Text"
            ],
            "type": "string"
        },
        "NotificationTemplateHeader": {
            "description": "The template header.\n\nTemplate header object.",
            "properties": {
                "media": {
                    "description": "Media template header image.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentAttachment"
                        }
                    ]
                },
                "parameters": {
                    "items": {
                        "$ref": "#/definitions/NotificationTemplateParameter"
                    },
                    "type": "array",
                    "description": "Template parameters for placeholders in template."
                },
                "text": {
                    "type": "string",
                    "description": "Header text. For WhatsApp, ignored."
                },
                "type": {
                    "description": "Template header type.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/HeaderType"
                        }
                    ]
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ContentNotificationTemplate": {
            "description": "Template notification content.\n\nTemplate notification object.",
            "properties": {
                "body": {
                    "description": "The template body.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/NotificationTemplateBody"
                        }
                    ]
                },
                "footer": {
                    "description": "The template footer.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/NotificationTemplateFooter"
                        }
                    ]
                },
                "header": {
                    "description": "The template header.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/NotificationTemplateHeader"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "The messaging provider template ID. For WhatsApp, 'namespace@name'."
                },
                "language": {
                    "type": "string",
                    "description": "Template language."
                }
            },
            "required": [
                "body"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "TextType": {
            "description": "Type of text content.",
            "enum": [
                "Text"
            ],
            "type": "string"
        },
        "ContentText": {
            "description": "Text content.\n\nMessage content element containing text only.",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Text to be shown for this content element."
                },
                "type": {
                    "description": "Type of text content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TextType"
                        }
                    ]
                }
            },
            "required": [
                "body"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "MessageContent": {
            "description": "Message content element. If contentType = \"Attachment\" only one item is allowed.",
            "properties": {
                "attachment": {
                    "description": "Attachment content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentAttachment"
                        }
                    ]
                },
                "buttonResponse": {
                    "description": "Button response content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentButtonResponse"
                        }
                    ]
                },
                "card": {
                    "description": "Card content",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentCard"
                        }
                    ]
                },
                "carousel": {
                    "description": "Carousel content",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentCarousel"
                        }
                    ]
                },
                "contentType": {
                    "$ref": "#/definitions/ContentType"
                },
                "generic": {
                    "description": "Generic content (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentGeneric"
                        }
                    ]
                },
                "list": {
                    "description": "List content (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentList"
                        }
                    ]
                },
                "location": {
                    "description": "Location content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentLocation"
                        }
                    ]
                },
                "mention": {
                    "description": "Mention content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/MessagingRecipient"
                        }
                    ]
                },
                "postback": {
                    "description": "Structured message postback (Deprecated).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentPostback"
                        }
                    ]
                },
                "quickReply": {
                    "description": "Quick reply content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentQuickReply"
                        }
                    ]
                },
                "quickReplyV2": {
                    "description": "Quick reply V2 content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentQuickReplyV2"
                        }
                    ]
                },
                "reactions": {
                    "items": {
                        "$ref": "#/definitions/ContentReaction"
                    },
                    "type": "array",
                    "description": "A set of reactions to a message."
                },
                "story": {
                    "description": "Ephemeral story content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentStory"
                        }
                    ]
                },
                "template": {
                    "description": "Template notification content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentNotificationTemplate"
                        }
                    ]
                },
                "text": {
                    "description": "Text content.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ContentText"
                        }
                    ]
                }
            },
            "required": [
                "contentType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "EventCoBrowseType": {
            "description": "Describes the type of CoBrowse event.",
            "enum": [
                "Offering",
                "OfferingAccepted",
                "OfferingExpired",
                "OfferingRejected"
            ],
            "type": "string"
        },
        "EventCoBrowse": {
            "description": "CoBrowse event.\n\nA CoBrowse event.",
            "properties": {
                "sessionId": {
                    "type": "string",
                    "description": "The CoBrowse session ID."
                },
                "sessionJoinToken": {
                    "type": "string",
                    "description": "The CoBrowse session join token."
                },
                "type": {
                    "description": "Describes the type of CoBrowse event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventCoBrowseType"
                        }
                    ]
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "EventType": {
            "description": "Type of this event element",
            "enum": [
                "CoBrowse",
                "Presence",
                "Typing"
            ],
            "type": "string"
        },
        "EventPresenceType": {
            "description": "Describes the type of Presence event.",
            "enum": [
                "Clear",
                "Disconnect",
                "Join"
            ],
            "type": "string"
        },
        "EventPresence": {
            "description": "Presence event.\n\nA Presence event.",
            "properties": {
                "type": {
                    "description": "Describes the type of Presence event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventPresenceType"
                        }
                    ]
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "EventTypingType": {
            "description": "Describes the type of Typing event.",
            "enum": [
                "On"
            ],
            "type": "string"
        },
        "EventTyping": {
            "description": "Typing event.\n\nA Typing event.",
            "properties": {
                "duration": {
                    "type": "number",
                    "format": "double",
                    "description": "The duration of the Typing event in milliseconds."
                },
                "type": {
                    "description": "Describes the type of Typing event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventTypingType"
                        }
                    ]
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "MessageEvent": {
            "description": "Message event element.  Examples include: system messages, typing indicators, cobrowse\nofferings.",
            "properties": {
                "coBrowse": {
                    "description": "CoBrowse event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventCoBrowse"
                        }
                    ]
                },
                "eventType": {
                    "$ref": "#/definitions/EventType"
                },
                "presence": {
                    "description": "Presence event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventPresence"
                        }
                    ]
                },
                "typing": {
                    "description": "Typing event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventTyping"
                        }
                    ]
                }
            },
            "required": [
                "eventType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "IncomingNormalizedMessage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/NormalizedType"
                },
                "text": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/Status"
                },
                "content": {
                    "items": {
                        "$ref": "#/definitions/MessageContent"
                    },
                    "type": "array"
                },
                "events": {
                    "items": {
                        "$ref": "#/definitions/MessageEvent"
                    },
                    "type": "array"
                },
                "metadata": {
                    "properties": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "channel": {
                    "properties": {
                        "metadata": {
                            "properties": {
                                "customAttributes": {
                                    "properties": {},
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [
                                "customAttributes"
                            ],
                            "type": "object"
                        },
                        "messageId": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ChannelType": {
            "description": "Specifies if this message is part of a private or public conversation.",
            "enum": [
                "Private",
                "Public"
            ],
            "type": "string"
        },
        "BaseMessagingRecipient": {
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "BaseChannelMetadata": {
            "properties": {
                "customAttributes": {
                    "properties": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "BaseMessagingChannel": {
            "properties": {
                "time": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/ChannelType"
                },
                "messageId": {
                    "type": "string"
                },
                "from": {
                    "$ref": "#/definitions/BaseMessagingRecipient"
                },
                "to": {
                    "$ref": "#/definitions/BaseMessagingRecipient"
                },
                "metadata": {
                    "$ref": "#/definitions/BaseChannelMetadata"
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "SendMessageRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.IncomingMessage"
                },
                "token": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/IncomingNormalizedMessage"
                },
                "channel": {
                    "$ref": "#/definitions/BaseMessagingChannel"
                }
            },
            "required": [
                "action",
                "token",
                "time",
                "message"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.EchoMessage": {
            "enum": [
                "echo"
            ],
            "type": "string"
        },
        "SendEchoRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.EchoMessage"
                },
                "token": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/IncomingNormalizedMessage"
                }
            },
            "required": [
                "action",
                "token",
                "message"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.GetJwt": {
            "enum": [
                "getJwt"
            ],
            "type": "string"
        },
        "GetJwtRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.GetJwt"
                },
                "token": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "token"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.ConfigureAuthenticatedSession": {
            "enum": [
                "configureAuthenticatedSession"
            ],
            "type": "string"
        },
        "oAuthParams": {
            "properties": {
                "code": {
                    "type": "string"
                }
            },
            "required": [
                "code"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ConfigureAuthenticatedSessionRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.ConfigureAuthenticatedSession"
                },
                "token": {
                    "type": "string"
                },
                "deploymentId": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/oAuthParams"
                },
                "resumeToken": {
                    "type": "string"
                },
                "startNew": {
                    "type": "boolean"
                },
                "stepUp": {
                    "type": "boolean"
                }
            },
            "required": [
                "action",
                "token",
                "deploymentId",
                "data"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "RequestType.GetConfiguration": {
            "enum": [
                "getConfiguration"
            ],
            "type": "string"
        },
        "GetConfigurationRequest": {
            "properties": {
                "action": {
                    "$ref": "#/definitions/RequestType.GetConfiguration"
                },
                "token": {
                    "type": "string"
                },
                "deploymentId": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "token",
                "deploymentId"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "BaseMessageType": {
            "enum": [
                "message",
                "response"
            ],
            "type": "string"
        },
        "MessageDataType": {
            "enum": [
                "string",
                "SessionResponse",
                "StructuredMessage",
                "PresignedUrlResponse",
                "AttachmentDeletedResponse",
                "UploadFailureEvent",
                "UploadSuccessEvent",
                "ConnectionClosedEvent",
                "LogoutEvent",
                "SessionExpiredEvent",
                "JwtResponse",
                "GetConfigurationResponse",
                "GenerateUrlError",
                "TooManyRequestsErrorMessage",
                "ResumeTokenResponse",
                "SessionClearedEvent",
                "Error",
                "Unknown"
            ],
            "type": "string"
        },
        "FileType": {
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "FileUploadMode": {
            "properties": {
                "fileTypes": {
                    "items": {
                        "$ref": "#/definitions/FileType"
                    },
                    "type": "array"
                },
                "maxFileSizeKB": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "fileTypes",
                "maxFileSizeKB"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "AllowedMedia": {
            "properties": {
                "inbound": {
                    "$ref": "#/definitions/FileUploadMode"
                }
            },
            "required": [
                "inbound"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "SessionResponse": {
            "properties": {
                "connected": {
                    "type": "boolean"
                },
                "newSession": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "clearedExistingSession": {
                    "type": "boolean"
                },
                "allowedMedia": {
                    "$ref": "#/definitions/AllowedMedia"
                },
                "blockedExtensions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "connected"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "PresignedUrlResponse": {
            "properties": {
                "attachmentId": {
                    "type": "string"
                },
                "headers": {
                    "properties": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "url": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "fileType": {
                    "type": "string"
                }
            },
            "required": [
                "attachmentId",
                "headers",
                "url"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "AttachmentDeletedResponse": {
            "properties": {
                "attachmentId": {
                    "type": "string"
                }
            },
            "required": [
                "attachmentId"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "JwtResponse": {
            "properties": {
                "jwt": {
                    "type": "string"
                },
                "exp": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "jwt",
                "exp"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "GetConfigurationResponse": {
            "properties": {
                "allowedMedia": {
                    "$ref": "#/definitions/AllowedMedia"
                },
                "blockedExtensions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "allowedMedia"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "GenerateUrlError": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stack": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "errorMessage": {
                    "type": "string"
                },
                "attachmentId": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "message",
                "errorCode",
                "errorMessage"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "TooManyRequestsErrorMessage": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stack": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "errorMessage": {
                    "type": "string"
                },
                "retryAfter": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "required": [
                "name",
                "message",
                "errorCode",
                "errorMessage",
                "retryAfter"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ResumeTokenResponse": {
            "properties": {
                "resumeToken": {
                    "type": "string"
                },
                "exp": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "resumeToken",
                "exp"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ErrorMessage": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stack": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "errorMessage": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "message",
                "errorCode",
                "errorMessage"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ResponseMessage": {
            "type": "object"
        },
        "Direction": {
            "description": "The direction of the message.",
            "enum": [
                "Inbound",
                "Outbound"
            ],
            "type": "string"
        },
        "BaseContentAttachment": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "mime": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "mediaType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "BaseMessagingContent": {
            "properties": {
                "attachment": {
                    "$ref": "#/definitions/BaseContentAttachment"
                },
                "contentType": {
                    "$ref": "#/definitions/ContentType"
                }
            },
            "required": [
                "contentType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "StructuredMessage": {
            "properties": {
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/NormalizedType"
                },
                "direction": {
                    "$ref": "#/definitions/Direction"
                },
                "id": {
                    "type": "string"
                },
                "channel": {
                    "$ref": "#/definitions/BaseMessagingChannel"
                },
                "content": {
                    "items": {
                        "$ref": "#/definitions/BaseMessagingContent"
                    },
                    "type": "array"
                },
                "metadata": {
                    "properties": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "events": {
                    "items": {
                        "$ref": "#/definitions/MessageEvent"
                    },
                    "type": "array"
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "UploadSuccessEvent": {
            "properties": {
                "attachmentId": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            },
            "required": [
                "attachmentId",
                "downloadUrl",
                "timestamp"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "UploadFailureEvent": {
            "properties": {
                "attachmentId": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "errorMessage": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            },
            "required": [
                "attachmentId",
                "errorCode",
                "errorMessage",
                "timestamp"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "CleanMessagingRecipient": {
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "CleanChannelMetadata": {
            "properties": {
                "customAttributes": {
                    "properties": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "CleanMessagingChannel": {
            "properties": {
                "time": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/ChannelType"
                },
                "messageId": {
                    "type": "string"
                },
                "from": {
                    "$ref": "#/definitions/CleanMessagingRecipient"
                },
                "to": {
                    "$ref": "#/definitions/CleanMessagingRecipient"
                },
                "metadata": {
                    "$ref": "#/definitions/CleanChannelMetadata"
                }
            },
            "type": "object",
            "additionalProperties": true
        },
        "CleanContentAttachment": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "number",
                    "format": "double"
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "mime": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "mediaType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "CleanMessageContent": {
            "properties": {
                "attachment": {
                    "$ref": "#/definitions/CleanContentAttachment"
                },
                "contentType": {
                    "$ref": "#/definitions/ContentType"
                },
                "buttonResponse": {
                    "$ref": "#/definitions/ContentButtonResponse"
                },
                "generic": {
                    "$ref": "#/definitions/ContentGeneric"
                },
                "card": {
                    "$ref": "#/definitions/ContentCard"
                },
                "carousel": {
                    "$ref": "#/definitions/ContentCarousel"
                },
                "quickReply": {
                    "$ref": "#/definitions/ContentQuickReply"
                },
                "text": {
                    "$ref": "#/definitions/ContentText"
                },
                "quickReplyV2": {
                    "$ref": "#/definitions/ContentQuickReplyV2"
                }
            },
            "required": [
                "contentType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "CleanMessageEvent": {
            "properties": {
                "coBrowse": {
                    "description": "CoBrowse event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventCoBrowse"
                        }
                    ]
                },
                "eventType": {
                    "$ref": "#/definitions/EventType"
                },
                "presence": {
                    "description": "Presence event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventPresence"
                        }
                    ]
                },
                "typing": {
                    "description": "Typing event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EventTyping"
                        }
                    ]
                }
            },
            "required": [
                "eventType"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "OriginatingEntity": {
            "description": "Specifies if this message was sent by a human agent or bot. The platform may use this to\napply appropriate provider policies.",
            "enum": [
                "Bot",
                "Human"
            ],
            "type": "string"
        },
        "CleanMessage": {
            "properties": {
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/NormalizedType"
                },
                "direction": {
                    "$ref": "#/definitions/Direction"
                },
                "id": {
                    "type": "string"
                },
                "channel": {
                    "$ref": "#/definitions/CleanMessagingChannel"
                },
                "content": {
                    "items": {
                        "$ref": "#/definitions/CleanMessageContent"
                    },
                    "type": "array"
                },
                "metadata": {
                    "properties": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "events": {
                    "items": {
                        "$ref": "#/definitions/CleanMessageEvent"
                    },
                    "type": "array"
                },
                "originatingEntity": {
                    "$ref": "#/definitions/OriginatingEntity"
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ConnectionClosedEvent": {
            "properties": {},
            "type": "object",
            "additionalProperties": true
        },
        "LogoutEvent": {
            "properties": {},
            "type": "object",
            "additionalProperties": true
        },
        "SessionExpiredEvent": {
            "properties": {},
            "type": "object",
            "additionalProperties": true
        },
        "SessionClearedEvent": {
            "properties": {},
            "type": "object",
            "additionalProperties": true
        },
        "EventMessage": {
            "type": "object"
        },
        "BaseMessage": {
            "properties": {
                "type": {
                    "$ref": "#/definitions/BaseMessageType"
                },
                "class": {
                    "$ref": "#/definitions/MessageDataType"
                },
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "body": {
                    "type": "object"
                }
            },
            "required": [
                "type",
                "class",
                "code",
                "body"
            ],
            "type": "object",
            "additionalProperties": true
        },
        "ConversationMetricsTopicConversationProposedAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:metrics:topic:ConversationProposedAgent",
            "properties": {
                "agentRank": {
                    "type": "integer",
                    "description": "Proposed agent rank for this conversation from predictive routing (lower is better)"
                },
                "proposedAgentId": {
                    "type": "string",
                    "description": "Unique identifier for the agent that was proposed by predictive routing"
                }
            }
        },
        "ConversationMetricsTopicConversationScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:metrics:topic:ConversationScoredAgent",
            "properties": {
                "agentScore": {
                    "type": "integer",
                    "description": "Assigned agent score for this conversation (0 - 100, higher being better)"
                },
                "scoredAgentId": {
                    "type": "string",
                    "description": "Unique identifier for the agent that was scored for this conversation"
                }
            }
        },
        "ConversationMetricsTopicConversationMetricRecord": {
            "type": "object",
            "id": "urn:jsonschema:conversation:metrics:topic:ConversationMetricRecord",
            "properties": {
                "metric": {
                    "type": "string",
                    "description": "Metric name",
                    "enum": [
                        "nBlindTransferred",
                        "nCobrowseSessions",
                        "nConnected",
                        "nConsult",
                        "nConsultTransferred",
                        "nError",
                        "nOffered",
                        "nOutbound",
                        "nOutboundAbandoned",
                        "nOutboundAttempted",
                        "nOutboundConnected",
                        "nOverSla",
                        "nTransferred",
                        "oExternalMediaCount",
                        "oMediaCount",
                        "oMessageTurn",
                        "tAbandon",
                        "tAcd",
                        "tActiveCallback",
                        "tActiveCallbackComplete",
                        "tAcw",
                        "tAgentResponseTime",
                        "tAlert",
                        "tAnswered",
                        "tBarging",
                        "tCallback",
                        "tCallbackComplete",
                        "tCoaching",
                        "tCoachingComplete",
                        "tConnected",
                        "tContacting",
                        "tDialing",
                        "tFirstConnect",
                        "tFirstDial",
                        "tFlowOut",
                        "tHandle",
                        "tHeld",
                        "tHeldComplete",
                        "tIvr",
                        "tMonitoring",
                        "tMonitoringComplete",
                        "tNotResponding",
                        "tTalk",
                        "tTalkComplete",
                        "tUserResponseTime",
                        "tVoicemail"
                    ]
                },
                "metricDate": {
                    "type": "string",
                    "description": "The date and time of metric creation",
                    "format": "date-time"
                },
                "value": {
                    "type": "integer",
                    "description": "Metric value"
                },
                "recordId": {
                    "type": "string",
                    "description": "Record identifier"
                },
                "activeSkillIds": {
                    "type": "array",
                    "description": "ID(s) of Skill(s) that are active on the conversation",
                    "items": {
                        "type": "string"
                    }
                },
                "addressFrom": {
                    "type": "string",
                    "description": "The address that initiated an action"
                },
                "addressTo": {
                    "type": "string",
                    "description": "The address receiving an action"
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "Unique identifier of the active virtual agent assistant"
                },
                "agentBullseyeRing": {
                    "type": "integer",
                    "description": "Bullseye ring of the targeted agent"
                },
                "agentOwned": {
                    "type": "boolean",
                    "description": "Flag indicating an agent-owned callback"
                },
                "ani": {
                    "type": "string",
                    "description": "Automatic Number Identification (caller's number)"
                },
                "assignerId": {
                    "type": "string",
                    "description": "ID of the user that manually assigned a conversation"
                },
                "authenticated": {
                    "type": "boolean",
                    "description": "Flag that indicates that the identity of the customer has been asserted as verified by the provider."
                },
                "conversationId": {
                    "type": "string",
                    "description": "Unique identifier for the conversation"
                },
                "conversationInitiator": {
                    "type": "string",
                    "description": "Indicates the participant purpose of the participant initiating a message conversation",
                    "enum": [
                        "acd",
                        "agent",
                        "api",
                        "botflow",
                        "campaign",
                        "customer",
                        "dialer",
                        "external",
                        "fax",
                        "group",
                        "inbound",
                        "ivr",
                        "manual",
                        "outbound",
                        "station",
                        "user",
                        "voicemail",
                        "workflow"
                    ]
                },
                "convertedFrom": {
                    "type": "string",
                    "description": "Session media type that was converted from in case of a media type conversion"
                },
                "convertedTo": {
                    "type": "string",
                    "description": "Session media type that was converted to in case of a media type conversion"
                },
                "customerParticipation": {
                    "type": "boolean",
                    "description": "Indicates a messaging conversation in which the customer participated by sending at least one message"
                },
                "deliveryStatus": {
                    "type": "string",
                    "description": "The email or SMS delivery status",
                    "enum": [
                        "DeliveryFailed",
                        "DeliverySuccess",
                        "Failed",
                        "Queued",
                        "Read",
                        "Received",
                        "Sent"
                    ]
                },
                "destinationAddresses": {
                    "type": "array",
                    "description": "Destination address(es) of transfers or consults",
                    "items": {
                        "type": "string"
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the communication",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "The session disconnect type",
                    "enum": [
                        "client",
                        "conferenceTransfer",
                        "consultTransfer",
                        "endpoint",
                        "endpointDnd",
                        "error",
                        "forwardTransfer",
                        "noAnswerTransfer",
                        "notAvailableTransfer",
                        "other",
                        "peer",
                        "spam",
                        "system",
                        "timeout",
                        "transfer",
                        "transferDnd",
                        "transportFailure",
                        "uncallable"
                    ]
                },
                "divisionIds": {
                    "type": "array",
                    "description": "Identifier(s) of division(s) associated with a conversation",
                    "items": {
                        "type": "string"
                    }
                },
                "dnis": {
                    "type": "string",
                    "description": "Dialed number identification service (number dialed by the calling party)"
                },
                "edgeId": {
                    "type": "string",
                    "description": "Unique identifier of the edge device"
                },
                "eligibleAgentCounts": {
                    "type": "array",
                    "description": "Number of eligible agents for each predictive routing attempt",
                    "items": {
                        "type": "integer"
                    }
                },
                "errorCode": {
                    "type": "string",
                    "description": "A code corresponding to the error that occurred"
                },
                "extendedDeliveryStatus": {
                    "type": "string",
                    "description": "Extended delivery status"
                },
                "externalContactId": {
                    "type": "string",
                    "description": "External contact identifier"
                },
                "externalMediaCount": {
                    "type": "integer",
                    "description": "Count of any media (images, files, etc) included on the external session"
                },
                "externalOrganizationId": {
                    "type": "string",
                    "description": "External organization identifier"
                },
                "externalTag": {
                    "type": "string",
                    "description": "External tag for the conversation"
                },
                "firstQueue": {
                    "type": "boolean",
                    "description": "Marker that is set if the current queue is the first queue in a conversation"
                },
                "flaggedReason": {
                    "type": "string",
                    "description": "Reason for which participant flagged conversation",
                    "enum": [
                        "general"
                    ]
                },
                "flowInType": {
                    "type": "string",
                    "description": "Type of flow in that occurred when entering ACD."
                },
                "flowOutType": {
                    "type": "string",
                    "description": "Type of flow out that occurred when emitting tFlowOut."
                },
                "groupId": {
                    "type": "string",
                    "description": "Unique identifier for a PureCloud group"
                },
                "interactionType": {
                    "type": "string",
                    "description": "The interaction type (enterprise or contactCenter)"
                },
                "journeyActionId": {
                    "type": "string",
                    "description": "Identifier of the journey action."
                },
                "journeyActionMapId": {
                    "type": "string",
                    "description": "Identifier of the journey action map that triggered the action."
                },
                "journeyActionMapVersion": {
                    "type": "integer",
                    "description": "Version of the journey action map that triggered the action."
                },
                "journeyCustomerId": {
                    "type": "string",
                    "description": "Primary identifier of the journey customer in the source where the activities originate from."
                },
                "journeyCustomerIdType": {
                    "type": "string",
                    "description": "Type of primary identifier of the journey customer (e.g. cookie)."
                },
                "journeyCustomerSessionId": {
                    "type": "string",
                    "description": "Unique identifier of the journey session."
                },
                "journeyCustomerSessionIdType": {
                    "type": "string",
                    "description": "Type or category of journey sessions (e.g. web, ticket, delivery, atm)."
                },
                "knowledgeBaseIds": {
                    "type": "array",
                    "description": "The unique identifier(s) of the knowledge base(s) used",
                    "items": {
                        "type": "string"
                    }
                },
                "mediaCount": {
                    "type": "integer",
                    "description": "Count of any media (images, files, etc) included in this session"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The session media type",
                    "enum": [
                        "callback",
                        "chat",
                        "cobrowse",
                        "email",
                        "message",
                        "screenshare",
                        "unknown",
                        "video",
                        "voice"
                    ]
                },
                "messageType": {
                    "type": "string",
                    "description": "Message type for messaging services. E.g.: sms, facebook, twitter, line"
                },
                "originatingDirection": {
                    "type": "string",
                    "description": "The original direction of the conversation",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "outboundCampaignId": {
                    "type": "string",
                    "description": "(Dialer) Unique identifier of the outbound campaign"
                },
                "outboundContactId": {
                    "type": "string",
                    "description": "(Dialer) Unique identifier of the contact"
                },
                "outboundContactListId": {
                    "type": "string",
                    "description": "(Dialer) Unique identifier of the contact list that this contact belongs to"
                },
                "participantName": {
                    "type": "string",
                    "description": "A human readable name identifying the participant"
                },
                "peerId": {
                    "type": "string",
                    "description": "This identifies pairs of related sessions on a conversation. E.g. an external session’s peerId will be the session that the call originally connected to, e.g. if an IVR was dialed, the IVR session, which will also have the external session’s ID as its peer. After that point, any transfers of that session to other internal components (acd, agent, etc.) will all spawn new sessions whose peerIds point back to that original external session."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider for the communication."
                },
                "purpose": {
                    "type": "string",
                    "description": "The participant's purpose",
                    "enum": [
                        "acd",
                        "agent",
                        "api",
                        "botflow",
                        "campaign",
                        "customer",
                        "dialer",
                        "external",
                        "fax",
                        "group",
                        "inbound",
                        "ivr",
                        "manual",
                        "outbound",
                        "station",
                        "user",
                        "voicemail",
                        "workflow"
                    ]
                },
                "queueId": {
                    "type": "string",
                    "description": "Queue identifier"
                },
                "remote": {
                    "type": "string",
                    "description": "Name, phone number, or email address of the remote party."
                },
                "removedSkillIds": {
                    "type": "array",
                    "description": "ID(s) of Skill(s) that have been removed by bullseye routing",
                    "items": {
                        "type": "string"
                    }
                },
                "reoffered": {
                    "type": "boolean",
                    "description": "Marker for an interaction that got reoffered to the same queue by an in-queue flow"
                },
                "requestedLanguageId": {
                    "type": "string",
                    "description": "Unique identifier for the language requested for an interaction"
                },
                "requestedRoutingSkillIds": {
                    "type": "array",
                    "description": "Unique identifier(s) for skill(s) requested for an interaction",
                    "items": {
                        "type": "string"
                    }
                },
                "requestedRoutings": {
                    "type": "array",
                    "description": "Routing type(s) for requested/attempted routing methods.",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Bullseye",
                            "Conditional",
                            "Direct",
                            "Last",
                            "Manual",
                            "Predictive",
                            "Preferred",
                            "Standard",
                            "Vip"
                        ]
                    }
                },
                "roomId": {
                    "type": "string",
                    "description": "Unique identifier for the room"
                },
                "routingPriority": {
                    "type": "integer",
                    "description": "Routing priority for the current interaction"
                },
                "routingRing": {
                    "type": "integer",
                    "description": "Routing ring for bullseye or preferred agent routing"
                },
                "routingRule": {
                    "type": "string",
                    "description": "Routing rule for preferred, conditional and predictive routing type"
                },
                "routingRuleType": {
                    "type": "string",
                    "description": "Routing rule type",
                    "enum": [
                        "Bullseye",
                        "Conditional",
                        "Predictive",
                        "Preferred"
                    ]
                },
                "selectedAgentId": {
                    "type": "string",
                    "description": "Selected agent ID"
                },
                "selectedAgentRank": {
                    "type": "integer",
                    "description": "Selected agent GPR rank"
                },
                "selfServed": {
                    "type": "boolean",
                    "description": "Indicates whether all flow sessions were self serviced"
                },
                "sessionDnis": {
                    "type": "string",
                    "description": "Dialed number for the current session; this can be different from dnis, e.g. if the call was transferred"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique identifier of this session"
                },
                "stationId": {
                    "type": "string",
                    "description": "Unique identifier for a phone"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID the user is a member of"
                },
                "usedRouting": {
                    "type": "string",
                    "description": "Complete routing method",
                    "enum": [
                        "Bullseye",
                        "Conditional",
                        "Direct",
                        "Last",
                        "Manual",
                        "Predictive",
                        "Preferred",
                        "Standard",
                        "Vip"
                    ]
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier for the user"
                },
                "waitingInteractionCounts": {
                    "type": "array",
                    "description": "Number of waiting interactions for each predictive routing attempt",
                    "items": {
                        "type": "integer"
                    }
                },
                "wrapUpCode": {
                    "type": "string",
                    "description": "Wrap up code"
                },
                "proposedAgents": {
                    "type": "array",
                    "description": "Proposed agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMetricsTopicConversationProposedAgent"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "Scored agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMetricsTopicConversationScoredAgent"
                    }
                }
            }
        },
        "ConversationDetailsDatalakeAvailabilityTopicDataAvailabilityChangeNotification": {
            "type": "object",
            "id": "urn:jsonschema:conversation:details:datalake:availability:topic:DataAvailabilityChangeNotification",
            "properties": {
                "dataAvailabilityDate": {
                    "type": "string",
                    "description": "Date and time before which data is guaranteed to be available in the datalake",
                    "format": "date-time"
                }
            }
        },
        "StatEventFlowTopicMetricStats": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:flow:topic:v2:MetricStats",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "StatEventFlowTopicIntervalMetrics": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:flow:topic:v2:IntervalMetrics",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventFlowTopicMetricStats"
                    }
                }
            }
        },
        "StatEventFlowTopicStatsNotification": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:flow:topic:v2:StatsNotification",
            "properties": {
                "group": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventFlowTopicIntervalMetrics"
                    }
                }
            }
        },
        "FlowMetricsTopicFlowProposedAgent": {
            "type": "object",
            "id": "urn:jsonschema:flow:metrics:topic:FlowProposedAgent",
            "properties": {
                "agentRank": {
                    "type": "integer",
                    "description": "Proposed agent rank for this conversation from predictive routing (lower is better)"
                },
                "proposedAgentId": {
                    "type": "string",
                    "description": "Unique identifier for the agent that was proposed by predictive routing"
                }
            }
        },
        "FlowMetricsTopicFlowOutcome": {
            "type": "object",
            "id": "urn:jsonschema:flow:metrics:topic:FlowOutcome",
            "properties": {
                "flowOutcome": {
                    "type": "string",
                    "description": "Combination of unique flow outcome identifier and its value separated by colon"
                },
                "flowOutcomeId": {
                    "type": "string",
                    "description": "Unique identifier of a flow outcome"
                },
                "flowOutcomeValue": {
                    "type": "string",
                    "description": "Flow outcome value, e.g. SUCCESS"
                }
            }
        },
        "FlowMetricsTopicFlowScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:flow:metrics:topic:FlowScoredAgent",
            "properties": {
                "agentScore": {
                    "type": "integer",
                    "description": "Assigned agent score for this conversation (0 - 100, higher being better)"
                },
                "scoredAgentId": {
                    "type": "string",
                    "description": "Unique identifier for the agent that was scored for this conversation"
                }
            }
        },
        "FlowMetricsTopicFlowMetricRecord": {
            "type": "object",
            "id": "urn:jsonschema:flow:metrics:topic:FlowMetricRecord",
            "properties": {
                "metric": {
                    "type": "string",
                    "description": "Metric name",
                    "enum": [
                        "nFlow",
                        "nFlowMilestone",
                        "nFlowOutcome",
                        "nFlowOutcomeFailed",
                        "oFlowMilestone",
                        "tFlow",
                        "tFlowDisconnect",
                        "tFlowExit",
                        "tFlowOutcome"
                    ]
                },
                "metricDate": {
                    "type": "string",
                    "description": "The date and time of metric creation",
                    "format": "date-time"
                },
                "value": {
                    "type": "integer",
                    "description": "Metric value"
                },
                "recordId": {
                    "type": "string",
                    "description": "Record identifier"
                },
                "activeSkillIds": {
                    "type": "array",
                    "description": "ID(s) of Skill(s) that are active on the conversation",
                    "items": {
                        "type": "string"
                    }
                },
                "addressFrom": {
                    "type": "string",
                    "description": "The address that initiated an action"
                },
                "addressTo": {
                    "type": "string",
                    "description": "The address receiving an action"
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "Unique identifier of the active virtual agent assistant"
                },
                "agentBullseyeRing": {
                    "type": "integer",
                    "description": "Bullseye ring of the targeted agent"
                },
                "agentOwned": {
                    "type": "boolean",
                    "description": "Flag indicating an agent-owned callback"
                },
                "ani": {
                    "type": "string",
                    "description": "Automatic Number Identification (caller's number)"
                },
                "assignerId": {
                    "type": "string",
                    "description": "ID of the user that manually assigned a conversation"
                },
                "authenticated": {
                    "type": "boolean",
                    "description": "Flag that indicates that the identity of the customer has been asserted as verified by the provider."
                },
                "conversationId": {
                    "type": "string",
                    "description": "Unique identifier for the conversation"
                },
                "conversationInitiator": {
                    "type": "string",
                    "description": "Indicates the participant purpose of the participant initiating a message conversation",
                    "enum": [
                        "acd",
                        "agent",
                        "api",
                        "botflow",
                        "campaign",
                        "customer",
                        "dialer",
                        "external",
                        "fax",
                        "group",
                        "inbound",
                        "ivr",
                        "manual",
                        "outbound",
                        "station",
                        "user",
                        "voicemail",
                        "workflow"
                    ]
                },
                "convertedFrom": {
                    "type": "string",
                    "description": "Session media type that was converted from in case of a media type conversion"
                },
                "convertedTo": {
                    "type": "string",
                    "description": "Session media type that was converted to in case of a media type conversion"
                },
                "customerParticipation": {
                    "type": "boolean",
                    "description": "Indicates a messaging conversation in which the customer participated by sending at least one message"
                },
                "deliveryStatus": {
                    "type": "string",
                    "description": "The email or SMS delivery status",
                    "enum": [
                        "DeliveryFailed",
                        "DeliverySuccess",
                        "Failed",
                        "Queued",
                        "Read",
                        "Received",
                        "Sent"
                    ]
                },
                "destinationAddresses": {
                    "type": "array",
                    "description": "Destination address(es) of transfers or consults",
                    "items": {
                        "type": "string"
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the communication",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "The session disconnect type",
                    "enum": [
                        "client",
                        "conferenceTransfer",
                        "consultTransfer",
                        "endpoint",
                        "endpointDnd",
                        "error",
                        "forwardTransfer",
                        "noAnswerTransfer",
                        "notAvailableTransfer",
                        "other",
                        "peer",
                        "spam",
                        "system",
                        "timeout",
                        "transfer",
                        "transferDnd",
                        "transportFailure",
                        "uncallable"
                    ]
                },
                "divisionIds": {
                    "type": "array",
                    "description": "Identifier(s) of division(s) associated with a conversation",
                    "items": {
                        "type": "string"
                    }
                },
                "dnis": {
                    "type": "string",
                    "description": "Dialed number identification service (number dialed by the calling party)"
                },
                "edgeId": {
                    "type": "string",
                    "description": "Unique identifier of the edge device"
                },
                "eligibleAgentCounts": {
                    "type": "array",
                    "description": "Number of eligible agents for each predictive routing attempt",
                    "items": {
                        "type": "integer"
                    }
                },
                "endingLanguage": {
                    "type": "string",
                    "description": "Flow ending language, e.g. en-us"
                },
                "entryReason": {
                    "type": "string",
                    "description": "The particular entry reason for this flow, e.g. an address, userId, or flowId"
                },
                "entryType": {
                    "type": "string",
                    "description": "The entry type for this flow, e.g. dnis, dialer, agent, flow, or direct",
                    "enum": [
                        "agent",
                        "direct",
                        "dnis",
                        "flow",
                        "outbound"
                    ]
                },
                "errorCode": {
                    "type": "string",
                    "description": "A code corresponding to the error that occurred"
                },
                "exitReason": {
                    "type": "string",
                    "description": "The exit reason for this flow, e.g. DISCONNECT"
                },
                "extendedDeliveryStatus": {
                    "type": "string",
                    "description": "Extended delivery status"
                },
                "externalContactId": {
                    "type": "string",
                    "description": "External contact identifier"
                },
                "externalMediaCount": {
                    "type": "integer",
                    "description": "Count of any media (images, files, etc) included on the external session"
                },
                "externalOrganizationId": {
                    "type": "string",
                    "description": "External organization identifier"
                },
                "externalTag": {
                    "type": "string",
                    "description": "External tag for the conversation"
                },
                "firstQueue": {
                    "type": "boolean",
                    "description": "Marker that is set if the current queue is the first queue in a conversation"
                },
                "flaggedReason": {
                    "type": "string",
                    "description": "Reason for which participant flagged conversation",
                    "enum": [
                        "general"
                    ]
                },
                "flowId": {
                    "type": "string",
                    "description": "The unique identifier of this flow"
                },
                "flowInType": {
                    "type": "string",
                    "description": "Type of flow in that occurred when entering ACD."
                },
                "flowMilestoneIds": {
                    "type": "array",
                    "description": "The ID of a flow outcome milestone",
                    "items": {
                        "type": "string"
                    }
                },
                "flowName": {
                    "type": "string",
                    "description": "The name of this flow at the time of flow execution"
                },
                "flowOutType": {
                    "type": "string",
                    "description": "Type of flow out that occurred when emitting tFlowOut."
                },
                "flowType": {
                    "type": "string",
                    "description": "The type of this flow",
                    "enum": [
                        "bot",
                        "commonmodule",
                        "digitalbot",
                        "inboundcall",
                        "inboundchat",
                        "inboundemail",
                        "inboundshortmessage",
                        "inqueuecall",
                        "inqueueemail",
                        "inqueueshortmessage",
                        "outboundcall",
                        "securecall",
                        "speech",
                        "surveyinvite",
                        "voice",
                        "voicemail",
                        "workflow",
                        "workitem"
                    ]
                },
                "flowVersion": {
                    "type": "string",
                    "description": "The version of this flow"
                },
                "groupId": {
                    "type": "string",
                    "description": "Unique identifier for a PureCloud group"
                },
                "interactionType": {
                    "type": "string",
                    "description": "The interaction type (enterprise or contactCenter)"
                },
                "journeyActionId": {
                    "type": "string",
                    "description": "Identifier of the journey action."
                },
                "journeyActionMapId": {
                    "type": "string",
                    "description": "Identifier of the journey action map that triggered the action."
                },
                "journeyActionMapVersion": {
                    "type": "integer",
                    "description": "Version of the journey action map that triggered the action."
                },
                "journeyCustomerId": {
                    "type": "string",
                    "description": "Primary identifier of the journey customer in the source where the activities originate from."
                },
                "journeyCustomerIdType": {
                    "type": "string",
                    "description": "Type of primary identifier of the journey customer (e.g. cookie)."
                },
                "journeyCustomerSessionId": {
                    "type": "string",
                    "description": "Unique identifier of the journey session."
                },
                "journeyCustomerSessionIdType": {
                    "type": "string",
                    "description": "Type or category of journey sessions (e.g. web, ticket, delivery, atm)."
                },
                "knowledgeBaseId": {
                    "type": "string",
                    "description": "The unique identifier of the knowledge base used"
                },
                "mediaCount": {
                    "type": "integer",
                    "description": "Count of any media (images, files, etc) included in this session"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The session media type",
                    "enum": [
                        "callback",
                        "chat",
                        "cobrowse",
                        "email",
                        "message",
                        "screenshare",
                        "unknown",
                        "video",
                        "voice"
                    ]
                },
                "messageType": {
                    "type": "string",
                    "description": "Message type for messaging services. E.g.: sms, facebook, twitter, line"
                },
                "originatingDirection": {
                    "type": "string",
                    "description": "The original direction of the conversation",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "outboundCampaignId": {
                    "type": "string",
                    "description": "(Dialer) Unique identifier of the outbound campaign"
                },
                "outboundContactId": {
                    "type": "string",
                    "description": "(Dialer) Unique identifier of the contact"
                },
                "outboundContactListId": {
                    "type": "string",
                    "description": "(Dialer) Unique identifier of the contact list that this contact belongs to"
                },
                "participantName": {
                    "type": "string",
                    "description": "A human readable name identifying the participant"
                },
                "peerId": {
                    "type": "string",
                    "description": "This identifies pairs of related sessions on a conversation. E.g. an external session’s peerId will be the session that the call originally connected to, e.g. if an IVR was dialed, the IVR session, which will also have the external session’s ID as its peer. After that point, any transfers of that session to other internal components (acd, agent, etc.) will all spawn new sessions whose peerIds point back to that original external session."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider for the communication."
                },
                "purpose": {
                    "type": "string",
                    "description": "The participant's purpose",
                    "enum": [
                        "acd",
                        "agent",
                        "api",
                        "botflow",
                        "campaign",
                        "customer",
                        "dialer",
                        "external",
                        "fax",
                        "group",
                        "inbound",
                        "ivr",
                        "manual",
                        "outbound",
                        "station",
                        "user",
                        "voicemail",
                        "workflow"
                    ]
                },
                "queueId": {
                    "type": "string",
                    "description": "Queue identifier"
                },
                "recognitionFailureReason": {
                    "type": "string",
                    "description": "The recognition failure reason causing to exit/disconnect"
                },
                "remote": {
                    "type": "string",
                    "description": "Name, phone number, or email address of the remote party."
                },
                "removedSkillIds": {
                    "type": "array",
                    "description": "ID(s) of Skill(s) that have been removed by bullseye routing",
                    "items": {
                        "type": "string"
                    }
                },
                "reoffered": {
                    "type": "boolean",
                    "description": "Marker for an interaction that got reoffered to the same queue by an in-queue flow"
                },
                "requestedLanguageId": {
                    "type": "string",
                    "description": "Unique identifier for the language requested for an interaction"
                },
                "requestedRoutingSkillIds": {
                    "type": "array",
                    "description": "Unique identifier(s) for skill(s) requested for an interaction",
                    "items": {
                        "type": "string"
                    }
                },
                "requestedRoutings": {
                    "type": "array",
                    "description": "Routing type(s) for requested/attempted routing methods.",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Bullseye",
                            "Conditional",
                            "Direct",
                            "Last",
                            "Manual",
                            "Predictive",
                            "Preferred",
                            "Standard",
                            "Vip"
                        ]
                    }
                },
                "roomId": {
                    "type": "string",
                    "description": "Unique identifier for the room"
                },
                "routingPriority": {
                    "type": "integer",
                    "description": "Routing priority for the current interaction"
                },
                "routingRing": {
                    "type": "integer",
                    "description": "Routing ring for bullseye or preferred agent routing"
                },
                "routingRule": {
                    "type": "string",
                    "description": "Routing rule for preferred, conditional and predictive routing type"
                },
                "routingRuleType": {
                    "type": "string",
                    "description": "Routing rule type",
                    "enum": [
                        "Bullseye",
                        "Conditional",
                        "Predictive",
                        "Preferred"
                    ]
                },
                "selectedAgentId": {
                    "type": "string",
                    "description": "Selected agent ID"
                },
                "selectedAgentRank": {
                    "type": "integer",
                    "description": "Selected agent GPR rank"
                },
                "selfServed": {
                    "type": "boolean",
                    "description": "Indicates whether the flow session was self serviced"
                },
                "sessionDnis": {
                    "type": "string",
                    "description": "Dialed number for the current session; this can be different from dnis, e.g. if the call was transferred"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique identifier of this session"
                },
                "startingLanguage": {
                    "type": "string",
                    "description": "Flow starting language, e.g. en-us"
                },
                "stationId": {
                    "type": "string",
                    "description": "Unique identifier for a phone"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID the user is a member of"
                },
                "transferTargetAddress": {
                    "type": "string",
                    "description": "The address of a flow transfer target, e.g. a phone number, an email address, or a queueId"
                },
                "transferTargetName": {
                    "type": "string",
                    "description": "The name of a flow transfer target"
                },
                "transferType": {
                    "type": "string",
                    "description": "The type of transfer for flows that ended with a transfer"
                },
                "usedRouting": {
                    "type": "string",
                    "description": "Complete routing method",
                    "enum": [
                        "Bullseye",
                        "Conditional",
                        "Direct",
                        "Last",
                        "Manual",
                        "Predictive",
                        "Preferred",
                        "Standard",
                        "Vip"
                    ]
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier for the user"
                },
                "waitingInteractionCounts": {
                    "type": "array",
                    "description": "Number of waiting interactions for each predictive routing attempt",
                    "items": {
                        "type": "integer"
                    }
                },
                "wrapUpCode": {
                    "type": "string",
                    "description": "Wrap up code"
                },
                "proposedAgents": {
                    "type": "array",
                    "description": "Proposed agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/FlowMetricsTopicFlowProposedAgent"
                    }
                },
                "outcomes": {
                    "type": "array",
                    "description": "Flow outcomes",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/FlowMetricsTopicFlowOutcome"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "Scored agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/FlowMetricsTopicFlowScoredAgent"
                    }
                }
            }
        },
        "StatEventFlowOutcomeTopicMetricStats": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:flow:outcome:topic:v2:MetricStats",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "StatEventFlowOutcomeTopicIntervalMetrics": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:flow:outcome:topic:v2:IntervalMetrics",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventFlowOutcomeTopicMetricStats"
                    }
                }
            }
        },
        "StatEventFlowOutcomeTopicStatsNotification": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:flow:outcome:topic:v2:StatsNotification",
            "properties": {
                "group": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventFlowOutcomeTopicIntervalMetrics"
                    }
                }
            }
        },
        "StatEventQueueTopicMetricStats": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:queue:topic:v2:MetricStats",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "StatEventQueueTopicIntervalMetrics": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:queue:topic:v2:IntervalMetrics",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventQueueTopicMetricStats"
                    }
                }
            }
        },
        "StatEventQueueTopicStatsNotification": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:queue:topic:v2:StatsNotification",
            "properties": {
                "group": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventQueueTopicIntervalMetrics"
                    }
                }
            }
        },
        "UserDetailsDatalakeAvailabilityTopicDataAvailabilityChangeNotification": {
            "type": "object",
            "id": "urn:jsonschema:user:details:datalake:availability:topic:DataAvailabilityChangeNotification",
            "properties": {
                "dataAvailabilityDate": {
                    "type": "string",
                    "description": "Date and time before which data is guaranteed to be available in the datalake",
                    "format": "date-time"
                }
            }
        },
        "StatEventUserTopicMetricStats": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:user:topic:v2:MetricStats",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "StatEventUserTopicIntervalMetrics": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:user:topic:v2:IntervalMetrics",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventUserTopicMetricStats"
                    }
                }
            }
        },
        "StatEventUserTopicStatsNotification": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:user:topic:v2:StatsNotification",
            "properties": {
                "group": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventUserTopicIntervalMetrics"
                    }
                }
            }
        },
        "StatEventWrapUpCodeTopicMetricStats": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:wrap:up:code:topic:v2:MetricStats",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "StatEventWrapUpCodeTopicIntervalMetrics": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:wrap:up:code:topic:v2:IntervalMetrics",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventWrapUpCodeTopicMetricStats"
                    }
                }
            }
        },
        "StatEventWrapUpCodeTopicStatsNotification": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:wrap:up:code:topic:v2:StatsNotification",
            "properties": {
                "group": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventWrapUpCodeTopicIntervalMetrics"
                    }
                }
            }
        },
        "ArchitectDependencyTrackingBuildNotificationHomeOrganization": {
            "type": "object",
            "id": "urn:jsonschema:architect:dependency:tracking:build:notification:v2:HomeOrganization",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "thirdPartyOrgName": {
                    "type": "string"
                }
            }
        },
        "ArchitectDependencyTrackingBuildNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:architect:dependency:tracking:build:notification:v2:User",
            "description": "The user who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the user."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user, if available."
                },
                "homeOrg": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectDependencyTrackingBuildNotificationHomeOrganization"
                }
            }
        },
        "ArchitectDependencyTrackingBuildNotificationClient": {
            "type": "object",
            "id": "urn:jsonschema:architect:dependency:tracking:build:notification:v2:Client",
            "description": "The client who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the client."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the client, if available."
                }
            }
        },
        "ArchitectDependencyTrackingBuildNotificationDependencyTrackingBuildNotification": {
            "type": "object",
            "id": "urn:jsonschema:architect:dependency:tracking:build:notification:v2:DependencyTrackingBuildNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The organization's new dependency tracking build status"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectDependencyTrackingBuildNotificationUser"
                },
                "client": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectDependencyTrackingBuildNotificationClient"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time the last build started, in ISO 8601 format",
                    "format": "date-time"
                }
            }
        },
        "ArchitectPromptNotificationHomeOrganization": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:HomeOrganization",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "thirdPartyOrgName": {
                    "type": "string"
                }
            }
        },
        "ArchitectPromptNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:User",
            "description": "The user who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the user."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user, if available."
                },
                "homeOrg": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectPromptNotificationHomeOrganization"
                }
            }
        },
        "ArchitectPromptNotificationClient": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:Client",
            "description": "The client who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the client."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the client, if available."
                }
            }
        },
        "ArchitectPromptNotificationErrorMessageParams": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:ErrorMessageParams",
            "description": "The error message params, if the action failed",
            "properties": {
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ArchitectPromptNotificationErrorDetail": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:ErrorDetail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                }
            }
        },
        "ArchitectPromptNotificationArchitectOperation": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:ArchitectOperation",
            "description": "Describes an operation being performed on an Architect object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for this operation, as generated by the initiating client"
                },
                "complete": {
                    "type": "boolean",
                    "description": "Indicates if the operation is complete"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectPromptNotificationUser"
                },
                "client": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectPromptNotificationClient"
                },
                "actionName": {
                    "type": "string",
                    "description": "The action being performed",
                    "enum": [
                        "CREATE",
                        "CHECKIN",
                        "CHECKOUT",
                        "DEBUG",
                        "DELETE",
                        "HISTORY",
                        "PUBLISH",
                        "REVERT",
                        "SAVE",
                        "STATE_CHANGE",
                        "UPDATE",
                        "VALIDATE"
                    ]
                },
                "actionStatus": {
                    "type": "string",
                    "description": "The action status",
                    "enum": [
                        "LOCKED",
                        "UNLOCKED",
                        "STARTED",
                        "PENDING_GENERATION",
                        "PENDING_BACKEND_NOTIFICATION",
                        "SUCCESS",
                        "FAILURE"
                    ]
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The error message, if the action failed"
                },
                "errorCode": {
                    "type": "string",
                    "description": "The error code, if the action failed"
                },
                "errorMessageParams": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectPromptNotificationErrorMessageParams"
                },
                "errorDetails": {
                    "type": "array",
                    "description": "The error details, if the action failed",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ArchitectPromptNotificationErrorDetail"
                    }
                }
            }
        },
        "ArchitectPromptNotificationPromptNotification": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:notification:v2:PromptNotification",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The prompt ID"
                },
                "name": {
                    "type": "string",
                    "description": "The prompt name"
                },
                "description": {
                    "type": "string",
                    "description": "The prompt description"
                },
                "currentOperation": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectPromptNotificationArchitectOperation"
                }
            }
        },
        "ArchitectPromptResourceNotificationPromptResourceNotification": {
            "type": "object",
            "id": "urn:jsonschema:architect:prompt:resource:notification:v2:PromptResourceNotification",
            "properties": {
                "promptId": {
                    "type": "string",
                    "description": "Id of the prompt that this notification is for."
                },
                "id": {
                    "type": "string",
                    "description": "Id of the prompt resource that this notification is for."
                },
                "language": {
                    "type": "string",
                    "description": "Language resource that this notification is for."
                },
                "mediaUri": {
                    "type": "string",
                    "description": "Uri to the file for this prompt resource."
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "Current upload status of the prompt resource (created, uploaded, transcoded, transcodeFailed)."
                },
                "durationSeconds": {
                    "type": "number",
                    "description": "Duration (in seconds) for the transcoded audio file."
                }
            }
        },
        "ArchitectSystemPromptResourceNotificationSystemPromptResourceNotification": {
            "type": "object",
            "id": "urn:jsonschema:architect:system:prompt:resource:notification:v2:SystemPromptResourceNotification",
            "properties": {
                "promptId": {
                    "type": "string",
                    "description": "Id of the prompt that this notification is for."
                },
                "id": {
                    "type": "string",
                    "description": "Id of the prompt resource that this notification is for."
                },
                "language": {
                    "type": "string",
                    "description": "Language resource that this notification is for."
                },
                "mediaUri": {
                    "type": "string",
                    "description": "Uri to the file for this system prompt resource."
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "Current upload status of the prompt resource (created, uploaded, transcoded, transcodeFailed)."
                },
                "durationSeconds": {
                    "type": "number",
                    "description": "Duration (in seconds) for the transcoded audio file."
                }
            }
        },
        "AuditTopicDomainEntityRef": {
            "type": "object",
            "id": "urn:jsonschema:audit:topic:v2:DomainEntityRef",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "AuditTopicAddressableEntityRef": {
            "type": "object",
            "id": "urn:jsonschema:audit:topic:v2:AddressableEntityRef",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "AuditTopicMessageInfo": {
            "type": "object",
            "id": "urn:jsonschema:audit:topic:v2:MessageInfo",
            "properties": {
                "localizableMessageCode": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "AuditTopicPropertyChange": {
            "type": "object",
            "id": "urn:jsonschema:audit:topic:v2:PropertyChange",
            "properties": {
                "property": {
                    "type": "string"
                },
                "oldValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "newValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AuditTopicAuditLogMessage": {
            "type": "object",
            "id": "urn:jsonschema:audit:topic:v2:AuditLogMessage",
            "properties": {
                "id": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "userHomeOrgId": {
                    "type": "string"
                },
                "username": {
                    "type": "object",
                    "$ref": "#/definitions/AuditTopicDomainEntityRef"
                },
                "userDisplay": {
                    "type": "string"
                },
                "clientId": {
                    "type": "object",
                    "$ref": "#/definitions/AuditTopicAddressableEntityRef"
                },
                "remoteIp": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceName": {
                    "type": "string",
                    "enum": [
                        "LanguageUnderstanding",
                        "ContentManagement",
                        "PeoplePermissions",
                        "Presence",
                        "Architect",
                        "ContactCenter",
                        "Quality",
                        "SpeechAndTextAnalytics",
                        "PredictiveEngagement",
                        "Knowledge",
                        "Coaching",
                        "Learning",
                        "WorkforceManagement",
                        "Triggers",
                        "ProcessAutomation",
                        "ResponseManagement",
                        "Groups",
                        "Telephony",
                        "Outbound",
                        "Routing",
                        "Gamification",
                        "Integrations",
                        "Webhooks",
                        "AnalyticsReporting",
                        "Limits",
                        "EmployeePerformance",
                        "Datatables",
                        "Messaging",
                        "WebDeployments",
                        "Supportability",
                        "Callback",
                        "Directory",
                        "ExternalContacts",
                        "Workitems",
                        "SCIM",
                        "NumberPurchasing",
                        "Marketplace",
                        "LogCapture",
                        "GDPRService",
                        "AgentConfig",
                        "Emails"
                    ]
                },
                "level": {
                    "type": "string"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "message": {
                    "type": "object",
                    "$ref": "#/definitions/AuditTopicMessageInfo"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "View",
                        "Create",
                        "Update",
                        "Delete",
                        "Move",
                        "Copy",
                        "Download",
                        "ShareAdd",
                        "ShareRemove",
                        "Fax",
                        "VersionCreate",
                        "TagAdd",
                        "TagRemove",
                        "TagUpdate",
                        "Add",
                        "Remove",
                        "MemberAdd",
                        "MemberUpdate",
                        "MemberRemove",
                        "Authorize",
                        "Deauthorize",
                        "Authenticate",
                        "ChangePassword",
                        "Revoke",
                        "Activate",
                        "Checkin",
                        "Checkout",
                        "Deactivate",
                        "Debug",
                        "Publish",
                        "Revert",
                        "Save",
                        "Transcode",
                        "Upload",
                        "Read",
                        "Execute",
                        "Abandon",
                        "Archive",
                        "Export",
                        "RestoreRequest",
                        "RestoreComplete",
                        "UpdateRetention",
                        "ApplyProtection",
                        "RevokeProtection",
                        "Rotate",
                        "DeleteAll",
                        "Reassign",
                        "Unarchive",
                        "Assign",
                        "Unassign",
                        "Reset",
                        "Reschedule",
                        "Unpublish",
                        "Purge",
                        "Processed",
                        "Enable",
                        "Disable",
                        "Recycle",
                        "Append",
                        "Restore",
                        "Open",
                        "Approved",
                        "Rejected",
                        "Rollback",
                        "ImplementingChange",
                        "ChangeImplemented",
                        "ImplementingRollback",
                        "RollbackImplemented",
                        "Write",
                        "Replace",
                        "UpdateInService",
                        "UpdateOutOfService",
                        "Cycle",
                        "Scale",
                        "IpAllowlistClear",
                        "AddPairingRole",
                        "Verify",
                        "Cancel",
                        "HardDelete",
                        "SoftDelete",
                        "EnableCapture",
                        "DownloadCapture"
                    ]
                },
                "entityType": {
                    "type": "string",
                    "enum": [
                        "Feedback",
                        "Document",
                        "Workspace",
                        "AccessToken",
                        "OAuthClientAuthorization",
                        "AuthOrganization",
                        "OAuthClient",
                        "AuthUser",
                        "OrganizationAuthorizationTrust",
                        "OrganizationAuthorizationUserTrust",
                        "Role",
                        "RoleSettings",
                        "VoicemailUserPolicy",
                        "UserPresence",
                        "DependencyTrackingBuild",
                        "Flow",
                        "Prompt",
                        "PromptResource",
                        "FlowOutcome",
                        "FlowMilestone",
                        "AgentRoutingInfo",
                        "Queue",
                        "WrapupCode",
                        "MaxOrgRoutingUtilizationCapacity",
                        "ConversationAttributes",
                        "RoutingUtilizationTag",
                        "Evaluation",
                        "Calibration",
                        "Survey",
                        "EvaluationForm",
                        "SurveyForm",
                        "Recording",
                        "ScreenRecording",
                        "BulkActions",
                        "OrphanedRecording",
                        "Policy",
                        "RecordingAnnotation",
                        "RecordingSettings",
                        "RecordingKey",
                        "RecordingKeyConfig",
                        "Topic",
                        "Program",
                        "SentimentFeedback",
                        "Segment",
                        "Outcome",
                        "ActionMap",
                        "ActionTemplate",
                        "ClickstreamSettings",
                        "EventType",
                        "SessionType",
                        "KnowledgeBase",
                        "KnowledgeCategory",
                        "KnowledgeDocument",
                        "KnowledgeDocumentVariation",
                        "KnowledgeLabel",
                        "KnowledgeTraining",
                        "KnowledgeSearchFeedback",
                        "TranscriptionSettings",
                        "SpeechTextAnalyticsSettings",
                        "Appointment",
                        "Annotation",
                        "Organization",
                        "Module",
                        "Rule",
                        "Assignment",
                        "ActivityCode",
                        "AdherenceExplanation",
                        "BusinessUnit",
                        "Forecast",
                        "ManagementUnit",
                        "PlanningGroup",
                        "Schedule",
                        "ServiceGoalTemplate",
                        "ShiftTrade",
                        "TimeOffLimit",
                        "TimeOffPlan",
                        "TimeOffRequest",
                        "WorkPlan",
                        "WorkPlanRotation",
                        "HistoricalData",
                        "Trigger",
                        "Response",
                        "ResponseAsset",
                        "SkillsGroup",
                        "DirectoryGroup",
                        "Team",
                        "Edge",
                        "EdgeGroup",
                        "VoicemailPolicy",
                        "RoutingTranscriptionSettings",
                        "Trunk",
                        "TrunkBase",
                        "ScheduleGroup",
                        "EmergencyGroup",
                        "IVR",
                        "DID",
                        "DIDPool",
                        "Extension",
                        "ExtensionPool",
                        "Phone",
                        "PhoneBase",
                        "Line",
                        "LineBase",
                        "OutboundRoute",
                        "NumberPlan",
                        "Site",
                        "AttemptLimits",
                        "CallableTimeSet",
                        "Campaign",
                        "CampaignRule",
                        "CampaignSchedule",
                        "Sequence",
                        "SequenceSchedule",
                        "ContactList",
                        "ContactListFilter",
                        "DigitalRuleSet",
                        "DNCList",
                        "OrganizationSettings",
                        "CallAnalysisResponseSet",
                        "RuleSet",
                        "WrapUpCodeMapping",
                        "MessagingCampaign",
                        "MessagingCampaignSchedule",
                        "EmailCampaignSchedule",
                        "Predictor",
                        "Metric",
                        "Status",
                        "Profile",
                        "ProfileMembers",
                        "Action",
                        "ActionDraft",
                        "Integration",
                        "Webhook",
                        "DashboardSettings",
                        "InsightSettings",
                        "AnalyticsReportingSettings",
                        "ScheduledExports",
                        "Exports",
                        "ChangeRequest",
                        "ExternalMetricsDefinition",
                        "ExternalMetricsData",
                        "Schema",
                        "Row",
                        "Bulk",
                        "SupportedContent",
                        "ConversationPhoneNumber",
                        "ConversationRecipient",
                        "ConversationAccount",
                        "ConversationDefaultSupportedContent",
                        "ConversationThreadingWindow",
                        "Deployment",
                        "Configuration",
                        "ConfigurationVersion",
                        "EdgePreferences",
                        "EdgeTraceLevel",
                        "OrganizationIntegrationsAccess",
                        "SupportFile",
                        "EdgeLogZip",
                        "Pcaps",
                        "MediaDiagnosticsTraceFile",
                        "EdgePcaps",
                        "EdgeLog",
                        "OrganizationFeature",
                        "Product",
                        "User",
                        "Location",
                        "Participant",
                        "ContactSchema",
                        "ExternalOrganizationSchema",
                        "Workbin",
                        "Workitem",
                        "Worktype",
                        "Credential",
                        "NumberOrder",
                        "EnterpriseAgreement",
                        "GdprRequest",
                        "DefaultPanelSettings",
                        "InboundDomain",
                        "OutboundDomain",
                        "InboundRoute",
                        "OrganizationLimits",
                        "UserSkill",
                        "UserLanguage"
                    ]
                },
                "entity": {
                    "type": "object",
                    "$ref": "#/definitions/AuditTopicDomainEntityRef"
                },
                "propertyChanges": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/AuditTopicPropertyChange"
                    }
                },
                "context": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuIntradayForecastData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuIntradayForecastData",
            "properties": {
                "offered": {
                    "type": "number"
                },
                "averageHandleTimeSeconds": {
                    "type": "number"
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuIntradayScheduleData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuIntradayScheduleData",
            "properties": {
                "onQueueTimeSeconds": {
                    "type": "integer"
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicIntradayPerformancePredictionData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:IntradayPerformancePredictionData",
            "properties": {
                "serviceLevelPercent": {
                    "type": "number"
                },
                "averageSpeedOfAnswerSeconds": {
                    "type": "number"
                },
                "occupancyPercent": {
                    "type": "number"
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuIntradayDataGroup": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuIntradayDataGroup",
            "properties": {
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "Voice",
                        "Chat",
                        "Email",
                        "Callback",
                        "Message"
                    ]
                },
                "forecastDataSummary": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuIntradayForecastData"
                },
                "forecastDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuIntradayForecastData"
                    }
                },
                "scheduleDataSummary": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuIntradayScheduleData"
                },
                "scheduleDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuIntradayScheduleData"
                    }
                },
                "performancePredictionDataSummary": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicIntradayPerformancePredictionData"
                },
                "performancePredictionDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicIntradayPerformancePredictionData"
                    }
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuScheduleReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuScheduleReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuShortTermForecastReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuShortTermForecastReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuIntradayResult": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuIntradayResult",
            "properties": {
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "intervalLengthMinutes": {
                    "type": "integer"
                },
                "intradayDataGroupings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuIntradayDataGroup"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "ForecastData",
                            "ScheduleData",
                            "PerformancePredictionData"
                        ]
                    }
                },
                "noDataReason": {
                    "type": "string"
                },
                "schedule": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuScheduleReference"
                },
                "shortTermForecast": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuShortTermForecastReference"
                }
            }
        },
        "WfmBuIntradayDataUpdateTopicBuIntradayNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:intraday:data:update:topic:BuIntradayNotification",
            "properties": {
                "operationId": {
                    "type": "string"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuIntradayDataUpdateTopicBuIntradayResult"
                }
            }
        },
        "ContentManagementSingleDocumentTopicWorkspaceData": {
            "type": "object",
            "id": "urn:jsonschema:content:management:single:document:topic:v2:WorkspaceData",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "ContentManagementSingleDocumentTopicUserData": {
            "type": "object",
            "id": "urn:jsonschema:content:management:single:document:topic:v2:UserData",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ContentManagementSingleDocumentTopicLockData": {
            "type": "object",
            "id": "urn:jsonschema:content:management:single:document:topic:v2:LockData",
            "properties": {
                "lockedBy": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementSingleDocumentTopicUserData"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateExpires": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ContentManagementSingleDocumentTopicDocumentDataV2": {
            "type": "object",
            "id": "urn:jsonschema:content:management:single:document:topic:v2:DocumentDataV2",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "workspace": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementSingleDocumentTopicWorkspaceData"
                },
                "createdBy": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementSingleDocumentTopicUserData"
                },
                "contentType": {
                    "type": "string"
                },
                "contentLength": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "changeNumber": {
                    "type": "integer"
                },
                "dateUploaded": {
                    "type": "string",
                    "format": "date-time"
                },
                "uploadedBy": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementSingleDocumentTopicUserData"
                },
                "lockInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementSingleDocumentTopicLockData"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "ContentManagementWorkspaceDocumentsTopicWorkspaceData": {
            "type": "object",
            "id": "urn:jsonschema:content:management:workspace:documents:topic:v2:WorkspaceData",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "ContentManagementWorkspaceDocumentsTopicUserData": {
            "type": "object",
            "id": "urn:jsonschema:content:management:workspace:documents:topic:v2:UserData",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ContentManagementWorkspaceDocumentsTopicLockData": {
            "type": "object",
            "id": "urn:jsonschema:content:management:workspace:documents:topic:v2:LockData",
            "properties": {
                "lockedBy": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementWorkspaceDocumentsTopicUserData"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateExpires": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ContentManagementWorkspaceDocumentsTopicDocumentDataV2": {
            "type": "object",
            "id": "urn:jsonschema:content:management:workspace:documents:topic:v2:DocumentDataV2",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "workspace": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementWorkspaceDocumentsTopicWorkspaceData"
                },
                "createdBy": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementWorkspaceDocumentsTopicUserData"
                },
                "contentType": {
                    "type": "string"
                },
                "contentLength": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "changeNumber": {
                    "type": "integer"
                },
                "dateUploaded": {
                    "type": "string",
                    "format": "date-time"
                },
                "uploadedBy": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementWorkspaceDocumentsTopicUserData"
                },
                "lockInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ContentManagementWorkspaceDocumentsTopicLockData"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "TranscriptionTopicTranscriptWord": {
            "type": "object",
            "id": "urn:jsonschema:transcription:topic:TranscriptWord",
            "properties": {
                "confidence": {
                    "type": "number"
                },
                "startTimeMs": {
                    "type": "integer"
                },
                "offsetMs": {
                    "type": "integer"
                },
                "durationMs": {
                    "type": "integer"
                },
                "word": {
                    "type": "string"
                }
            }
        },
        "TranscriptionTopicTranscriptAlternative": {
            "type": "object",
            "id": "urn:jsonschema:transcription:topic:TranscriptAlternative",
            "properties": {
                "confidence": {
                    "type": "number"
                },
                "offsetMs": {
                    "type": "integer"
                },
                "durationMs": {
                    "type": "integer"
                },
                "transcript": {
                    "type": "string"
                },
                "words": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/TranscriptionTopicTranscriptWord"
                    }
                }
            }
        },
        "TranscriptionTopicTranscriptResult": {
            "type": "object",
            "id": "urn:jsonschema:transcription:topic:TranscriptResult",
            "properties": {
                "utteranceId": {
                    "type": "string"
                },
                "isFinal": {
                    "type": "boolean"
                },
                "channel": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INTERNAL",
                        "EXTERNAL",
                        "BOTH"
                    ]
                },
                "alternatives": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/TranscriptionTopicTranscriptAlternative"
                    }
                },
                "agentAssistantId": {
                    "type": "string"
                },
                "engineId": {
                    "type": "string"
                },
                "dialect": {
                    "type": "string"
                },
                "speechTextAnalyticsProgramId": {
                    "type": "string"
                },
                "agentAssistEnabled": {
                    "type": "boolean"
                },
                "voiceTranscriptionEnabled": {
                    "type": "boolean"
                }
            }
        },
        "TranscriptionTopicTranscriptionRequestStatus": {
            "type": "object",
            "id": "urn:jsonschema:transcription:topic:TranscriptionRequestStatus",
            "properties": {
                "offsetMs": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SESSION_ONGOING",
                        "SESSION_ENDED"
                    ]
                }
            }
        },
        "TranscriptionTopicTranscriptionMessage": {
            "type": "object",
            "id": "urn:jsonschema:transcription:topic:TranscriptionMessage",
            "properties": {
                "eventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "organizationId": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "string"
                },
                "communicationId": {
                    "type": "string"
                },
                "sessionStartTimeMs": {
                    "type": "integer"
                },
                "transcriptionStartTimeMs": {
                    "type": "integer"
                },
                "transcripts": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/TranscriptionTopicTranscriptResult"
                    }
                },
                "status": {
                    "type": "object",
                    "$ref": "#/definitions/TranscriptionTopicTranscriptionRequestStatus"
                }
            }
        },
        "AcdEndDetailEventTopicAcdEndEvent": {
            "type": "object",
            "id": "urn:jsonschema:acd:end:detail:event:topic:AcdEndEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "ENDPOINT",
                        "CLIENT",
                        "SYSTEM",
                        "TRANSFER",
                        "ERROR",
                        "PEER",
                        "OTHER",
                        "SPAM",
                        "TIMEOUT",
                        "TRANSPORT_FAILURE",
                        "CONFERENCE_TRANSFER",
                        "CONSULT_TRANSFER",
                        "FORWARD_TRANSFER",
                        "NO_ANSWER_TRANSFER",
                        "NOT_AVAILABLE_TRANSFER",
                        "UNCALLABLE",
                        "DND_ENDPOINT",
                        "DND_TRANSFER"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "queueId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "acdOutcome": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "ABANDON",
                        "ANSWERED",
                        "FLOW_OUT"
                    ]
                },
                "answeredUserId": {
                    "type": "string"
                },
                "requestedRoutings": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "UNKNOWN",
                            "MANUAL",
                            "PREDICTIVE",
                            "PREFERRED",
                            "LAST",
                            "BULLSEYE",
                            "STANDARD",
                            "OTHER",
                            "CONDITIONAL",
                            "VIP"
                        ]
                    }
                },
                "usedRouting": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "MANUAL",
                        "PREDICTIVE",
                        "PREFERRED",
                        "LAST",
                        "BULLSEYE",
                        "STANDARD",
                        "OTHER",
                        "CONDITIONAL",
                        "VIP"
                    ]
                },
                "requestedRoutingSkillIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requestedLanguageId": {
                    "type": "string"
                },
                "requestedRoutingUserIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "routingPriority": {
                    "type": "integer"
                },
                "connectedDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AcdStartDetailEventTopicAcdStartEvent": {
            "type": "object",
            "id": "urn:jsonschema:acd:start:detail:event:topic:AcdStartEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "queueId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AcwDetailEventTopicAfterCallWorkEvent": {
            "type": "object",
            "id": "urn:jsonschema:acw:detail:event:topic:AfterCallWorkEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "userId": {
                    "type": "string"
                },
                "queueId": {
                    "type": "string"
                },
                "wrapupCode": {
                    "type": "string"
                },
                "wrapupNotes": {
                    "type": "string"
                },
                "wrapupDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AttributeDetailEventTopicAttributeUpdateEvent": {
            "type": "object",
            "id": "urn:jsonschema:attribute:detail:event:topic:AttributeUpdateEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ContactDetailEventTopicContactUpdateEvent": {
            "type": "object",
            "id": "urn:jsonschema:contact:detail:event:topic:ContactUpdateEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "externalOrganizationId": {
                    "type": "string"
                },
                "externalContactId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CustomerEndDetailEventTopicCustomerEndEvent": {
            "type": "object",
            "id": "urn:jsonschema:customer:end:detail:event:topic:CustomerEndEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "ENDPOINT",
                        "CLIENT",
                        "SYSTEM",
                        "TRANSFER",
                        "ERROR",
                        "PEER",
                        "OTHER",
                        "SPAM",
                        "TIMEOUT",
                        "TRANSPORT_FAILURE",
                        "CONFERENCE_TRANSFER",
                        "CONSULT_TRANSFER",
                        "FORWARD_TRANSFER",
                        "NO_ANSWER_TRANSFER",
                        "NOT_AVAILABLE_TRANSFER",
                        "UNCALLABLE",
                        "DND_ENDPOINT",
                        "DND_TRANSFER"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "externalOrganizationId": {
                    "type": "string"
                },
                "externalContactId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "interactingDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CustomerStartDetailEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:customer:start:detail:event:topic:JourneyContext",
            "properties": {
                "sessionId": {
                    "type": "string"
                },
                "sessionIdType": {
                    "type": "string"
                },
                "actionId": {
                    "type": "string"
                },
                "actionMapId": {
                    "type": "string"
                }
            }
        },
        "CustomerStartDetailEventTopicCustomerStartEvent": {
            "type": "object",
            "id": "urn:jsonschema:customer:start:detail:event:topic:CustomerStartEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "externalOrganizationId": {
                    "type": "string"
                },
                "externalContactId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/CustomerStartDetailEventTopicJourneyContext"
                }
            }
        },
        "FlowEndDetailEventTopicFlowEndEvent": {
            "type": "object",
            "id": "urn:jsonschema:flow:end:detail:event:topic:FlowEndEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "ENDPOINT",
                        "CLIENT",
                        "SYSTEM",
                        "TRANSFER",
                        "ERROR",
                        "PEER",
                        "OTHER",
                        "SPAM",
                        "TIMEOUT",
                        "TRANSPORT_FAILURE",
                        "CONFERENCE_TRANSFER",
                        "CONSULT_TRANSFER",
                        "FORWARD_TRANSFER",
                        "NO_ANSWER_TRANSFER",
                        "NOT_AVAILABLE_TRANSFER",
                        "UNCALLABLE",
                        "DND_ENDPOINT",
                        "DND_TRANSFER"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "flowType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUNDCALL",
                        "OUTBOUNDCALL",
                        "INQUEUECALL",
                        "SECURECALL",
                        "INBOUNDEMAIL",
                        "SURVEYINVITE",
                        "INBOUNDSHORTMESSAGE",
                        "INBOUNDCHAT",
                        "WORKFLOW",
                        "BOT",
                        "DIGITALBOT",
                        "COMMONMODULE",
                        "INQUEUEEMAIL",
                        "INQUEUESHORTMESSAGE",
                        "VOICE",
                        "VOICEMAIL",
                        "WORKITEM"
                    ]
                },
                "flowId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "flowVersion": {
                    "type": "string"
                },
                "connectedDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FlowStartDetailEventTopicFlowStartEvent": {
            "type": "object",
            "id": "urn:jsonschema:flow:start:detail:event:topic:FlowStartEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "flowType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUNDCALL",
                        "OUTBOUNDCALL",
                        "INQUEUECALL",
                        "SECURECALL",
                        "INBOUNDEMAIL",
                        "SURVEYINVITE",
                        "INBOUNDSHORTMESSAGE",
                        "INBOUNDCHAT",
                        "WORKFLOW",
                        "BOT",
                        "DIGITALBOT",
                        "COMMONMODULE",
                        "INQUEUEEMAIL",
                        "INQUEUESHORTMESSAGE",
                        "VOICE",
                        "VOICEMAIL",
                        "WORKITEM"
                    ]
                },
                "flowId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "flowVersion": {
                    "type": "string"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OutboundDetailEventTopicOutboundInitEvent": {
            "type": "object",
            "id": "urn:jsonschema:outbound:detail:event:topic:OutboundInitEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "outboundCampaignId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "outboundContactListId": {
                    "type": "string"
                },
                "outboundContactId": {
                    "type": "string"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UserEndDetailEventTopicUserEndEvent": {
            "type": "object",
            "id": "urn:jsonschema:user:end:detail:event:topic:UserEndEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "ENDPOINT",
                        "CLIENT",
                        "SYSTEM",
                        "TRANSFER",
                        "ERROR",
                        "PEER",
                        "OTHER",
                        "SPAM",
                        "TIMEOUT",
                        "TRANSPORT_FAILURE",
                        "CONFERENCE_TRANSFER",
                        "CONSULT_TRANSFER",
                        "FORWARD_TRANSFER",
                        "NO_ANSWER_TRANSFER",
                        "NOT_AVAILABLE_TRANSFER",
                        "UNCALLABLE",
                        "DND_ENDPOINT",
                        "DND_TRANSFER"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "userId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "queueId": {
                    "type": "string"
                },
                "interactingDurationMs": {
                    "type": "integer"
                },
                "heldDurationMs": {
                    "type": "integer"
                },
                "alertingDurationMs": {
                    "type": "integer"
                },
                "contactingDurationMs": {
                    "type": "integer"
                },
                "dialingDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UserStartDetailEventTopicUserStartEvent": {
            "type": "object",
            "id": "urn:jsonschema:user:start:detail:event:topic:UserStartEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "userId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "queueId": {
                    "type": "string"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VoicemailEndDetailEventTopicVoicemailEndEvent": {
            "type": "object",
            "id": "urn:jsonschema:voicemail:end:detail:event:topic:VoicemailEndEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "ENDPOINT",
                        "CLIENT",
                        "SYSTEM",
                        "TRANSFER",
                        "ERROR",
                        "PEER",
                        "OTHER",
                        "SPAM",
                        "TIMEOUT",
                        "TRANSPORT_FAILURE",
                        "CONFERENCE_TRANSFER",
                        "CONSULT_TRANSFER",
                        "FORWARD_TRANSFER",
                        "NO_ANSWER_TRANSFER",
                        "NOT_AVAILABLE_TRANSFER",
                        "UNCALLABLE",
                        "DND_ENDPOINT",
                        "DND_TRANSFER"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "queueId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "voicemailDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VoicemailStartDetailEventTopicVoicemailStartEvent": {
            "type": "object",
            "id": "urn:jsonschema:voicemail:start:detail:event:topic:VoicemailStartEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "queueId": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WrapupDetailEventTopicWrapupEvent": {
            "type": "object",
            "id": "urn:jsonschema:wrapup:detail:event:topic:WrapupEvent",
            "properties": {
                "eventTime": {
                    "type": "integer"
                },
                "conversationId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "VOICE",
                        "CHAT",
                        "EMAIL",
                        "CALLBACK",
                        "COBROWSE",
                        "VIDEO",
                        "SCREENSHARE",
                        "MESSAGE"
                    ]
                },
                "provider": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "INBOUND",
                        "OUTBOUND"
                    ]
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "addressFrom": {
                    "type": "string"
                },
                "callbackUserName": {
                    "type": "string"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackScheduledTime": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SMS",
                        "TWITTER",
                        "FACEBOOK",
                        "LINE",
                        "WHATSAPP",
                        "WEBMESSAGING",
                        "OPEN",
                        "INSTAGRAM"
                    ]
                },
                "queueId": {
                    "type": "string"
                },
                "wrapupCode": {
                    "type": "string"
                },
                "wrapupNotes": {
                    "type": "string"
                },
                "wrapupDurationMs": {
                    "type": "integer"
                },
                "conversationExternalContactIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationExternalOrganizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ExternalContactsContactChangedTopicExternalOrganization": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:ExternalOrganization",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicPhoneNumber": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:PhoneNumber",
            "properties": {
                "display": {
                    "type": "string"
                },
                "extension": {
                    "type": "integer"
                },
                "acceptsSMS": {
                    "type": "boolean"
                },
                "userInput": {
                    "type": "string"
                },
                "e164": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicContactAddress": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:ContactAddress",
            "properties": {
                "address1": {
                    "type": "string"
                },
                "address2": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicTwitterId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:TwitterId",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "screenName": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                },
                "profileUrl": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicLineUserId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:LineUserId",
            "properties": {
                "userId": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicLineId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:LineId",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsContactChangedTopicLineUserId"
                    }
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicWhatsAppId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:WhatsAppId",
            "properties": {
                "phoneNumber": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicPhoneNumber"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicFacebookScopedId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:FacebookScopedId",
            "properties": {
                "scopedId": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicFacebookId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:FacebookId",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsContactChangedTopicFacebookScopedId"
                    }
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicInstagramScopedId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:InstagramScopedId",
            "properties": {
                "scopedId": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicInstagramId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:InstagramId",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsContactChangedTopicInstagramScopedId"
                    }
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsContactChangedTopicDataSchema": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:DataSchema",
            "properties": {
                "id": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "ExternalContactsContactChangedTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:Object"
        },
        "ExternalContactsContactChangedTopicContact": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:contact:changed:topic:v2:Contact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicExternalOrganization"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Ephemeral",
                        "Identified",
                        "Curated"
                    ]
                },
                "firstName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "salutation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "workPhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicPhoneNumber"
                },
                "cellPhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicPhoneNumber"
                },
                "homePhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicPhoneNumber"
                },
                "otherPhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicPhoneNumber"
                },
                "workEmail": {
                    "type": "string"
                },
                "personalEmail": {
                    "type": "string"
                },
                "otherEmail": {
                    "type": "string"
                },
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicContactAddress"
                },
                "surveyOptOut": {
                    "type": "boolean"
                },
                "externalSystemUrl": {
                    "type": "string"
                },
                "twitterId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicTwitterId"
                },
                "lineId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicLineId"
                },
                "whatsAppId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicWhatsAppId"
                },
                "facebookId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicFacebookId"
                },
                "instagramId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicInstagramId"
                },
                "schema": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsContactChangedTopicDataSchema"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsContactChangedTopicObject"
                    }
                },
                "createDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modifyDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "JourneySessionEventsNotificationExternalContact": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:ExternalContact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationOutcome": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Outcome",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationOutcomeAchievement": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:OutcomeAchievement",
            "properties": {
                "outcome": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationOutcome"
                },
                "achievedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "JourneySessionEventsNotificationSegment": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Segment",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationSegmentAssignment": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:SegmentAssignment",
            "properties": {
                "segment": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationSegment"
                },
                "assignedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "JourneySessionEventsNotificationBrowser": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Browser",
            "properties": {
                "family": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "viewHeight": {
                    "type": "integer"
                },
                "viewWidth": {
                    "type": "integer"
                },
                "featuresFlash": {
                    "type": "boolean"
                },
                "featuresJava": {
                    "type": "boolean"
                },
                "featuresPdf": {
                    "type": "boolean"
                },
                "featuresWebrtc": {
                    "type": "boolean"
                }
            }
        },
        "JourneySessionEventsNotificationDevice": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Device",
            "properties": {
                "type": {
                    "type": "string"
                },
                "isMobile": {
                    "type": "boolean"
                },
                "screenHeight": {
                    "type": "integer"
                },
                "screenWidth": {
                    "type": "integer"
                },
                "screenDensity": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet",
                        "other"
                    ]
                },
                "manufacturer": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationGeoLocation": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:GeoLocation",
            "properties": {
                "country": {
                    "type": "string"
                },
                "countryName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "locality": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationPage": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Page",
            "properties": {
                "url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "breadcrumb": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "JourneySessionEventsNotificationMktCampaign": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:MktCampaign",
            "properties": {
                "content": {
                    "type": "string"
                },
                "medium": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "term": {
                    "type": "string"
                },
                "clickId": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationReferrer": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Referrer",
            "properties": {
                "url": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "medium": {
                    "type": "string",
                    "enum": [
                        "internal",
                        "search",
                        "social",
                        "email",
                        "unknown",
                        "paid"
                    ]
                }
            }
        },
        "JourneySessionEventsNotificationSessionLastEvent": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:SessionLastEvent",
            "properties": {
                "id": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "JourneySessionEventsNotificationConversation": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:Conversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:User",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationConversationUserDisposition": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:ConversationUserDisposition",
            "properties": {
                "code": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationUser"
                }
            }
        },
        "JourneySessionEventsNotificationConnectedQueue": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:ConnectedQueue",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationConversationChannel": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:ConversationChannel",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Voice",
                        "Chat",
                        "Email",
                        "Callback",
                        "Cobrowse",
                        "Video",
                        "Screenshare",
                        "Message"
                    ]
                },
                "messageType": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Sms",
                        "Twitter",
                        "Facebook",
                        "Line",
                        "WhatsApp",
                        "WebMessaging",
                        "Open",
                        "Instagram"
                    ]
                },
                "platform": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationApp": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:App",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "buildNumber": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationSdkLibrary": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:SdkLibrary",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "JourneySessionEventsNotificationNetworkConnectivity": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:NetworkConnectivity",
            "properties": {
                "carrier": {
                    "type": "string"
                },
                "bluetoothEnabled": {
                    "type": "boolean"
                },
                "cellularEnabled": {
                    "type": "boolean"
                },
                "wifiEnabled": {
                    "type": "boolean"
                }
            }
        },
        "JourneySessionEventsNotificationSessionEvent": {
            "type": "object",
            "id": "urn:jsonschema:journey:session:events:notification:SessionEvent",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationExternalContact"
                },
                "customerId": {
                    "type": "string"
                },
                "customerIdType": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "outcomeAchievements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneySessionEventsNotificationOutcomeAchievement"
                    }
                },
                "segmentAssignments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneySessionEventsNotificationSegmentAssignment"
                    }
                },
                "awayDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationBrowser"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationGeoLocation"
                },
                "idleDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "lastPage": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationPage"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationMktCampaign"
                },
                "referrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationReferrer"
                },
                "searchTerms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userAgentString": {
                    "type": "string"
                },
                "durationInSeconds": {
                    "type": "integer"
                },
                "eventCount": {
                    "type": "integer"
                },
                "pageviewCount": {
                    "type": "integer"
                },
                "screenviewCount": {
                    "type": "integer"
                },
                "lastEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationSessionLastEvent"
                },
                "conversation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationConversation"
                },
                "originatingDirection": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Inbound",
                        "Outbound"
                    ]
                },
                "conversationSubject": {
                    "type": "string"
                },
                "lastUserDisposition": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationConversationUserDisposition"
                },
                "lastConnectedUser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationUser"
                },
                "lastConnectedQueue": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationConnectedQueue"
                },
                "conversationChannels": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneySessionEventsNotificationConversationChannel"
                    }
                },
                "lastUserDisconnectType": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Endpoint",
                        "Client",
                        "System",
                        "Transfer",
                        "Error",
                        "Peer",
                        "Other",
                        "Spam",
                        "Timeout",
                        "TransportFailure",
                        "ConferenceTransfer",
                        "ConsultTransfer",
                        "ForwardTransfer",
                        "NoAnswerTransfer",
                        "NotAvailableTransfer",
                        "Uncallable",
                        "DidNotDeliverEndpoint",
                        "DidNotDeliverTransfer"
                    ]
                },
                "lastAcdOutcome": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Abandon",
                        "Answered",
                        "FlowOut"
                    ]
                },
                "authenticated": {
                    "type": "boolean"
                },
                "app": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationApp"
                },
                "sdkLibrary": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationSdkLibrary"
                },
                "networkConnectivity": {
                    "type": "object",
                    "$ref": "#/definitions/JourneySessionEventsNotificationNetworkConnectivity"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicExternalOrganization": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:ExternalOrganization",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicPhoneNumber": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:PhoneNumber",
            "properties": {
                "display": {
                    "type": "string"
                },
                "extension": {
                    "type": "integer"
                },
                "acceptsSMS": {
                    "type": "boolean"
                },
                "userInput": {
                    "type": "string"
                },
                "e164": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicContactAddress": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:ContactAddress",
            "properties": {
                "address1": {
                    "type": "string"
                },
                "address2": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicTwitterId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:TwitterId",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "screenName": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                },
                "profileUrl": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicLineUserId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:LineUserId",
            "properties": {
                "userId": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicLineId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:LineId",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicLineUserId"
                    }
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicWhatsAppId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:WhatsAppId",
            "properties": {
                "phoneNumber": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicPhoneNumber"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicFacebookScopedId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:FacebookScopedId",
            "properties": {
                "scopedId": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicFacebookId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:FacebookId",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicFacebookScopedId"
                    }
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicInstagramScopedId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:InstagramScopedId",
            "properties": {
                "scopedId": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicInstagramId": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:InstagramId",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicInstagramScopedId"
                    }
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicDataSchema": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:DataSchema",
            "properties": {
                "id": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "ExternalContactsUnresolvedContactChangedTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:Object"
        },
        "ExternalContactsUnresolvedContactChangedTopicContact": {
            "type": "object",
            "id": "urn:jsonschema:external:contacts:unresolved:contact:changed:topic:v2:Contact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicExternalOrganization"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Ephemeral",
                        "Identified",
                        "Curated"
                    ]
                },
                "firstName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "salutation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "workPhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicPhoneNumber"
                },
                "cellPhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicPhoneNumber"
                },
                "homePhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicPhoneNumber"
                },
                "otherPhone": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicPhoneNumber"
                },
                "workEmail": {
                    "type": "string"
                },
                "personalEmail": {
                    "type": "string"
                },
                "otherEmail": {
                    "type": "string"
                },
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicContactAddress"
                },
                "surveyOptOut": {
                    "type": "boolean"
                },
                "externalSystemUrl": {
                    "type": "string"
                },
                "twitterId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicTwitterId"
                },
                "lineId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicLineId"
                },
                "whatsAppId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicWhatsAppId"
                },
                "facebookId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicFacebookId"
                },
                "instagramId": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicInstagramId"
                },
                "schema": {
                    "type": "object",
                    "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicDataSchema"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/ExternalContactsUnresolvedContactChangedTopicObject"
                    }
                },
                "createDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modifyDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ArchitectFlowOutcomeNotificationHomeOrganization": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:HomeOrganization",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "thirdPartyOrgName": {
                    "type": "string"
                }
            }
        },
        "ArchitectFlowOutcomeNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:User",
            "description": "The user who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the user."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user, if available."
                },
                "homeOrg": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowOutcomeNotificationHomeOrganization"
                }
            }
        },
        "ArchitectFlowOutcomeNotificationClient": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:Client",
            "description": "The client who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the client."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the client, if available."
                }
            }
        },
        "ArchitectFlowOutcomeNotificationErrorMessageParams": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:ErrorMessageParams",
            "description": "The error message params, if the action failed",
            "properties": {
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ArchitectFlowOutcomeNotificationErrorDetail": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:ErrorDetail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                }
            }
        },
        "ArchitectFlowOutcomeNotificationArchitectOperation": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:ArchitectOperation",
            "description": "Describes an operation being performed on an Architect object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for this operation, as generated by the initiating client"
                },
                "complete": {
                    "type": "boolean",
                    "description": "Indicates if the operation is complete"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowOutcomeNotificationUser"
                },
                "client": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowOutcomeNotificationClient"
                },
                "actionName": {
                    "type": "string",
                    "description": "The action being performed",
                    "enum": [
                        "CREATE",
                        "CHECKIN",
                        "CHECKOUT",
                        "DEBUG",
                        "DELETE",
                        "HISTORY",
                        "PUBLISH",
                        "REVERT",
                        "SAVE",
                        "STATE_CHANGE",
                        "UPDATE",
                        "VALIDATE"
                    ]
                },
                "actionStatus": {
                    "type": "string",
                    "description": "The action status",
                    "enum": [
                        "LOCKED",
                        "UNLOCKED",
                        "STARTED",
                        "PENDING_GENERATION",
                        "PENDING_BACKEND_NOTIFICATION",
                        "SUCCESS",
                        "FAILURE"
                    ]
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The error message, if the action failed"
                },
                "errorCode": {
                    "type": "string",
                    "description": "The error code, if the action failed"
                },
                "errorMessageParams": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowOutcomeNotificationErrorMessageParams"
                },
                "errorDetails": {
                    "type": "array",
                    "description": "The error details, if the action failed",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ArchitectFlowOutcomeNotificationErrorDetail"
                    }
                }
            }
        },
        "ArchitectFlowOutcomeNotificationFlowOutcomeNotification": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:outcome:notification:FlowOutcomeNotification",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The flow outcome ID"
                },
                "name": {
                    "type": "string",
                    "description": "The flow outcome name"
                },
                "description": {
                    "type": "string",
                    "description": "The flow outcome description"
                },
                "currentOperation": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowOutcomeNotificationArchitectOperation"
                }
            }
        },
        "ArchitectFlowNotificationFlowVersion": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:FlowVersion",
            "description": "A bare-bones flow version object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The version ID"
                }
            }
        },
        "ArchitectFlowNotificationHomeOrganization": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:HomeOrganization",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "thirdPartyOrgName": {
                    "type": "string"
                }
            }
        },
        "ArchitectFlowNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:User",
            "description": "The user who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the user."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user, if available."
                },
                "homeOrg": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowNotificationHomeOrganization"
                }
            }
        },
        "ArchitectFlowNotificationClient": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:Client",
            "description": "The client who initiated the change.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the client."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the client, if available."
                }
            }
        },
        "ArchitectFlowNotificationErrorMessageParams": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:ErrorMessageParams",
            "description": "The error message params, if the action failed",
            "properties": {
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ArchitectFlowNotificationErrorDetail": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:ErrorDetail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                }
            }
        },
        "ArchitectFlowNotificationArchitectOperation": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:ArchitectOperation",
            "description": "Describes an operation being performed on an Architect object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for this operation, as generated by the initiating client"
                },
                "complete": {
                    "type": "boolean",
                    "description": "Indicates if the operation is complete"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowNotificationUser"
                },
                "client": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowNotificationClient"
                },
                "actionName": {
                    "type": "string",
                    "description": "The action being performed",
                    "enum": [
                        "CREATE",
                        "CHECKIN",
                        "CHECKOUT",
                        "DEBUG",
                        "DELETE",
                        "HISTORY",
                        "PUBLISH",
                        "REVERT",
                        "SAVE",
                        "STATE_CHANGE",
                        "UPDATE",
                        "VALIDATE"
                    ]
                },
                "actionStatus": {
                    "type": "string",
                    "description": "The action status",
                    "enum": [
                        "LOCKED",
                        "UNLOCKED",
                        "STARTED",
                        "PENDING_GENERATION",
                        "PENDING_BACKEND_NOTIFICATION",
                        "SUCCESS",
                        "FAILURE"
                    ]
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The error message, if the action failed"
                },
                "errorCode": {
                    "type": "string",
                    "description": "The error code, if the action failed"
                },
                "errorMessageParams": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowNotificationErrorMessageParams"
                },
                "errorDetails": {
                    "type": "array",
                    "description": "The error details, if the action failed",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ArchitectFlowNotificationErrorDetail"
                    }
                }
            }
        },
        "ArchitectFlowNotificationFlowNotification": {
            "type": "object",
            "id": "urn:jsonschema:architect:flow:notification:v2:FlowNotification",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The flow ID"
                },
                "name": {
                    "type": "string",
                    "description": "The flow name"
                },
                "description": {
                    "type": "string",
                    "description": "The flow description"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "The flow deleted state"
                },
                "checkedInVersion": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowNotificationFlowVersion"
                },
                "savedVersion": {
                    "type": "object",
                    "description": "A bare-bones flow version object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ArchitectFlowNotificationFlowVersion"
                        }
                    ]
                },
                "publishedVersion": {
                    "type": "object",
                    "description": "A bare-bones flow version object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ArchitectFlowNotificationFlowVersion"
                        }
                    ]
                },
                "currentOperation": {
                    "type": "object",
                    "$ref": "#/definitions/ArchitectFlowNotificationArchitectOperation"
                }
            }
        },
        "GamificationScorecardChangeTopicMetric": {
            "type": "object",
            "id": "urn:jsonschema:gamification:scorecard:change:topic:v2:Metric",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "GamificationScorecardChangeTopicPunctualityEvent": {
            "type": "object",
            "id": "urn:jsonschema:gamification:scorecard:change:topic:v2:PunctualityEvent",
            "properties": {
                "dateStart": {
                    "type": "string"
                },
                "dateScheduleStart": {
                    "type": "string"
                },
                "activityCode": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                }
            }
        },
        "GamificationScorecardChangeTopicEvaluationDetail": {
            "type": "object",
            "id": "urn:jsonschema:gamification:scorecard:change:topic:v2:EvaluationDetail",
            "properties": {
                "evaluationId": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "string"
                },
                "conversationDate": {
                    "type": "string"
                },
                "formName": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "maxPoints": {
                    "type": "integer"
                },
                "evaluationScore": {
                    "type": "integer"
                },
                "evaluationScoreDouble": {
                    "type": "number"
                },
                "mediaTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "GamificationScorecardChangeTopicPerformanceMetric": {
            "type": "object",
            "id": "urn:jsonschema:gamification:scorecard:change:topic:v2:PerformanceMetric",
            "properties": {
                "metric": {
                    "type": "object",
                    "$ref": "#/definitions/GamificationScorecardChangeTopicMetric"
                },
                "points": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                },
                "punctualityEvents": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/GamificationScorecardChangeTopicPunctualityEvent"
                    }
                },
                "evaluationDetails": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/GamificationScorecardChangeTopicEvaluationDetail"
                    }
                }
            }
        },
        "GamificationScorecardChangeTopicScorecardChange": {
            "type": "object",
            "id": "urn:jsonschema:gamification:scorecard:change:topic:v2:ScorecardChange",
            "properties": {
                "workday": {
                    "type": "string"
                },
                "divisionId": {
                    "type": "string"
                },
                "teamId": {
                    "type": "string"
                },
                "performanceProfileId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "performanceMetrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/GamificationScorecardChangeTopicPerformanceMetric"
                    }
                }
            }
        },
        "GroupGreetingEventGreetingOwner": {
            "type": "object",
            "id": "urn:jsonschema:group:greeting:event:v2:GreetingOwner",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "GroupGreetingEventGreetingAudioFile": {
            "type": "object",
            "id": "urn:jsonschema:group:greeting:event:v2:GreetingAudioFile",
            "properties": {
                "durationMilliseconds": {
                    "type": "integer"
                },
                "sizeBytes": {
                    "type": "integer"
                }
            }
        },
        "GroupGreetingEventGreeting": {
            "type": "object",
            "id": "urn:jsonschema:group:greeting:event:v2:Greeting",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "ownerType": {
                    "type": "string"
                },
                "owner": {
                    "type": "object",
                    "$ref": "#/definitions/GroupGreetingEventGreetingOwner"
                },
                "greetingAudioFile": {
                    "type": "object",
                    "$ref": "#/definitions/GroupGreetingEventGreetingAudioFile"
                },
                "audioTTS": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationExternalContact": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:ExternalContact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationSession": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:Session",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationEventAction": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:EventAction",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationActionTarget": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:ActionTarget",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationActionMap": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:ActionMap",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationBrowser": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:Browser",
            "properties": {
                "family": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "viewHeight": {
                    "type": "integer"
                },
                "viewWidth": {
                    "type": "integer"
                },
                "featuresFlash": {
                    "type": "boolean"
                },
                "featuresJava": {
                    "type": "boolean"
                },
                "featuresPdf": {
                    "type": "boolean"
                },
                "featuresWebrtc": {
                    "type": "boolean"
                }
            }
        },
        "JourneyWebActionEventsNotificationDevice": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:Device",
            "properties": {
                "type": {
                    "type": "string"
                },
                "isMobile": {
                    "type": "boolean"
                },
                "screenHeight": {
                    "type": "integer"
                },
                "screenWidth": {
                    "type": "integer"
                },
                "screenDensity": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet",
                        "other"
                    ]
                },
                "manufacturer": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationGeoLocation": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:GeoLocation",
            "properties": {
                "country": {
                    "type": "string"
                },
                "countryName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "locality": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationMktCampaign": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:MktCampaign",
            "properties": {
                "content": {
                    "type": "string"
                },
                "medium": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "term": {
                    "type": "string"
                },
                "clickId": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationReferrer": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:Referrer",
            "properties": {
                "url": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "medium": {
                    "type": "string",
                    "enum": [
                        "internal",
                        "search",
                        "social",
                        "email",
                        "unknown",
                        "paid"
                    ]
                }
            }
        },
        "JourneyWebActionEventsNotificationWebActionMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:WebActionMessage",
            "properties": {
                "action": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationEventAction"
                },
                "actionTarget": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationActionTarget"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationActionMap"
                },
                "errorCode": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "userAgentString": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationBrowser"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationGeoLocation"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationMktCampaign"
                },
                "visitReferrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationReferrer"
                },
                "timeToDisposition": {
                    "type": "integer"
                }
            }
        },
        "JourneyWebActionEventsNotificationActionMapPageUrlCondition": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:ActionMapPageUrlCondition",
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "operator": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "equal",
                        "notEqual",
                        "like",
                        "notLike",
                        "greaterThan",
                        "greaterThanOrEqual",
                        "lessThan",
                        "lessThanOrEqual",
                        "startsWith",
                        "endsWith",
                        "containsAny",
                        "notContainsAny",
                        "containsAll",
                        "notContainsAl"
                    ]
                }
            }
        },
        "JourneyWebActionEventsNotificationScheduleGroup": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:ScheduleGroup",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationEmergencyGroup": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:EmergencyGroup",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebActionEventsNotificationBlockedWebActionOfferMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:BlockedWebActionOfferMessage",
            "properties": {
                "action": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationEventAction"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationActionMap"
                },
                "actionTarget": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationActionTarget"
                },
                "blockingReason": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "PageUrlConditionsNotMatching",
                        "ServiceLevelThrottling",
                        "AlreadyExistingOffer",
                        "TriggerDateInFuture",
                        "MultipleSimultaneousOffers",
                        "NoAvailableAgents",
                        "FrequencyCapping",
                        "OfferedOutsideSchedule"
                    ]
                },
                "blockingActionMap": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationActionMap"
                },
                "blockingAction": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationEventAction"
                },
                "blockingFrequencyCapBehaviour": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "CapOnceFinalized",
                        "CapOnceRejected",
                        "CapForPeriod"
                    ]
                },
                "blockingPageUrlConditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyWebActionEventsNotificationActionMapPageUrlCondition"
                    }
                },
                "blockingScheduleGroup": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationScheduleGroup"
                },
                "blockingEmergencyScheduleGroup": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationEmergencyGroup"
                }
            }
        },
        "JourneyWebActionEventsNotificationWebActionEventsNotification": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:action:events:notification:WebActionEventsNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "correlationId": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationExternalContact"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "customerId": {
                    "type": "string"
                },
                "customerIdType": {
                    "type": "string"
                },
                "session": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationSession"
                },
                "eventType": {
                    "type": "string",
                    "enum": [
                        "WebActionEvent",
                        "BlockedWebActionOfferEvent"
                    ]
                },
                "webActionEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationWebActionMessage"
                },
                "blockedWebActionOfferEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebActionEventsNotificationBlockedWebActionOfferMessage"
                }
            }
        },
        "JourneyAppEventsNotificationExternalContact": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:ExternalContact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationSession": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:Session",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationApp": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:App",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "buildNumber": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationDevice": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:Device",
            "properties": {
                "type": {
                    "type": "string"
                },
                "isMobile": {
                    "type": "boolean"
                },
                "screenHeight": {
                    "type": "integer"
                },
                "screenWidth": {
                    "type": "integer"
                },
                "screenDensity": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet",
                        "other"
                    ]
                },
                "manufacturer": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationGeoLocation": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:GeoLocation",
            "properties": {
                "country": {
                    "type": "string"
                },
                "countryName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "locality": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationSdkLibrary": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:SdkLibrary",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationNetworkConnectivity": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:NetworkConnectivity",
            "properties": {
                "carrier": {
                    "type": "string"
                },
                "bluetoothEnabled": {
                    "type": "boolean"
                },
                "cellularEnabled": {
                    "type": "boolean"
                },
                "wifiEnabled": {
                    "type": "boolean"
                }
            }
        },
        "JourneyAppEventsNotificationMktCampaign": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:MktCampaign",
            "properties": {
                "content": {
                    "type": "string"
                },
                "medium": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "term": {
                    "type": "string"
                },
                "clickId": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationCustomEventAttribute": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:CustomEventAttribute",
            "properties": {
                "value": {
                    "type": "string"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "STRING",
                        "BOOLEAN",
                        "NUMBER"
                    ]
                }
            }
        },
        "JourneyAppEventsNotificationAppMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:AppMessage",
            "properties": {
                "eventName": {
                    "type": "string"
                },
                "screenName": {
                    "type": "string"
                },
                "app": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationApp"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationDevice"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationGeoLocation"
                },
                "sdkLibrary": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationSdkLibrary"
                },
                "networkConnectivity": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationNetworkConnectivity"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationMktCampaign"
                },
                "searchQuery": {
                    "type": "string"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyAppEventsNotificationCustomEventAttribute"
                    }
                },
                "traits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyAppEventsNotificationCustomEventAttribute"
                    }
                }
            }
        },
        "JourneyAppEventsNotificationOutcome": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:Outcome",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationBrowser": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:Browser",
            "properties": {
                "family": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "viewHeight": {
                    "type": "integer"
                },
                "viewWidth": {
                    "type": "integer"
                },
                "featuresFlash": {
                    "type": "boolean"
                },
                "featuresJava": {
                    "type": "boolean"
                },
                "featuresPdf": {
                    "type": "boolean"
                },
                "featuresWebrtc": {
                    "type": "boolean"
                }
            }
        },
        "JourneyAppEventsNotificationReferrer": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:Referrer",
            "properties": {
                "url": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "medium": {
                    "type": "string",
                    "enum": [
                        "internal",
                        "search",
                        "social",
                        "email",
                        "unknown",
                        "paid"
                    ]
                }
            }
        },
        "JourneyAppEventsNotificationAssociatedValue": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:AssociatedValue",
            "properties": {
                "dataType": {
                    "type": "string",
                    "enum": [
                        "Number",
                        "Integer"
                    ]
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "JourneyAppEventsNotificationOutcomeAchievedMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:OutcomeAchievedMessage",
            "properties": {
                "outcome": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationOutcome"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationBrowser"
                },
                "visitCreatedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "userAgentString": {
                    "type": "string"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationGeoLocation"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationMktCampaign"
                },
                "visitReferrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationReferrer"
                },
                "associatedValue": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationAssociatedValue"
                }
            }
        },
        "JourneyAppEventsNotificationSegment": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:Segment",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyAppEventsNotificationSegmentAssignmentMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:SegmentAssignmentMessage",
            "properties": {
                "segment": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationSegment"
                }
            }
        },
        "JourneyAppEventsNotificationAppEventsNotification": {
            "type": "object",
            "id": "urn:jsonschema:journey:app:events:notification:AppEventsNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "correlationId": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationExternalContact"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "customerId": {
                    "type": "string"
                },
                "customerIdType": {
                    "type": "string"
                },
                "session": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationSession"
                },
                "eventType": {
                    "type": "string",
                    "enum": [
                        "AppEvent",
                        "OutcomeAchievedEvent",
                        "SegmentAssignmentEvent"
                    ]
                },
                "appEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationAppMessage"
                },
                "outcomeAchievedEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationOutcomeAchievedMessage"
                },
                "segmentAssignmentEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyAppEventsNotificationSegmentAssignmentMessage"
                }
            }
        },
        "JourneyOutcomeEventsNotificationExternalContact": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:ExternalContact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationSession": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:Session",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationOutcome": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:Outcome",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationBrowser": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:Browser",
            "properties": {
                "family": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "viewHeight": {
                    "type": "integer"
                },
                "viewWidth": {
                    "type": "integer"
                },
                "featuresFlash": {
                    "type": "boolean"
                },
                "featuresJava": {
                    "type": "boolean"
                },
                "featuresPdf": {
                    "type": "boolean"
                },
                "featuresWebrtc": {
                    "type": "boolean"
                }
            }
        },
        "JourneyOutcomeEventsNotificationDevice": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:Device",
            "properties": {
                "type": {
                    "type": "string"
                },
                "isMobile": {
                    "type": "boolean"
                },
                "screenHeight": {
                    "type": "integer"
                },
                "screenWidth": {
                    "type": "integer"
                },
                "screenDensity": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet",
                        "other"
                    ]
                },
                "manufacturer": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationGeoLocation": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:GeoLocation",
            "properties": {
                "country": {
                    "type": "string"
                },
                "countryName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "locality": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationMktCampaign": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:MktCampaign",
            "properties": {
                "content": {
                    "type": "string"
                },
                "medium": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "term": {
                    "type": "string"
                },
                "clickId": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationReferrer": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:Referrer",
            "properties": {
                "url": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "medium": {
                    "type": "string",
                    "enum": [
                        "internal",
                        "search",
                        "social",
                        "email",
                        "unknown",
                        "paid"
                    ]
                }
            }
        },
        "JourneyOutcomeEventsNotificationAssociatedValue": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:AssociatedValue",
            "properties": {
                "dataType": {
                    "type": "string",
                    "enum": [
                        "Number",
                        "Integer"
                    ]
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "JourneyOutcomeEventsNotificationOutcomeAchievedMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:OutcomeAchievedMessage",
            "properties": {
                "outcome": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationOutcome"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationBrowser"
                },
                "visitCreatedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "userAgentString": {
                    "type": "string"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationGeoLocation"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationMktCampaign"
                },
                "visitReferrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationReferrer"
                },
                "associatedValue": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationAssociatedValue"
                }
            }
        },
        "JourneyOutcomeEventsNotificationOutcomeTouchpointChannel": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:OutcomeTouchpointChannel",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "ContentOffer",
                        "Webchat"
                    ]
                }
            }
        },
        "JourneyOutcomeEventsNotificationActionMap": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:ActionMap",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyOutcomeEventsNotificationOutcomeTouchpoint": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:OutcomeTouchpoint",
            "properties": {
                "id": {
                    "type": "string"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyOutcomeEventsNotificationOutcomeTouchpointChannel"
                    }
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationActionMap"
                }
            }
        },
        "JourneyOutcomeEventsNotificationSegment": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:Segment",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "assignedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "JourneyOutcomeEventsNotificationOutcomeAttributionMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:OutcomeAttributionMessage",
            "properties": {
                "outcome": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationOutcome"
                },
                "outcomeTouchpoints": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyOutcomeEventsNotificationOutcomeTouchpoint"
                    }
                },
                "segmentAssignments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyOutcomeEventsNotificationSegment"
                    }
                },
                "associatedValue": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationAssociatedValue"
                }
            }
        },
        "JourneyOutcomeEventsNotificationOutcomeEventsNotification": {
            "type": "object",
            "id": "urn:jsonschema:journey:outcome:events:notification:OutcomeEventsNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "correlationId": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationExternalContact"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "customerId": {
                    "type": "string"
                },
                "customerIdType": {
                    "type": "string"
                },
                "session": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationSession"
                },
                "eventType": {
                    "type": "string",
                    "enum": [
                        "OutcomeAchievedEvent",
                        "OutcomeAttributionEvent"
                    ]
                },
                "outcomeAchievedEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationOutcomeAchievedMessage"
                },
                "outcomeAttributionEventMessage": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyOutcomeEventsNotificationOutcomeAttributionMessage"
                }
            }
        },
        "JourneyWebEventsNotificationExternalContact": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:ExternalContact",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationSession": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Session",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationBrowser": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Browser",
            "properties": {
                "family": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "viewHeight": {
                    "type": "integer"
                },
                "viewWidth": {
                    "type": "integer"
                },
                "featuresFlash": {
                    "type": "boolean"
                },
                "featuresJava": {
                    "type": "boolean"
                },
                "featuresPdf": {
                    "type": "boolean"
                },
                "featuresWebrtc": {
                    "type": "boolean"
                }
            }
        },
        "JourneyWebEventsNotificationDevice": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Device",
            "properties": {
                "type": {
                    "type": "string"
                },
                "isMobile": {
                    "type": "boolean"
                },
                "screenHeight": {
                    "type": "integer"
                },
                "screenWidth": {
                    "type": "integer"
                },
                "screenDensity": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet",
                        "other"
                    ]
                },
                "manufacturer": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationGeoLocation": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:GeoLocation",
            "properties": {
                "country": {
                    "type": "string"
                },
                "countryName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "locality": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationMktCampaign": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:MktCampaign",
            "properties": {
                "content": {
                    "type": "string"
                },
                "medium": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "term": {
                    "type": "string"
                },
                "clickId": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationPage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Page",
            "properties": {
                "url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "breadcrumb": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "JourneyWebEventsNotificationReferrer": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Referrer",
            "properties": {
                "url": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "queryString": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "medium": {
                    "type": "string",
                    "enum": [
                        "internal",
                        "search",
                        "social",
                        "email",
                        "unknown",
                        "paid"
                    ]
                }
            }
        },
        "JourneyWebEventsNotificationCustomEventAttribute": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:CustomEventAttribute",
            "properties": {
                "value": {
                    "type": "string"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "STRING",
                        "BOOLEAN",
                        "NUMBER"
                    ]
                }
            }
        },
        "JourneyWebEventsNotificationWebMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:WebMessage",
            "properties": {
                "eventName": {
                    "type": "string"
                },
                "totalEventCount": {
                    "type": "integer"
                },
                "totalPageviewCount": {
                    "type": "integer"
                },
                "userAgentString": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "searchQuery": {
                    "type": "string"
                },
                "authenticated": {
                    "type": "boolean"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationBrowser"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationGeoLocation"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationMktCampaign"
                },
                "page": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationPage"
                },
                "referrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationReferrer"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyWebEventsNotificationCustomEventAttribute"
                    }
                },
                "traits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/JourneyWebEventsNotificationCustomEventAttribute"
                    }
                }
            }
        },
        "JourneyWebEventsNotificationEventAction": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:EventAction",
            "properties": {
                "id": {
                    "type": "string"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "accepted",
                        "rejected",
                        "timedout",
                        "errored",
                        "ignored",
                        "qualified",
                        "offered",
                        "started",
                        "engaged",
                        "qualifiedOutsideSchedule",
                        "offeredOutsideSchedule",
                        "abandoned",
                        "completed",
                        "frequencyCapReached"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "webchat",
                        "webMessagingOffer",
                        "contentOffer",
                        "architectFlow"
                    ]
                },
                "prompt": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationActionTarget": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:ActionTarget",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationActionMap": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:ActionMap",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "JourneyWebEventsNotificationWebActionMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:WebActionMessage",
            "properties": {
                "action": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationEventAction"
                },
                "actionTarget": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationActionTarget"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationActionMap"
                },
                "errorCode": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "userAgentString": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationBrowser"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationGeoLocation"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationMktCampaign"
                },
                "visitReferrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationReferrer"
                },
                "timeToDisposition": {
                    "type": "integer"
                }
            }
        },
        "JourneyWebEventsNotificationOutcome": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Outcome",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationAssociatedValue": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:AssociatedValue",
            "properties": {
                "dataType": {
                    "type": "string",
                    "enum": [
                        "Number",
                        "Integer"
                    ]
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "JourneyWebEventsNotificationOutcomeAchievedMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:OutcomeAchievedMessage",
            "properties": {
                "outcome": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationOutcome"
                },
                "browser": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationBrowser"
                },
                "visitCreatedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipOrganization": {
                    "type": "string"
                },
                "userAgentString": {
                    "type": "string"
                },
                "device": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationDevice"
                },
                "geolocation": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationGeoLocation"
                },
                "mktCampaign": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationMktCampaign"
                },
                "visitReferrer": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationReferrer"
                },
                "associatedValue": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationAssociatedValue"
                }
            }
        },
        "JourneyWebEventsNotificationSegment": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:Segment",
            "properties": {
                "id": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "JourneyWebEventsNotificationSegmentAssignmentMessage": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:SegmentAssignmentMessage",
            "properties": {
                "segment": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationSegment"
                }
            }
        },
        "JourneyWebEventsNotificationWebEventsNotification": {
            "type": "object",
            "id": "urn:jsonschema:journey:web:events:notification:WebEventsNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "correlationId": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationExternalContact"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "customerId": {
                    "type": "string"
                },
                "customerIdType": {
                    "type": "string"
                },
                "session": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationSession"
                },
                "eventType": {
                    "type": "string",
                    "enum": [
                        "WebEvent",
                        "WebActionEvent",
                        "OutcomeAchievedEvent",
                        "SegmentAssignmentEvent"
                    ]
                },
                "webEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationWebMessage"
                },
                "webActionEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationWebActionMessage"
                },
                "outcomeAchievedEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationOutcomeAchievedMessage"
                },
                "segmentAssignmentEvent": {
                    "type": "object",
                    "$ref": "#/definitions/JourneyWebEventsNotificationSegmentAssignmentMessage"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayMetric": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayMetric",
            "properties": {
                "category": {
                    "type": "string",
                    "enum": [
                        "HistoricalQueueData",
                        "HistoricalAgentData",
                        "ForecastData",
                        "ScheduleData",
                        "PerformancePredictionAgentData",
                        "PerformancePredictionQueueData"
                    ]
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayForecastData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayForecastData",
            "properties": {
                "offered": {
                    "type": "number"
                },
                "averageTalkTimeSeconds": {
                    "type": "number"
                },
                "averageAfterCallWorkSeconds": {
                    "type": "number"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayScheduleData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayScheduleData",
            "properties": {
                "onQueueTimeSeconds": {
                    "type": "integer"
                },
                "scheduledTimeSeconds": {
                    "type": "integer"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayHistoricalAgentData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayHistoricalAgentData",
            "properties": {
                "onQueueTimeSeconds": {
                    "type": "number"
                },
                "interactingTimeSeconds": {
                    "type": "number"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayHistoricalQueueData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayHistoricalQueueData",
            "properties": {
                "offered": {
                    "type": "integer"
                },
                "completed": {
                    "type": "integer"
                },
                "answered": {
                    "type": "integer"
                },
                "abandoned": {
                    "type": "integer"
                },
                "averageTalkTimeSeconds": {
                    "type": "number"
                },
                "averageAfterCallWorkSeconds": {
                    "type": "number"
                },
                "serviceLevelPercent": {
                    "type": "number"
                },
                "averageSpeedOfAnswerSeconds": {
                    "type": "number"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayPerformancePredictionAgentData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayPerformancePredictionAgentData",
            "properties": {
                "interactingTimeSeconds": {
                    "type": "number"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayPerformancePredictionQueueData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayPerformancePredictionQueueData",
            "properties": {
                "serviceLevelPercent": {
                    "type": "number"
                },
                "averageSpeedOfAnswerSeconds": {
                    "type": "number"
                },
                "numberOfInteractions": {
                    "type": "number"
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayDataGroup": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayDataGroup",
            "properties": {
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "Voice",
                        "Chat",
                        "Email",
                        "Callback",
                        "Message"
                    ]
                },
                "forecastDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayForecastData"
                    }
                },
                "scheduleDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayScheduleData"
                    }
                },
                "historicalAgentDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayHistoricalAgentData"
                    }
                },
                "historicalQueueDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayHistoricalQueueData"
                    }
                },
                "performancePredictionAgentDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayPerformancePredictionAgentData"
                    }
                },
                "performancePredictionQueueDataPerInterval": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayPerformancePredictionQueueData"
                    }
                }
            }
        },
        "WfmIntradayDataUpdateTopicIntradayDataUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:intraday:data:update:topic:IntradayDataUpdate",
            "properties": {
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "intervalLengthMinutes": {
                    "type": "integer"
                },
                "numberOfIntervals": {
                    "type": "integer"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayMetric"
                    }
                },
                "queueIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "intradayDataGroupings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntradayDataUpdateTopicIntradayDataGroup"
                    }
                }
            }
        },
        "OperationalEventNotificationTopicEventEntity": {
            "type": "object",
            "id": "urn:jsonschema:operational:event:notification:topic:EventEntity",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "OperationalEventNotificationTopicOperationalEventNotification": {
            "type": "object",
            "id": "urn:jsonschema:operational:event:notification:topic:OperationalEventNotification",
            "properties": {
                "eventEntity": {
                    "type": "object",
                    "$ref": "#/definitions/OperationalEventNotificationTopicEventEntity"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "DialerAttemptLimitsConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:attempt:limits:config:change:v2:Object"
        },
        "DialerAttemptLimitsConfigChangeRecallEntry": {
            "type": "object",
            "id": "urn:jsonschema:dialer:attempt:limits:config:change:v2:RecallEntry",
            "properties": {
                "nbrAttempts": {
                    "type": "integer",
                    "description": "The number of recall attempts to make"
                },
                "minutesBetweenAttempts": {
                    "type": "integer",
                    "description": "How long to wait between recall attempts"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerAttemptLimitsConfigChangeObject"
                    }
                }
            }
        },
        "DialerAttemptLimitsConfigChangeAttemptLimits": {
            "type": "object",
            "id": "urn:jsonschema:dialer:attempt:limits:config:change:v2:AttemptLimits",
            "properties": {
                "maxAttemptsPerContact": {
                    "type": "integer"
                },
                "maxAttemptsPerNumber": {
                    "type": "integer"
                },
                "timeZoneId": {
                    "type": "string",
                    "description": "The timezone is necessary to define when \"today\" starts and ends"
                },
                "resetPeriod": {
                    "type": "string",
                    "description": "After how long the number of attempts will be set back to 0",
                    "enum": [
                        "NEVER",
                        "TODAY"
                    ]
                },
                "recallEntries": {
                    "type": "object",
                    "description": "Configuration for recall attempts",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerAttemptLimitsConfigChangeRecallEntry"
                    }
                },
                "breadthFirstRecalls": {
                    "type": "boolean",
                    "description": "Whether recalls are performed before considering other numbers (true) or after (false)"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerAttemptLimitsConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerCallabletimesetConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:callabletimeset:config:change:v2:Object"
        },
        "DialerCallabletimesetConfigChangeTimeSlot": {
            "type": "object",
            "id": "urn:jsonschema:dialer:callabletimeset:config:change:v2:TimeSlot",
            "properties": {
                "startTime": {
                    "type": "string",
                    "description": "The start time of this time slot"
                },
                "stopTime": {
                    "type": "string",
                    "description": "The stop time of this time slot"
                },
                "day": {
                    "type": "integer",
                    "description": "The day this time slot applies"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCallabletimesetConfigChangeObject"
                    }
                }
            }
        },
        "DialerCallabletimesetConfigChangeCallableTime": {
            "type": "object",
            "id": "urn:jsonschema:dialer:callabletimeset:config:change:v2:CallableTime",
            "properties": {
                "timeSlots": {
                    "type": "array",
                    "description": "The time slots",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCallabletimesetConfigChangeTimeSlot"
                    }
                },
                "timeZoneId": {
                    "type": "string",
                    "description": "The ISO ID for the timezone"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCallabletimesetConfigChangeObject"
                    }
                }
            }
        },
        "DialerCallabletimesetConfigChangeCallableTimeSet": {
            "type": "object",
            "id": "urn:jsonschema:dialer:callabletimeset:config:change:v2:CallableTimeSet",
            "properties": {
                "callableTimes": {
                    "type": "array",
                    "description": "The list of callable times",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCallabletimesetConfigChangeCallableTime"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCallabletimesetConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerCampaignRuleConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerCampaignRuleConfigChangeCampaignRuleEntities": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:CampaignRuleEntities",
            "properties": {
                "campaigns": {
                    "type": "array",
                    "description": "A list of campaignIds to act on",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeUriReference"
                    }
                },
                "sequences": {
                    "type": "array",
                    "description": "A list of sequenceIds to act on",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeUriReference"
                    }
                }
            }
        },
        "DialerCampaignRuleConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:Object"
        },
        "DialerCampaignRuleConfigChangeCampaignRuleCondition": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:CampaignRuleCondition",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the condition"
                },
                "parameters": {
                    "type": "object",
                    "description": "The parameters to match this condition",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "conditionType": {
                    "type": "string",
                    "description": "The type of this condition",
                    "enum": [
                        "campaignProgress",
                        "campaignAgents"
                    ]
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeObject"
                    }
                }
            }
        },
        "DialerCampaignRuleConfigChangeCampaignRuleActionEntities": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:CampaignRuleActionEntities",
            "description": "the campaign/sequence entities that this action acts on",
            "properties": {
                "useTriggeringEntity": {
                    "type": "boolean",
                    "description": "Whether this action should act on the entity that triggered it"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeObject"
                    }
                },
                "campaigns": {
                    "type": "array",
                    "description": "A list of campaignIds to act on",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeUriReference"
                    }
                },
                "sequences": {
                    "type": "array",
                    "description": "A list of sequenceIds to act on",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeUriReference"
                    }
                }
            }
        },
        "DialerCampaignRuleConfigChangeCampaignRuleAction": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:CampaignRuleAction",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the action"
                },
                "parameters": {
                    "type": "object",
                    "description": "The parameters to match this action",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "actionType": {
                    "type": "string",
                    "description": "The type of this action",
                    "enum": [
                        "turnOnCampaign",
                        "turnOffCampaign",
                        "turnOnSequence",
                        "turnOffSequence",
                        "setCampaignPriority",
                        "recycleCampaign"
                    ]
                },
                "campaignRuleActionEntities": {
                    "type": "object",
                    "$ref": "#/definitions/DialerCampaignRuleConfigChangeCampaignRuleActionEntities"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeObject"
                    }
                }
            }
        },
        "DialerCampaignRuleConfigChangeCampaignRule": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:rule:config:change:v2:CampaignRule",
            "properties": {
                "campaignRuleEntities": {
                    "type": "object",
                    "$ref": "#/definitions/DialerCampaignRuleConfigChangeCampaignRuleEntities"
                },
                "campaignRuleConditions": {
                    "type": "array",
                    "description": "The list of conditions that will trigger this Campaign Rule",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeCampaignRuleCondition"
                    }
                },
                "campaignRuleActions": {
                    "type": "array",
                    "description": "The list of actions that will be taken when this Campaign Rule's conditions are met",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeCampaignRuleAction"
                    }
                },
                "matchAnyConditions": {
                    "type": "boolean",
                    "description": "Whether this Campaign Rule should match any conditions (inclusive OR) or match all conditions (ALL)"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this campaign rule is enabled"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignRuleConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerCampaignConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerCampaignConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:config:change:v2:Object"
        },
        "DialerCampaignConfigChangePhoneColumn": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:config:change:v2:PhoneColumn",
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "The name of the phone column"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the phone column, for example, 'cell' or 'home'"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeObject"
                    }
                }
            }
        },
        "DialerCampaignConfigChangeRestErrorDetail": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:config:change:v2:RestErrorDetail",
            "properties": {
                "error": {
                    "type": "string",
                    "description": "name of the error"
                },
                "details": {
                    "type": "string",
                    "description": "additional information regarding the error"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeObject"
                    }
                }
            }
        },
        "DialerCampaignConfigChangeContactSort": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:config:change:v2:ContactSort",
            "description": "information determining the order in which the contacts will be dialed",
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "ASC",
                        "DESC"
                    ]
                },
                "numeric": {
                    "type": "boolean",
                    "description": "Whether that column contains numeric data"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeObject"
                    }
                }
            }
        },
        "DialerCampaignConfigChangeCampaign": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:config:change:v2:Campaign",
            "properties": {
                "contactList": {
                    "type": "object",
                    "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                },
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "dialingMode": {
                    "type": "string",
                    "description": "dialing mode of the campaign",
                    "enum": [
                        "agentless",
                        "external",
                        "preview",
                        "power",
                        "predictive",
                        "progressive"
                    ]
                },
                "script": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "edgeGroup": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "site": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "campaignStatus": {
                    "type": "string",
                    "enum": [
                        "on",
                        "off",
                        "complete",
                        "stopping",
                        "invalid"
                    ]
                },
                "phoneColumns": {
                    "type": "array",
                    "description": "the contact list phone columns to be called for the campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangePhoneColumn"
                    }
                },
                "abandonRate": {
                    "type": "number",
                    "description": "the targeted abandon rate percentage"
                },
                "dncLists": {
                    "type": "array",
                    "description": "identifiers of the do not call lists",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                    }
                },
                "callableTimeSet": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "callAnalysisResponseSet": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "callerName": {
                    "type": "string",
                    "description": "caller id name to be displayed on the outbound call"
                },
                "callerAddress": {
                    "type": "string",
                    "description": "caller id phone number to be displayed on the outbound call"
                },
                "outboundLineCount": {
                    "type": "integer",
                    "description": "for agentless campaigns, the number of outbound lines to be concurrently dialed"
                },
                "errors": {
                    "type": "array",
                    "description": "a list of current error conditions associated with the campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeRestErrorDetail"
                    }
                },
                "ruleSets": {
                    "type": "array",
                    "description": "identifiers of the rule sets",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                    }
                },
                "skipPreviewDisabled": {
                    "type": "boolean",
                    "description": "for preview campaigns, indicator of whether the agent can skip a preview without placing a call"
                },
                "previewTimeOutSeconds": {
                    "type": "integer",
                    "description": "for preview campaigns, number of seconds before a call will be automatically placed. A value of 0 indicates no automatic placement of calls"
                },
                "singleNumberPreview": {
                    "type": "boolean",
                    "description": "for preview campaigns with multiple phone columns, indicator if one (true) or multiple (false) phone numbers will be available to call for each preview"
                },
                "contactSort": {
                    "type": "object",
                    "$ref": "#/definitions/DialerCampaignConfigChangeContactSort"
                },
                "contactSorts": {
                    "type": "array",
                    "description": "List of contact sort objects.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeContactSort"
                    }
                },
                "noAnswerTimeout": {
                    "type": "integer",
                    "description": "for non-preview campaigns, how long to wait before dispositioning as 'no-answer', default 30 seconds"
                },
                "callAnalysisLanguage": {
                    "type": "string",
                    "description": "The language the edge will use to analyze the call"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of this campaign relative to other campaigns"
                },
                "contactListFilters": {
                    "type": "array",
                    "description": "List of contact filters",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                    }
                },
                "division": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "agentOwnedColumn": {
                    "type": "string",
                    "description": "For Preview Campaigns. Name of the contact column in the contact list containing the userIds of agents to assign specific contact records to."
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerCampaignProgressEventUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:progress:event:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerCampaignProgressEventObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:progress:event:v2:Object"
        },
        "DialerCampaignProgressEventCampaignProgress": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:progress:event:v2:CampaignProgress",
            "properties": {
                "campaign": {
                    "type": "object",
                    "$ref": "#/definitions/DialerCampaignProgressEventUriReference"
                },
                "numberOfContactsCalled": {
                    "type": "number",
                    "description": "The number of contacts that have been called so far"
                },
                "numberOfContactsMessaged": {
                    "type": "number",
                    "description": "The number of contacts that have been messaged so far"
                },
                "totalNumberOfContacts": {
                    "type": "number",
                    "description": "The total number of contacts in the contact list"
                },
                "percentage": {
                    "type": "integer",
                    "description": "numberOfContactsContacted/totalNumberOfContacts*100"
                },
                "numberOfContactsSkipped": {
                    "type": "object",
                    "description": "A map of skipped reasons and the number of contacts associated with each.",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignProgressEventObject"
                    }
                }
            }
        },
        "StatEventCampaignTopicMetricStats": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:campaign:topic:v2:MetricStats",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "StatEventCampaignTopicIntervalMetrics": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:campaign:topic:v2:IntervalMetrics",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventCampaignTopicMetricStats"
                    }
                }
            }
        },
        "StatEventCampaignTopicStatsNotification": {
            "type": "object",
            "id": "urn:jsonschema:stat:event:campaign:topic:v2:StatsNotification",
            "properties": {
                "group": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/StatEventCampaignTopicIntervalMetrics"
                    }
                }
            }
        },
        "DialerContactlistfilterConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlistfilter:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerContactlistfilterConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlistfilter:config:change:v2:Object"
        },
        "DialerContactlistfilterConfigChangeRange": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlistfilter:config:change:v2:Range",
            "description": "FilterRange is one of the attributes of a FilterPredicate",
            "properties": {
                "min": {
                    "type": "string",
                    "description": "Minimum end of the range"
                },
                "max": {
                    "type": "string",
                    "description": "Maximum end of the range"
                },
                "minInclusive": {
                    "type": "boolean",
                    "description": "Whether or not to include the minimum in the range"
                },
                "maxInclusive": {
                    "type": "boolean",
                    "description": "Whether or not to include the maximum in the range"
                },
                "inSet": {
                    "type": "array",
                    "description": "Elements that apply to the IN operator",
                    "items": {
                        "type": "string"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistfilterConfigChangeObject"
                    }
                }
            }
        },
        "DialerContactlistfilterConfigChangeFilterPredicate": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlistfilter:config:change:v2:FilterPredicate",
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The contact list column"
                },
                "columnType": {
                    "type": "string",
                    "description": "Whether a contact column is numeric or alphabetic",
                    "enum": [
                        "numeric",
                        "alphabetic"
                    ]
                },
                "operator": {
                    "type": "string",
                    "description": "The comparison operator",
                    "enum": [
                        "EQUALS",
                        "LESS_THAN",
                        "LESS_THAN_EQUALS",
                        "GREATER_THAN",
                        "GREATER_THAN_EQUALS",
                        "CONTAINS",
                        "BEGINS_WITH",
                        "ENDS_WITH",
                        "BEFORE",
                        "AFTER",
                        "BETWEEN",
                        "IN"
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "The value the predicate applies to"
                },
                "range": {
                    "type": "object",
                    "$ref": "#/definitions/DialerContactlistfilterConfigChangeRange"
                },
                "inverted": {
                    "type": "boolean",
                    "description": "Whether or not to invert to result of evaluating the predicate"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistfilterConfigChangeObject"
                    }
                }
            }
        },
        "DialerContactlistfilterConfigChangeFilterClause": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlistfilter:config:change:v2:FilterClause",
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Contact list filter type",
                    "enum": [
                        "AND",
                        "OR"
                    ]
                },
                "predicates": {
                    "type": "array",
                    "description": "The list of predicates in that clause",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistfilterConfigChangeFilterPredicate"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistfilterConfigChangeObject"
                    }
                }
            }
        },
        "DialerContactlistfilterConfigChangeContactListFilter": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlistfilter:config:change:v2:ContactListFilter",
            "properties": {
                "contactList": {
                    "type": "object",
                    "$ref": "#/definitions/DialerContactlistfilterConfigChangeUriReference"
                },
                "contactListColumns": {
                    "type": "array",
                    "description": "The list of contact list columns",
                    "items": {
                        "type": "string"
                    }
                },
                "clauses": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistfilterConfigChangeFilterClause"
                    }
                },
                "filterType": {
                    "type": "string",
                    "description": "Contact list filter type",
                    "enum": [
                        "AND",
                        "OR"
                    ]
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistfilterConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerContactlistConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlist:config:change:v2:Object"
        },
        "DialerContactlistConfigChangeContactPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlist:config:change:v2:ContactPhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "name of the phone column"
                },
                "type": {
                    "type": "string",
                    "description": "type of the phone column, for example, 'cell' or 'home'"
                },
                "callableTimeColumn": {
                    "type": "string",
                    "description": "name of the column indicating the timezone to be considered for determining callable times"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistConfigChangeObject"
                    }
                }
            }
        },
        "DialerContactlistConfigChangeEmailColumn": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlist:config:change:v2:EmailColumn",
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "The name of the email address column"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the email address column, for example, 'work' or 'home'"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistConfigChangeObject"
                    }
                }
            }
        },
        "DialerContactlistConfigChangeImportStatus": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlist:config:change:v2:ImportStatus",
            "properties": {
                "importState": {
                    "type": "string",
                    "description": "current status of the import",
                    "enum": [
                        "IN_PROGRESS",
                        "FAILED"
                    ]
                },
                "totalRecords": {
                    "type": "integer",
                    "description": "total number of records to be imported"
                },
                "completedRecords": {
                    "type": "integer",
                    "description": "number of records finished importing"
                },
                "percentageComplete": {
                    "type": "integer",
                    "description": "percentage of records finished importing"
                },
                "failureReason": {
                    "type": "string",
                    "description": "if the import has failed, the reason for the failure"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistConfigChangeObject"
                    }
                }
            }
        },
        "DialerContactlistConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlist:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerContactlistConfigChangeContactList": {
            "type": "object",
            "id": "urn:jsonschema:dialer:contactlist:config:change:v2:ContactList",
            "properties": {
                "columnNames": {
                    "type": "array",
                    "description": "the contact column names",
                    "items": {
                        "type": "string"
                    }
                },
                "phoneColumns": {
                    "type": "array",
                    "description": "the columns containing phone numbers",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistConfigChangeContactPhoneNumberColumn"
                    }
                },
                "emailColumns": {
                    "type": "array",
                    "description": "the columns containing email addresses",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistConfigChangeEmailColumn"
                    }
                },
                "importStatus": {
                    "type": "object",
                    "$ref": "#/definitions/DialerContactlistConfigChangeImportStatus"
                },
                "previewModeColumnName": {
                    "type": "string",
                    "description": "the name of the column that holds the indicators for contacts that are to be dialed in preview mode only"
                },
                "previewModeAcceptedValues": {
                    "type": "array",
                    "description": "list of user-defined values indicating the contact is to be dialed in preview mode only",
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "the number of contacts in the contact list"
                },
                "attemptLimits": {
                    "type": "object",
                    "$ref": "#/definitions/DialerContactlistConfigChangeUriReference"
                },
                "automaticTimeZoneMapping": {
                    "type": "boolean",
                    "description": "whether or not automatic time zone mapping is enabled on the list"
                },
                "zipCodeColumnName": {
                    "type": "string",
                    "description": "zip code column from the contact list to be used optionally with automatic time zone mapping"
                },
                "division": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerContactlistConfigChangeUriReference"
                        }
                    ]
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerContactlistConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "ContactlistImportStatusObject": {
            "type": "object",
            "id": "urn:jsonschema:contactlist:import:status:v2:Object"
        },
        "ContactlistImportStatusImportStatus": {
            "type": "object",
            "id": "urn:jsonschema:contactlist:import:status:v2:ImportStatus",
            "properties": {
                "importState": {
                    "type": "string",
                    "description": "current status of the import",
                    "enum": [
                        "IN_PROGRESS",
                        "FAILED"
                    ]
                },
                "totalRecords": {
                    "type": "integer",
                    "description": "total number of records to be imported"
                },
                "completedRecords": {
                    "type": "integer",
                    "description": "number of records finished importing"
                },
                "percentageComplete": {
                    "type": "integer",
                    "description": "percentage of records finished importing"
                },
                "failureReason": {
                    "type": "string",
                    "description": "if the import has failed, the reason for the failure"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/ContactlistImportStatusObject"
                    }
                }
            }
        },
        "DialerDnclistConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:dnclist:config:change:v2:Object"
        },
        "DialerDnclistConfigChangeImportStatus": {
            "type": "object",
            "id": "urn:jsonschema:dialer:dnclist:config:change:v2:ImportStatus",
            "properties": {
                "importState": {
                    "type": "string",
                    "description": "current status of the import",
                    "enum": [
                        "IN_PROGRESS",
                        "FAILED"
                    ]
                },
                "totalRecords": {
                    "type": "integer",
                    "description": "total number of records to be imported"
                },
                "completedRecords": {
                    "type": "integer",
                    "description": "number of records finished importing"
                },
                "percentageComplete": {
                    "type": "integer",
                    "description": "percentage of records finished importing"
                },
                "failureReason": {
                    "type": "string",
                    "description": "if the import has failed, the reason for the failure"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerDnclistConfigChangeObject"
                    }
                }
            }
        },
        "DialerDnclistConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:dnclist:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerDnclistConfigChangeDncList": {
            "type": "object",
            "id": "urn:jsonschema:dialer:dnclist:config:change:v2:DncList",
            "properties": {
                "importStatus": {
                    "type": "object",
                    "$ref": "#/definitions/DialerDnclistConfigChangeImportStatus"
                },
                "size": {
                    "type": "integer",
                    "description": "the number of phone numbers in the do not call list"
                },
                "dncSourceType": {
                    "type": "string",
                    "description": "the type of dnc list being created, rds (csv file), gryphon, or dnc.com",
                    "enum": [
                        "rds",
                        "dnc.com",
                        "gryphon"
                    ]
                },
                "loginId": {
                    "type": "string",
                    "description": "the loginId if the dncSourceType is dnc.com"
                },
                "dncCodes": {
                    "type": "array",
                    "description": "the list of dnc.com codes to be treated as DNC",
                    "items": {
                        "type": "string"
                    }
                },
                "licenseId": {
                    "type": "string",
                    "description": "the license number if the dncSourceType is gryphon"
                },
                "contactMethod": {
                    "type": "string",
                    "enum": [
                        "EMAIL",
                        "PHONE"
                    ]
                },
                "division": {
                    "type": "object",
                    "$ref": "#/definitions/DialerDnclistConfigChangeUriReference"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerDnclistConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DnclistImportStatusObject": {
            "type": "object",
            "id": "urn:jsonschema:dnclist:import:status:v2:Object"
        },
        "DnclistImportStatusImportStatus": {
            "type": "object",
            "id": "urn:jsonschema:dnclist:import:status:v2:ImportStatus",
            "properties": {
                "importState": {
                    "type": "string",
                    "description": "current status of the import",
                    "enum": [
                        "IN_PROGRESS",
                        "FAILED"
                    ]
                },
                "totalRecords": {
                    "type": "integer",
                    "description": "total number of records to be imported"
                },
                "completedRecords": {
                    "type": "integer",
                    "description": "number of records finished importing"
                },
                "percentageComplete": {
                    "type": "integer",
                    "description": "percentage of records finished importing"
                },
                "failureReason": {
                    "type": "string",
                    "description": "if the import has failed, the reason for the failure"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DnclistImportStatusObject"
                    }
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:Object"
        },
        "OutboundMessagingMessagingCampaignConfigChangeContactSort": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:ContactSort",
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "ASC",
                        "DESC"
                    ]
                },
                "numeric": {
                    "type": "boolean",
                    "description": "Whether that column contains numeric data"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeObject"
                    }
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeSmsPhoneNumberRef": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:SmsPhoneNumberRef",
            "description": "A reference for an SmsPhoneNumber",
            "properties": {
                "phoneNumber": {
                    "type": "string",
                    "description": "The unique phone number"
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeResponseRef": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:ResponseRef",
            "description": "A reference for a Response",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique response id"
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeSmsConfig": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:SmsConfig",
            "description": "An outbound-messaging messaging campaign SMS Config",
            "properties": {
                "messageColumn": {
                    "type": "string",
                    "description": "The Contact List column specifying the message to send to the contact."
                },
                "phoneColumn": {
                    "type": "string",
                    "description": "The Contact List column specifying the phone number to send a message to."
                },
                "senderSmsPhoneNumber": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeSmsPhoneNumberRef"
                },
                "contentTemplate": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeResponseRef"
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeFromEmailAddress": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:FromEmailAddress",
            "description": "An outbound-messaging messaging campaign email address",
            "properties": {
                "friendlyName": {
                    "type": "string",
                    "description": "The friendly name of the email address."
                },
                "localPart": {
                    "type": "string",
                    "description": "The local part of the email address."
                },
                "domain": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                        }
                    ]
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeReplyToEmailAddress": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:ReplyToEmailAddress",
            "description": "An outbound-messaging messaging campaign email address",
            "properties": {
                "domain": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "route": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                        }
                    ]
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeEmailConfig": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:EmailConfig",
            "description": "An outbound-messaging messaging campaign email Config",
            "properties": {
                "emailColumns": {
                    "type": "array",
                    "description": "The Contact List column specifying the email to send to the contact.",
                    "items": {
                        "type": "string"
                    }
                },
                "contentTemplate": {
                    "type": "object",
                    "description": "A reference for a Response",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeResponseRef"
                        }
                    ]
                },
                "fromAddress": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeFromEmailAddress"
                },
                "replyToAddress": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeReplyToEmailAddress"
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeErrorDetail": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:ErrorDetail",
            "properties": {
                "error": {
                    "type": "string",
                    "description": "The name of the error code."
                },
                "details": {
                    "type": "string",
                    "description": "The additional information regarding the error message."
                }
            }
        },
        "OutboundMessagingMessagingCampaignConfigChangeMessagingCampaign": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:config:change:v2:MessagingCampaign",
            "properties": {
                "campaignStatus": {
                    "type": "string",
                    "enum": [
                        "on",
                        "off",
                        "complete",
                        "stopping",
                        "invalid"
                    ]
                },
                "callableTimeSet": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                },
                "contactList": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                        }
                    ]
                },
                "dncLists": {
                    "type": "array",
                    "description": "The dnc lists to check before sending a message for this messaging campaign.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                    }
                },
                "contactListFilters": {
                    "type": "array",
                    "description": "The contact list filters to check before sending a message for this messaging campaign.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                    }
                },
                "alwaysRunning": {
                    "type": "boolean",
                    "description": "Whether this messaging campaign is always running."
                },
                "contactSorts": {
                    "type": "array",
                    "description": "The order in which to sort contacts for dialing, based on up to four columns.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeContactSort"
                    }
                },
                "messagesPerMinute": {
                    "type": "integer",
                    "description": "How many messages this messaging campaign will send per minute."
                },
                "ruleSets": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                    }
                },
                "smsConfig": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeSmsConfig"
                },
                "emailConfig": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeEmailConfig"
                },
                "errors": {
                    "type": "array",
                    "description": "A list of current error conditions associated with this messaging campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeErrorDetail"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                },
                "division": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OutboundMessagingMessagingCampaignConfigChangeUriReference"
                        }
                    ]
                }
            }
        },
        "OutboundMessagingMessagingCampaignProgressEventUriReference": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:progress:event:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "OutboundMessagingMessagingCampaignProgressEventObject": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:progress:event:v2:Object"
        },
        "OutboundMessagingMessagingCampaignProgressEventCampaignProgress": {
            "type": "object",
            "id": "urn:jsonschema:outbound:messaging:messaging:campaign:progress:event:v2:CampaignProgress",
            "properties": {
                "campaign": {
                    "type": "object",
                    "$ref": "#/definitions/OutboundMessagingMessagingCampaignProgressEventUriReference"
                },
                "numberOfContactsCalled": {
                    "type": "number",
                    "description": "The number of contacts that have been called so far"
                },
                "numberOfContactsMessaged": {
                    "type": "number",
                    "description": "The number of contacts that have been messaged so far"
                },
                "totalNumberOfContacts": {
                    "type": "number",
                    "description": "The total number of contacts in the contact list"
                },
                "percentage": {
                    "type": "integer",
                    "description": "numberOfContactsContacted/totalNumberOfContacts*100"
                },
                "numberOfContactsSkipped": {
                    "type": "object",
                    "description": "A map of skipped reasons and the number of contacts associated with each.",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/OutboundMessagingMessagingCampaignProgressEventObject"
                    }
                }
            }
        },
        "DialerResponsesetConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:responseset:config:change:v2:Object"
        },
        "DialerResponsesetConfigChangeReaction": {
            "type": "object",
            "id": "urn:jsonschema:dialer:responseset:config:change:v2:Reaction",
            "properties": {
                "data": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reactionType": {
                    "type": "string",
                    "enum": [
                        "hangup",
                        "transfer",
                        "transfer_flow",
                        "play_file"
                    ]
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerResponsesetConfigChangeObject"
                    }
                }
            }
        },
        "DialerResponsesetConfigChangeResponseSet": {
            "type": "object",
            "id": "urn:jsonschema:dialer:responseset:config:change:v2:ResponseSet",
            "properties": {
                "responses": {
                    "type": "object",
                    "description": "Map of disposition identifiers to reactions. For example: {\"disposition.classification.callable.person\": {\"reactionType\": \"transfer\"}}",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerResponsesetConfigChangeReaction"
                    }
                },
                "beepDetectionEnabled": {
                    "type": "boolean",
                    "description": "When beep detection is enabled, answering machine detection will wait for the beep before transferring the call"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerResponsesetConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerRulesetConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerRulesetConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:Object"
        },
        "DialerRulesetConfigChangeContactColumnToDataActionFieldMapping": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:ContactColumnToDataActionFieldMapping",
            "properties": {
                "contactColumnName": {
                    "type": "string",
                    "description": "The name of a contact column whose data will be passed to the data action"
                },
                "dataActionField": {
                    "type": "string",
                    "description": "The name of an output field from the data action that the contact column data will be passed to"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeObject"
                    }
                }
            }
        },
        "DialerRulesetConfigChangeDataActionConditionPredicate": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:DataActionConditionPredicate",
            "properties": {
                "outputField": {
                    "type": "string",
                    "description": "The name of an output field from the data action's output to use for this condition"
                },
                "outputOperator": {
                    "type": "string",
                    "description": "The operation with which to evaluate this condition",
                    "enum": [
                        "EQUALS",
                        "LESS_THAN",
                        "LESS_THAN_EQUALS",
                        "GREATER_THAN",
                        "GREATER_THAN_EQUALS",
                        "CONTAINS",
                        "BEGINS_WITH",
                        "ENDS_WITH",
                        "BEFORE",
                        "AFTER"
                    ]
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The value to compare against for this condition"
                },
                "outputFieldMissingResolution": {
                    "type": "boolean",
                    "description": "The result of this predicate if the requested output field is missing from the data action's result"
                },
                "inverted": {
                    "type": "boolean",
                    "description": "If true, inverts the result of evaluating this Predicate. Default is false."
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeObject"
                    }
                }
            }
        },
        "DialerRulesetConfigChangeCondition": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:Condition",
            "properties": {
                "dataAction": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerRulesetConfigChangeUriReference"
                        }
                    ]
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeObject"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the condition"
                },
                "inverted": {
                    "type": "boolean",
                    "description": "Indicates whether to evaluate for the opposite of the stated condition; default is false"
                },
                "attributeName": {
                    "type": "string",
                    "description": "An attribute name associated with the condition (applies only to certain rule conditions)"
                },
                "value": {
                    "type": "string",
                    "description": "A value associated with the condition"
                },
                "valueType": {
                    "type": "string",
                    "description": "Determines the type of the value associated with the condition",
                    "enum": [
                        "STRING",
                        "NUMERIC",
                        "DATETIME",
                        "PERIOD"
                    ]
                },
                "operator": {
                    "type": "string",
                    "description": "An operation type for condition evaluation",
                    "enum": [
                        "EQUALS",
                        "LESS_THAN",
                        "LESS_THAN_EQUALS",
                        "GREATER_THAN",
                        "GREATER_THAN_EQUALS",
                        "CONTAINS",
                        "BEGINS_WITH",
                        "ENDS_WITH",
                        "BEFORE",
                        "AFTER"
                    ]
                },
                "codes": {
                    "type": "array",
                    "description": "List of wrap-up code identifiers (used only in conditions of type 'wrapupCondition')",
                    "items": {
                        "type": "string"
                    }
                },
                "propertyType": {
                    "type": "string",
                    "description": "Determines the type of the property associated with the condition",
                    "enum": [
                        "LAST_ATTEMPT_BY_COLUMN",
                        "LAST_ATTEMPT_OVERALL",
                        "LAST_RESULT_BY_COLUMN",
                        "LAST_RESULT_OVERALL"
                    ]
                },
                "property": {
                    "type": "string",
                    "description": "A value associated with the property type of this condition"
                },
                "dataNotFoundResolution": {
                    "type": "boolean",
                    "description": "The result of this condition if the data action returns a result indicating there was no data. Required for a DataActionCondition."
                },
                "contactIdField": {
                    "type": "string",
                    "description": "The input field from the data action that the contactId will be passed to for this condition. Valid for a dataActionCondition."
                },
                "callAnalysisResultField": {
                    "type": "string",
                    "description": "The input field from the data action that the callAnalysisResult will be passed to for this condition. Valid for a wrapup dataActionCondition."
                },
                "agentWrapupField": {
                    "type": "string",
                    "description": "The input field from the data action that the agentWrapup will be passed to for this condition. Valid for a wrapup dataActionCondition."
                },
                "contactColumnToDataActionFieldMappings": {
                    "type": "array",
                    "description": "A list of mappings defining which contact data fields will be passed to which data action input fields for this condition. Valid for a dataActionCondition.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeContactColumnToDataActionFieldMapping"
                    }
                },
                "predicates": {
                    "type": "array",
                    "description": "A list of predicates defining the comparisons to use for this condition. Required for a dataActionCondition.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeDataActionConditionPredicate"
                    }
                }
            }
        },
        "DialerRulesetConfigChangeAction": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:Action",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the action"
                },
                "actionTypeName": {
                    "type": "string",
                    "description": "Identifier of the action"
                },
                "updateOption": {
                    "type": "string",
                    "description": "Indicator of the type of update action (applicable only to certain types of actions)"
                },
                "properties": {
                    "type": "object",
                    "description": "Map of key-value pairs pertinent to the action (different actions require different properties)",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeObject"
                    }
                }
            }
        },
        "DialerRulesetConfigChangeRule": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:Rule",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": "The list of rule conditions; all must evaluate to true to trigger the rule actions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeCondition"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The identifier of the rule"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule"
                },
                "order": {
                    "type": "integer",
                    "description": "The ranked order of the rule; rules are processed from lowest number to highest"
                },
                "category": {
                    "type": "string",
                    "description": "The category of the rule",
                    "enum": [
                        "DIALER_PRECALL",
                        "DIALER_WRAPUP"
                    ]
                },
                "actions": {
                    "type": "array",
                    "description": "The list of rule actions to be taken if the conditions are true",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeAction"
                    }
                }
            }
        },
        "DialerRulesetConfigChangeRuleSet": {
            "type": "object",
            "id": "urn:jsonschema:dialer:ruleset:config:change:v2:RuleSet",
            "properties": {
                "contactList": {
                    "type": "object",
                    "$ref": "#/definitions/DialerRulesetConfigChangeUriReference"
                },
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DialerRulesetConfigChangeUriReference"
                        }
                    ]
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeRule"
                    }
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerRulesetConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerCampaignScheduleConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:schedule:config:change:v2:Object"
        },
        "DialerCampaignScheduleConfigChangeScheduleInterval": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:schedule:config:change:v2:ScheduleInterval",
            "properties": {
                "start": {
                    "type": "string",
                    "description": "scheduled start time represented as an ISO-8601 string; for example, yyyy-MM-ddTHH:mm:ss.SSSZ"
                },
                "end": {
                    "type": "string",
                    "description": "scheduled end time represented as an ISO-8601 string; for example, yyyy-MM-ddTHH:mm:ss.SSSZ"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignScheduleConfigChangeObject"
                    }
                }
            }
        },
        "DialerCampaignScheduleConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:schedule:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerCampaignScheduleConfigChangeCampaignSchedule": {
            "type": "object",
            "id": "urn:jsonschema:dialer:campaign:schedule:config:change:v2:CampaignSchedule",
            "properties": {
                "intervals": {
                    "type": "array",
                    "description": "a list of start and end times",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignScheduleConfigChangeScheduleInterval"
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "time zone identifier to be applied to the intervals; for example Africa/Abidjan"
                },
                "campaign": {
                    "type": "object",
                    "$ref": "#/definitions/DialerCampaignScheduleConfigChangeUriReference"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerCampaignScheduleConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerSequenceScheduleConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:schedule:config:change:v2:Object"
        },
        "DialerSequenceScheduleConfigChangeScheduleInterval": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:schedule:config:change:v2:ScheduleInterval",
            "properties": {
                "start": {
                    "type": "string",
                    "description": "scheduled start time represented as an ISO-8601 string; for example, yyyy-MM-ddTHH:mm:ss.SSSZ"
                },
                "end": {
                    "type": "string",
                    "description": "scheduled end time represented as an ISO-8601 string; for example, yyyy-MM-ddTHH:mm:ss.SSSZ"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerSequenceScheduleConfigChangeObject"
                    }
                }
            }
        },
        "DialerSequenceScheduleConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:schedule:config:change:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerSequenceScheduleConfigChangeSequenceSchedule": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:schedule:config:change:v2:SequenceSchedule",
            "properties": {
                "intervals": {
                    "type": "array",
                    "description": "a list of start and end times",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerSequenceScheduleConfigChangeScheduleInterval"
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "time zone identifier to be applied to the intervals; for example Africa/Abidjan"
                },
                "sequence": {
                    "type": "object",
                    "$ref": "#/definitions/DialerSequenceScheduleConfigChangeUriReference"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerSequenceScheduleConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerSequenceConfigChangeUriReference": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:config:change:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "DialerSequenceConfigChangeObject": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:config:change:v2:Object"
        },
        "DialerSequenceConfigChangeCampaignSequence": {
            "type": "object",
            "id": "urn:jsonschema:dialer:sequence:config:change:v2:CampaignSequence",
            "properties": {
                "campaigns": {
                    "type": "array",
                    "description": "the ordered list of campaign identifiers",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerSequenceConfigChangeUriReference"
                    }
                },
                "currentCampaign": {
                    "type": "integer",
                    "description": "the zero-based index of the current campaign in the campaigns list"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "on",
                        "off",
                        "complete"
                    ]
                },
                "stopMessage": {
                    "type": "string",
                    "description": "if a sequence has unexpectedly stopped, this message provides the reason"
                },
                "repeat": {
                    "type": "boolean",
                    "description": "indicates if a sequence is to repeat from the beginning after the last campaign completes; default is false"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DialerSequenceConfigChangeObject"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerOutboundSettingsConfigChangeAtzmTimeSlot": {
            "type": "object",
            "id": "urn:jsonschema:dialer:outbound:settings:config:change:v2:AtzmTimeSlot",
            "description": "The time interval to place outbound calls",
            "properties": {
                "earliestCallableTime": {
                    "type": "string",
                    "description": "The earliest time to dial a contact"
                },
                "latestCallableTime": {
                    "type": "string",
                    "description": "The latest time to dial a contact"
                }
            }
        },
        "DialerOutboundSettingsConfigChangeAtzmTimeSlotWithTimeZone": {
            "type": "object",
            "id": "urn:jsonschema:dialer:outbound:settings:config:change:v2:AtzmTimeSlotWithTimeZone",
            "description": "The time interval to place outbound calls",
            "properties": {
                "timeZoneId": {
                    "type": "string",
                    "description": "The time zone to use for contacts that cannot be mapped"
                },
                "earliestCallableTime": {
                    "type": "string",
                    "description": "The earliest time to dial a contact"
                },
                "latestCallableTime": {
                    "type": "string",
                    "description": "The latest time to dial a contact"
                }
            }
        },
        "DialerOutboundSettingsConfigChangeCallableWindow": {
            "type": "object",
            "id": "urn:jsonschema:dialer:outbound:settings:config:change:v2:CallableWindow",
            "properties": {
                "mapped": {
                    "type": "object",
                    "$ref": "#/definitions/DialerOutboundSettingsConfigChangeAtzmTimeSlot"
                },
                "unmapped": {
                    "type": "object",
                    "$ref": "#/definitions/DialerOutboundSettingsConfigChangeAtzmTimeSlotWithTimeZone"
                }
            }
        },
        "DialerOutboundSettingsConfigChangeAutomaticTimeZoneMappingSettings": {
            "type": "object",
            "id": "urn:jsonschema:dialer:outbound:settings:config:change:v2:AutomaticTimeZoneMappingSettings",
            "description": "The settings for automatic time zone mapping",
            "properties": {
                "callableWindows": {
                    "type": "array",
                    "description": "The time intervals to use for automatic time zone mapping",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/DialerOutboundSettingsConfigChangeCallableWindow"
                    }
                }
            }
        },
        "DialerOutboundSettingsConfigChangeOutboundSettings": {
            "type": "object",
            "id": "urn:jsonschema:dialer:outbound:settings:config:change:v2:OutboundSettings",
            "properties": {
                "maxCallsPerAgent": {
                    "type": "integer",
                    "description": "The maximum number of calls that can be placed per agent on any campaign"
                },
                "maxLineUtilization": {
                    "type": "number",
                    "description": "The maximum percentage of lines that should be used for Outbound, expressed as a decimal in the range [0.0, 1.0]"
                },
                "abandonSeconds": {
                    "type": "number",
                    "description": "The number of seconds used to determine if a call is abandoned"
                },
                "complianceAbandonRateDenominator": {
                    "type": "string",
                    "description": "The denominator to be used in determining the compliance abandon rate",
                    "enum": [
                        "ALL_CALLS",
                        "CALLS_THAT_REACHED_QUEUE"
                    ]
                },
                "automaticTimeZoneMapping": {
                    "type": "object",
                    "$ref": "#/definitions/DialerOutboundSettingsConfigChangeAutomaticTimeZoneMappingSettings"
                },
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                }
            }
        },
        "DialerWrapupcodemappingConfigChangeWrapUpCodeMapping": {
            "type": "object",
            "id": "urn:jsonschema:dialer:wrapupcodemapping:config:change:v2:WrapUpCodeMapping",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The globally unique identifier for the object."
                },
                "name": {
                    "type": "string",
                    "description": "The UI-visible name of the object"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Creation time of the entity",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Last modified time of the entity",
                    "format": "date-time"
                },
                "version": {
                    "type": "integer",
                    "description": "Required for updates, must match the version number of the most recent update"
                },
                "defaultSet": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "CONTACT_UNCALLABLE",
                            "NUMBER_UNCALLABLE",
                            "RIGHT_PARTY_CONTACT"
                        ]
                    }
                },
                "mapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CONTACT_UNCALLABLE",
                                "NUMBER_UNCALLABLE",
                                "RIGHT_PARTY_CONTACT"
                            ]
                        }
                    }
                }
            }
        },
        "EvaluationQualityV2TopicUser": {
            "type": "object",
            "id": "urn:jsonschema:evaluation:quality:v2:topic:User",
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "EvaluationQualityV2TopicEvaluationScoringSet": {
            "type": "object",
            "id": "urn:jsonschema:evaluation:quality:v2:topic:EvaluationScoringSet",
            "properties": {
                "totalScore": {
                    "type": "integer"
                },
                "totalCriticalScore": {
                    "type": "integer"
                }
            }
        },
        "EvaluationQualityV2TopicCalibration": {
            "type": "object",
            "id": "urn:jsonschema:evaluation:quality:v2:topic:Calibration",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "EvaluationQualityV2TopicEvaluationSource": {
            "type": "object",
            "id": "urn:jsonschema:evaluation:quality:v2:topic:EvaluationSource",
            "properties": {
                "evaluationSourceType": {
                    "type": "string"
                },
                "evaluationSourceId": {
                    "type": "string"
                },
                "evaluationSourceName": {
                    "type": "string"
                }
            }
        },
        "EvaluationQualityV2TopicEvaluationReference": {
            "type": "object",
            "id": "urn:jsonschema:evaluation:quality:v2:topic:EvaluationReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "EvaluationQualityV2TopicEvaluationV2": {
            "type": "object",
            "id": "urn:jsonschema:evaluation:quality:v2:topic:EvaluationV2",
            "properties": {
                "id": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "string"
                },
                "agent": {
                    "type": "object",
                    "$ref": "#/definitions/EvaluationQualityV2TopicUser"
                },
                "evaluator": {
                    "type": "object",
                    "$ref": "#/definitions/EvaluationQualityV2TopicUser"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "evaluationFormId": {
                    "type": "string"
                },
                "formName": {
                    "type": "string"
                },
                "scoringSet": {
                    "type": "object",
                    "$ref": "#/definitions/EvaluationQualityV2TopicEvaluationScoringSet"
                },
                "contextId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "InProgress",
                        "Finished",
                        "InReview",
                        "Retracted"
                    ]
                },
                "agentHasRead": {
                    "type": "boolean"
                },
                "releaseDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "assignedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "changedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                },
                "divisionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rescore": {
                    "type": "boolean"
                },
                "conversationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaType": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "calibration": {
                    "type": "object",
                    "$ref": "#/definitions/EvaluationQualityV2TopicCalibration"
                },
                "evaluationSource": {
                    "type": "object",
                    "$ref": "#/definitions/EvaluationQualityV2TopicEvaluationSource"
                },
                "assigneeUserId": {
                    "type": "string"
                },
                "previousAssigneeUserId": {
                    "type": "string"
                },
                "assigneeApplicable": {
                    "type": "boolean"
                },
                "evaluationContextId": {
                    "type": "string"
                },
                "disputeCount": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "previousStatus": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "InProgress",
                        "Finished",
                        "InReview",
                        "Retracted"
                    ]
                },
                "declinedReview": {
                    "type": "boolean"
                },
                "retractedEvaluation": {
                    "type": "object",
                    "$ref": "#/definitions/EvaluationQualityV2TopicEvaluationReference"
                },
                "rescoreCount": {
                    "type": "integer"
                },
                "evaluatorCommentHasUpdated": {
                    "type": "boolean"
                },
                "agentCommentHasUpdated": {
                    "type": "boolean"
                },
                "previousRescoreCount": {
                    "type": "integer"
                },
                "previousEvaluatorUserId": {
                    "type": "string"
                }
            }
        },
        "QueueConversationEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Wrapup",
            "description": "Call wrap up or disposition data.",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:ConversationRoutingData",
            "description": "Information on how a communication should be routed to an agent.",
            "properties": {
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicUriReference"
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationEventTopicErrorDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:ErrorDetails",
            "description": "Detailed information about an error response.",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message (400, 401, 403, 404, 500, etc."
                },
                "code": {
                    "type": "string",
                    "description": "A code unique to this error."
                },
                "message": {
                    "type": "string",
                    "description": "Friendly description of this error."
                },
                "messageWithParams": {
                    "type": "string",
                    "description": "This is the same as message except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "messageParams": {
                    "type": "object",
                    "description": "Used in conjunction with messageWithParams. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'john.doe'",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "QueueConversationEventTopicAddress": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Address",
            "description": "Address and name data for a call endpoint.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "This will be nameRaw if present, or a locality lookup of the address field otherwise."
                },
                "nameRaw": {
                    "type": "string",
                    "description": "The name as close to the bits on the wire as possible."
                },
                "addressNormalized": {
                    "type": "string",
                    "description": "The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                },
                "addressRaw": {
                    "type": "string",
                    "description": "The address as close to the bits on the wire as possible."
                },
                "addressDisplayable": {
                    "type": "string",
                    "description": "The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                }
            }
        },
        "QueueConversationEventTopicDisconnectReason": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:DisconnectReason",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Disconnect reason protocol type.",
                    "enum": [
                        "q850",
                        "sip"
                    ]
                },
                "code": {
                    "type": "integer",
                    "description": "Protocol specific reason code. See the Q.850 and SIP specs."
                },
                "phrase": {
                    "type": "string",
                    "description": "Human readable English description of the disconnect reason."
                }
            }
        },
        "QueueConversationEventTopicFaxStatus": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:FaxStatus",
            "description": "Extra information on fax transmission.",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The fax direction, either \"send\" or \"receive\"."
                },
                "expectedPages": {
                    "type": "integer",
                    "description": "Total number of expected pages, if known."
                },
                "activePage": {
                    "type": "integer",
                    "description": "Active page of the transmission."
                },
                "linesTransmitted": {
                    "type": "integer",
                    "description": "Number of lines that have completed transmission."
                },
                "bytesTransmitted": {
                    "type": "integer",
                    "description": "Number of bytes that have competed transmission."
                },
                "baudRate": {
                    "type": "integer",
                    "description": "Current signaling rate of transmission, baud rate."
                },
                "pageErrors": {
                    "type": "integer",
                    "description": "Number of page errors."
                },
                "lineErrors": {
                    "type": "integer",
                    "description": "Number of line errors."
                }
            }
        },
        "QueueConversationEventTopicAfterCallWork": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:AfterCallWork",
            "description": "A communication's after-call work data.",
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The communication's after-call work state.",
                    "enum": [
                        "unknown",
                        "skipped",
                        "pending",
                        "complete",
                        "notApplicable"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The timestamp when this communication started after-call work in the cloud clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this communication ended after-call work in the cloud clock.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationEventTopicCall": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Call",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "recording": {
                    "type": "boolean",
                    "description": "True if this call is being recorded."
                },
                "recordingState": {
                    "type": "string",
                    "description": "State of recording on this call.",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "muted": {
                    "type": "boolean",
                    "description": "True if this call is muted so that remote participants can't hear any audio from this end."
                },
                "confined": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears hold music."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "securePause": {
                    "type": "boolean",
                    "description": "True when the recording of this call is in secure pause status."
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicErrorDetails"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the call was placed on hold in the cloud clock if the call is currently on hold.",
                    "format": "date-time"
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a call is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "documentId": {
                    "type": "string",
                    "description": "If call is a fax of a document in content management, the id of the document in content management."
                },
                "self": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicAddress"
                },
                "other": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAddress"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the call."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "disconnectReasons": {
                    "type": "array",
                    "description": "List of reasons that this call was disconnected. This will be set once the call disconnects.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicDisconnectReason"
                    }
                },
                "faxStatus": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicFaxStatus"
                },
                "uuiData": {
                    "type": "string",
                    "description": "User to User Information (UUI) data managed by SIP session application."
                },
                "bargedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the barge conference in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                }
            }
        },
        "QueueConversationEventTopicPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:PhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "QueueConversationEventTopicDialerPreview": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:DialerPreview",
            "description": "The preview data to be used when this callback is a Preview.",
            "properties": {
                "id": {
                    "type": "string"
                },
                "contactId": {
                    "type": "string",
                    "description": "The contact associated with this preview data pop"
                },
                "contactListId": {
                    "type": "string",
                    "description": "The contactList associated with this preview data pop."
                },
                "campaignId": {
                    "type": "string",
                    "description": "The campaignId associated with this preview data pop."
                },
                "phoneNumberColumns": {
                    "type": "array",
                    "description": "The phone number columns associated with this campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicPhoneNumberColumn"
                    }
                }
            }
        },
        "QueueConversationEventTopicVoicemail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Voicemail",
            "description": "The voicemail data to be used when this callback is an ACD voicemail.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The voicemail id"
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "current state of the voicemail upload",
                    "enum": [
                        "pending",
                        "complete",
                        "failed",
                        "timeout",
                        "none"
                    ]
                }
            }
        },
        "QueueConversationEventTopicCallback": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Callback",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the call",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold.",
                    "format": "date-time"
                },
                "dialerPreview": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicDialerPreview"
                },
                "voicemail": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicVoicemail"
                },
                "callbackNumbers": {
                    "type": "array",
                    "description": "The phone number(s) to use to place the callback.",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackUserName": {
                    "type": "string",
                    "description": "The name of the user requesting a callback."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "externalCampaign": {
                    "type": "boolean",
                    "description": "True if the call for the callback uses external dialing."
                },
                "skipEnabled": {
                    "type": "boolean",
                    "description": "True if the ability to skip a callback should be enabled."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the callback."
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "callbackScheduledTime": {
                    "type": "string",
                    "description": "The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately.",
                    "format": "date-time"
                },
                "automatedCallbackConfigId": {
                    "type": "string",
                    "description": "The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "callerId": {
                    "type": "string",
                    "description": "The phone number displayed to recipients of the phone call. The value should conform to the E164 format."
                },
                "callerIdName": {
                    "type": "string",
                    "description": "The name displayed to recipients of the phone call."
                }
            }
        },
        "QueueConversationEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:JourneyContext",
            "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationEventTopicChat": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Chat",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the chat."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "avatarImageUrl": {
                    "type": "string",
                    "description": "The avatar for the chat (if available)."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicJourneyContext"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationEventTopicCobrowse": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Cobrowse",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAddress"
                        }
                    ]
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "cobrowseSessionId": {
                    "type": "string",
                    "description": "The co-browse session ID."
                },
                "cobrowseRole": {
                    "type": "string",
                    "description": "This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer)."
                },
                "controlling": {
                    "type": "array",
                    "description": "ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).",
                    "items": {
                        "type": "string"
                    }
                },
                "viewerUrl": {
                    "type": "string",
                    "description": "The URL that can be used to open co-browse session in web browser."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the co-browse communication."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "providerEventTime": {
                    "type": "string",
                    "description": "The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC).",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationEventTopicAttachment": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Attachment",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "The unique identifier for the attachment."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment."
                },
                "contentUri": {
                    "type": "string",
                    "description": "The content uri of the attachment. If set, this is commonly a public api download location."
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of file the attachment is."
                },
                "contentLength": {
                    "type": "integer",
                    "description": "The length of the attachment file."
                }
            }
        },
        "QueueConversationEventTopicEmail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Email",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Indicates that the email was auto-generated like an Out of Office reply."
                },
                "subject": {
                    "type": "string",
                    "description": "The subject for the initial email that started this conversation."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "messagesSent": {
                    "type": "integer",
                    "description": "The number of email messages sent by this participant."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicErrorDetails"
                        }
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "messageId": {
                    "type": "string",
                    "description": "A globally unique identifier for the stored content of this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "Whether an email is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "draftAttachments": {
                    "type": "array",
                    "description": "A list of uploaded attachments on the email draft.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicAttachment"
                    }
                },
                "spam": {
                    "type": "boolean",
                    "description": "Indicates if the inbound email was marked as spam."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationEventTopicMessageMedia": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:MessageMedia",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the media, useful for retrieving it"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url"
                },
                "contentLengthBytes": {
                    "type": "integer",
                    "description": "The optional content length of the the media object, in bytes."
                },
                "name": {
                    "type": "string",
                    "description": "The optional name of the the media object."
                },
                "id": {
                    "type": "string",
                    "description": "The optional id of the the media object."
                }
            }
        },
        "QueueConversationEventTopicMessageSticker": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:MessageSticker",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the sticker, useful for retrieving it"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the the sticker object."
                }
            }
        },
        "QueueConversationEventTopicMessageMetadataEvent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:MessageMetadataEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Type of this event element."
                },
                "subType": {
                    "type": "string",
                    "description": "Event subtype, if any"
                }
            }
        },
        "QueueConversationEventTopicMessageMetadataContent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:MessageMetadataContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Type of this content element."
                },
                "subType": {
                    "type": "string",
                    "description": "Content subtype, if any"
                }
            }
        },
        "QueueConversationEventTopicMessageMetadata": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:MessageMetadata",
            "description": "Metadata information about a message.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Message type."
                },
                "events": {
                    "type": "array",
                    "description": "List of message events, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicMessageMetadataEvent"
                    }
                },
                "content": {
                    "type": "array",
                    "description": "List of message content, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicMessageMetadataContent"
                    }
                }
            }
        },
        "QueueConversationEventTopicMessageDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:MessageDetails",
            "properties": {
                "messageId": {
                    "type": "string",
                    "description": "UUID identifying the message media."
                },
                "messageTime": {
                    "type": "string",
                    "description": "The time when the message was sent or received.",
                    "format": "date-time"
                },
                "messageStatus": {
                    "type": "string",
                    "description": "Indicates the delivery status of the message.",
                    "enum": [
                        "queued",
                        "sent",
                        "failed",
                        "received",
                        "delivery-success",
                        "delivery-failed",
                        "read",
                        "removed"
                    ]
                },
                "messageSegmentCount": {
                    "type": "integer",
                    "description": "The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits."
                },
                "media": {
                    "type": "array",
                    "description": "The media (images, files, etc) associated with this message, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicMessageMedia"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicErrorDetails"
                        }
                    ]
                },
                "stickers": {
                    "type": "array",
                    "description": "A list of stickers included in the message",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicMessageSticker"
                    }
                },
                "messageMetadata": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicMessageMetadata"
                }
            }
        },
        "QueueConversationEventTopicMessage": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Message",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a message is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicErrorDetails"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "toAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAddress"
                        }
                    ]
                },
                "fromAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAddress"
                        }
                    ]
                },
                "messages": {
                    "type": "array",
                    "description": "The messages sent on this communication channel.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicMessageDetails"
                    }
                },
                "messagesTranscriptUri": {
                    "type": "string",
                    "description": "the messages transcript file uri."
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the type of message platform from which the message originated.",
                    "enum": [
                        "unknown",
                        "sms",
                        "twitter",
                        "facebook",
                        "line",
                        "viber",
                        "wechat",
                        "whatsapp",
                        "telegram",
                        "kakao",
                        "webmessaging",
                        "open",
                        "instagram"
                    ]
                },
                "recipientCountry": {
                    "type": "string",
                    "description": "Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format."
                },
                "recipientType": {
                    "type": "string",
                    "description": "The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type."
                },
                "journeyContext": {
                    "type": "object",
                    "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicJourneyContext"
                        }
                    ]
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                },
                "byoSmsIntegrationId": {
                    "type": "string"
                }
            }
        },
        "QueueConversationEventTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Object",
            "description": "The number of peer participants from the perspective of the participant in the conference."
        },
        "QueueConversationEventTopicScreenshare": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Screenshare",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "sharing": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the screen share."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "peerCount": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicObject"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationEventTopicSocialExpression": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:SocialExpression",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "socialMediaId": {
                    "type": "string",
                    "description": "A globally unique identifier for the social media."
                },
                "socialMediaHub": {
                    "type": "string",
                    "description": "The social network of the communication"
                },
                "socialUserName": {
                    "type": "string",
                    "description": "The social media user name of the communication"
                },
                "previewText": {
                    "type": "string",
                    "description": "The text preview of the communication contents"
                },
                "recordingId": {
                    "type": "string",
                    "description": "A globally unique identifier for the recording associated with this chat."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the social expression."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationEventTopicVideo": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Video",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "audioMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted their outgoing audio."
                },
                "videoMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted/paused their outgoing video."
                },
                "sharingScreen": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "peerCount": {
                    "type": "object",
                    "description": "The number of peer participants from the perspective of the participant in the conference.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicObject"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The media provider controlling the video."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "msids": {
                    "type": "array",
                    "description": "List of media stream ids",
                    "items": {
                        "type": "string"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationEventTopicWorkflow": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Workflow",
            "description": "Information about the workflow.",
            "properties": {
                "workflowId": {
                    "type": "string",
                    "description": "The id of the workflow"
                }
            }
        },
        "QueueConversationEventTopicParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Participant",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this conversation."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the conversation in the provider clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this participant disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "userId": {
                    "type": "string",
                    "description": "If this participant represents a user, then this will be the globally unique identifier for the user."
                },
                "externalContactId": {
                    "type": "string",
                    "description": "If this participant represents an external contact, then this will be the globally unique identifier for the external contact."
                },
                "externalOrganizationId": {
                    "type": "string",
                    "description": "If this participant represents an external org, then this will be the globally unique identifier for the external org."
                },
                "name": {
                    "type": "string",
                    "description": "A human readable name identifying the participant."
                },
                "queueId": {
                    "type": "string",
                    "description": "If present, the queue id that the communication channel came in on."
                },
                "groupId": {
                    "type": "string",
                    "description": "If present, the group id that the participant represents."
                },
                "teamId": {
                    "type": "string",
                    "description": "The team id that this participant is a member of when added to the conversation."
                },
                "purpose": {
                    "type": "string",
                    "description": "A well known string that specifies the purpose or type of this participant."
                },
                "consultParticipantId": {
                    "type": "string",
                    "description": "If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred."
                },
                "address": {
                    "type": "string",
                    "description": "The address for the this participant. For a phone call this will be the ANI."
                },
                "wrapupRequired": {
                    "type": "boolean",
                    "description": "True iff this participant is required to enter wrapup for this conversation."
                },
                "wrapupExpected": {
                    "type": "boolean",
                    "description": "True when a participant is expected to enter a wrapup code once the call connects."
                },
                "wrapupPrompt": {
                    "type": "string",
                    "description": "This field controls how the UI prompts the agent for a wrapup."
                },
                "wrapupTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long a timed ACW session will last."
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicWrapup"
                },
                "startAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant started after-call work.",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant ended after-call work.",
                    "format": "date-time"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicConversationRoutingData"
                },
                "alertingTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long the agent has to answer an interaction before being marked as not responding."
                },
                "monitoredParticipantId": {
                    "type": "string",
                    "description": "If this participant is a monitor, then this will be the id of the participant that is being monitored."
                },
                "coachedParticipantId": {
                    "type": "string",
                    "description": "If this participant is a coach, then this will be the id of the participant that is being coached."
                },
                "bargedParticipantId": {
                    "type": "string",
                    "description": "If this participant created a barge in conference, then this will be the id of the participant that is barged in."
                },
                "mediaRoles": {
                    "type": "array",
                    "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc.",
                    "items": {
                        "type": "string"
                    }
                },
                "screenRecordingState": {
                    "type": "string",
                    "description": "The current screen recording state for this participant.",
                    "enum": [
                        "requested",
                        "active",
                        "paused",
                        "stopped",
                        "error",
                        "timeout"
                    ]
                },
                "flaggedReason": {
                    "type": "string",
                    "description": "If this participant has flagged the conversation, the reason code given."
                },
                "attributes": {
                    "type": "object",
                    "description": "Additional participant attributes",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "calls": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicCall"
                    }
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicCallback"
                    }
                },
                "chats": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicChat"
                    }
                },
                "cobrowsesessions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicCobrowse"
                    }
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicEmail"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicMessage"
                    }
                },
                "screenshares": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicScreenshare"
                    }
                },
                "socialExpressions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicSocialExpression"
                    }
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicVideo"
                    }
                },
                "workflow": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicWorkflow"
                }
            }
        },
        "QueueConversationEventTopicInitiator": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Initiator",
            "description": "Fields identifying the initiator of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user who initiated the command if it was initiated by a user."
                }
            }
        },
        "QueueConversationEventTopicModifiedBy": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:ModifiedBy",
            "description": "Fields identifying the entity that updated the command.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the user if the updater is an internal user."
                },
                "selfUri": {
                    "type": "string",
                    "description": "The URI for the user if the updater is an internal user."
                }
            }
        },
        "QueueConversationEventTopicDestination": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Destination",
            "description": "Fields identifying the destination of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user if the command destination is a user."
                },
                "address": {
                    "type": "string",
                    "description": "The destination address if the command destination is an endpoint."
                }
            }
        },
        "QueueConversationEventTopicRecentTransfer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:RecentTransfer",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the command."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "active",
                        "complete",
                        "canceled",
                        "failed",
                        "timeout",
                        "unknown"
                    ]
                },
                "dateIssued": {
                    "type": "string",
                    "description": "The date/time that this command was issued.",
                    "format": "date-time"
                },
                "initiator": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicInitiator"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicModifiedBy"
                },
                "destination": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEventTopicDestination"
                },
                "transferType": {
                    "type": "string",
                    "description": "The type of transfer to perform.",
                    "enum": [
                        "attended",
                        "unattended"
                    ]
                }
            }
        },
        "QueueConversationEventTopicConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:event:topic:v2:Conversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "maxParticipants": {
                    "type": "integer"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicParticipant"
                    }
                },
                "recentTransfers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEventTopicRecentTransfer"
                    }
                },
                "recordingState": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "securePause": {
                    "type": "boolean"
                }
            }
        },
        "QueueConversationCallbackEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationCallbackEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationCallbackEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallbackEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallbackEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationCallbackEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationCallbackEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationCallbackEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallbackEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationCallbackEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationCallbackEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationCallbackEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationCallbackEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationCallbackEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationCallbackEventTopicPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:PhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "QueueConversationCallbackEventTopicDialerPreview": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:DialerPreview",
            "properties": {
                "id": {
                    "type": "string"
                },
                "contactId": {
                    "type": "string",
                    "description": "The contact associated with this preview data pop"
                },
                "contactListId": {
                    "type": "string",
                    "description": "The contactList associated with this preview data pop."
                },
                "campaignId": {
                    "type": "string",
                    "description": "The campaignId associated with this preview data pop."
                },
                "phoneNumberColumns": {
                    "type": "array",
                    "description": "The phone number columns associated with this campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallbackEventTopicPhoneNumberColumn"
                    }
                }
            }
        },
        "QueueConversationCallbackEventTopicVoicemail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:Voicemail",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The voicemail id"
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "current state of the voicemail upload",
                    "enum": [
                        "pending",
                        "complete",
                        "failed",
                        "timeout",
                        "none"
                    ]
                }
            }
        },
        "QueueConversationCallbackEventTopicCallbackMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:CallbackMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outboundPreview": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicDialerPreview"
                },
                "voicemail": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallbackEventTopicVoicemail"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackUserName": {
                    "type": "string"
                },
                "skipEnabled": {
                    "type": "boolean"
                },
                "externalCampaign": {
                    "type": "boolean"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "callbackScheduledTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "automatedCallbackConfigId": {
                    "type": "string"
                }
            }
        },
        "QueueConversationCallbackEventTopicCallbackConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:callback:event:topic:v2:CallbackConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallbackEventTopicCallbackMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationCallEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationCallEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationCallEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationCallEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationCallEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationCallEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationCallEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationCallEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationCallEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationCallEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationCallEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationCallEventTopicFaxStatus": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:FaxStatus",
            "properties": {
                "direction": {
                    "type": "string"
                },
                "expectedPages": {
                    "type": "integer"
                },
                "activePage": {
                    "type": "integer"
                },
                "linesTransmitted": {
                    "type": "integer"
                },
                "bytesTransmitted": {
                    "type": "integer"
                },
                "dataRate": {
                    "type": "integer"
                },
                "pageErrors": {
                    "type": "integer"
                },
                "lineErrors": {
                    "type": "integer"
                }
            }
        },
        "QueueConversationCallEventTopicCallMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:CallMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "muted": {
                    "type": "boolean"
                },
                "confined": {
                    "type": "boolean"
                },
                "recording": {
                    "type": "boolean"
                },
                "recordingState": {
                    "type": "string",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "securePause": {
                    "type": "boolean"
                },
                "group": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicUriReference"
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "documentId": {
                    "type": "string"
                },
                "monitoredParticipantId": {
                    "type": "string"
                },
                "coachedParticipantId": {
                    "type": "string"
                },
                "bargedParticipantId": {
                    "type": "string"
                },
                "bargedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "consultParticipantId": {
                    "type": "string"
                },
                "faxStatus": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCallEventTopicFaxStatus"
                }
            }
        },
        "QueueConversationCallEventTopicCallConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:call:event:topic:v2:CallConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCallEventTopicCallMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recordingState": {
                    "type": "string",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "securePause": {
                    "type": "boolean"
                },
                "maxParticipants": {
                    "type": "integer"
                }
            }
        },
        "QueueConversationChatEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationChatEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationChatEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationChatEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationChatEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationChatEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationChatEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationChatEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationChatEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationChatEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationChatEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationChatEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationChatEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationChatEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationChatEventTopicChatMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:ChatMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationChatEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roomId": {
                    "type": "string"
                },
                "avatarImageUrl": {
                    "type": "string"
                }
            }
        },
        "QueueConversationChatEventTopicChatConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:chat:event:topic:v2:ChatConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationChatEventTopicChatMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationCobrowseEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationCobrowseEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationCobrowseEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCobrowseEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCobrowseEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationCobrowseEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationCobrowseEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationCobrowseEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCobrowseEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationCobrowseEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationCobrowseEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationCobrowseEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationCobrowseEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationCobrowseEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationCobrowseEventTopicCobrowseMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:CobrowseMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationCobrowseEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cobrowseSessionId": {
                    "type": "string"
                },
                "cobrowseRole": {
                    "type": "string"
                },
                "viewerUrl": {
                    "type": "string"
                },
                "providerEventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "controlling": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationCobrowseEventTopicCobrowseConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:cobrowse:event:topic:v2:CobrowseConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationCobrowseEventTopicCobrowseMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationEmailEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationEmailEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationEmailEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEmailEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEmailEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationEmailEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationEmailEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationEmailEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEmailEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationEmailEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationEmailEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationEmailEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationEmailEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationEmailEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationEmailEventTopicAttachment": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:Attachment",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "The unique identifier for the attachment."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment."
                },
                "contentUri": {
                    "type": "string",
                    "description": "The content uri of the attachment. If set, this is commonly a public api download location."
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of file the attachment is."
                },
                "contentLength": {
                    "type": "integer",
                    "description": "The length of the attachment file."
                }
            }
        },
        "QueueConversationEmailEventTopicEmailMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:EmailMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationEmailEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "type": "string"
                },
                "messagesSent": {
                    "type": "integer"
                },
                "autoGenerated": {
                    "type": "boolean"
                },
                "messageId": {
                    "type": "string"
                },
                "draftAttachments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEmailEventTopicAttachment"
                    }
                },
                "spam": {
                    "type": "boolean"
                }
            }
        },
        "QueueConversationEmailEventTopicEmailConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:email:event:topic:v2:EmailConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationEmailEventTopicEmailMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationMessageEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationMessageEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationMessageEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationMessageEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationMessageEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationMessageEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationMessageEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationMessageEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationMessageEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationMessageEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationMessageEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationMessageEventTopicMessageMedia": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageMedia",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the media, useful for retrieving it"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url"
                },
                "contentLengthBytes": {
                    "type": "integer",
                    "description": "The optional content length of the the media object, in bytes."
                },
                "name": {
                    "type": "string",
                    "description": "The optional name of the the media object."
                },
                "id": {
                    "type": "string",
                    "description": "The optional id of the the media object."
                }
            }
        },
        "QueueConversationMessageEventTopicMessageSticker": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageSticker",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the sticker, useful for retrieving it"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the the sticker object."
                }
            }
        },
        "QueueConversationMessageEventTopicErrorDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:ErrorDetails",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message (400, 401, 403, 404, 500, etc."
                },
                "code": {
                    "type": "string",
                    "description": "A code unique to this error."
                },
                "message": {
                    "type": "string",
                    "description": "Friendly description of this error."
                },
                "messageWithParams": {
                    "type": "string",
                    "description": "This is the same as message except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "messageParams": {
                    "type": "object",
                    "description": "Used in conjunction with messageWithParams. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'john.doe'",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "QueueConversationMessageEventTopicMessageMetadataEvent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageMetadataEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Type of this event element."
                },
                "subType": {
                    "type": "string",
                    "description": "Event subtype, if any"
                }
            }
        },
        "QueueConversationMessageEventTopicMessageMetadataContent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageMetadataContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Type of this content element."
                },
                "subType": {
                    "type": "string",
                    "description": "Content subtype, if any"
                }
            }
        },
        "QueueConversationMessageEventTopicMessageMetadata": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageMetadata",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Message type."
                },
                "events": {
                    "type": "array",
                    "description": "List of message events, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicMessageMetadataEvent"
                    }
                },
                "content": {
                    "type": "array",
                    "description": "List of message content, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicMessageMetadataContent"
                    }
                }
            }
        },
        "QueueConversationMessageEventTopicMessageDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageDetails",
            "properties": {
                "message": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "messageTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "messageSegmentCount": {
                    "type": "integer"
                },
                "messageStatus": {
                    "type": "string",
                    "enum": [
                        "queued",
                        "sent",
                        "failed",
                        "received",
                        "delivery-success",
                        "delivery-failed",
                        "read",
                        "removed"
                    ]
                },
                "media": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicMessageMedia"
                    }
                },
                "stickers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicMessageSticker"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicErrorDetails"
                },
                "messageMetadata": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicMessageMetadata"
                }
            }
        },
        "QueueConversationMessageEventTopicMessageMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationMessageEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicMessageDetails"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "sms",
                        "twitter",
                        "facebook",
                        "line",
                        "viber",
                        "wechat",
                        "whatsapp",
                        "telegram",
                        "kakao",
                        "webmessaging",
                        "open",
                        "instagram"
                    ]
                },
                "recipientCountry": {
                    "type": "string"
                },
                "recipientType": {
                    "type": "string"
                },
                "byoSmsIntegrationId": {
                    "type": "string"
                },
                "monitoredParticipantId": {
                    "type": "string"
                }
            }
        },
        "QueueConversationMessageEventTopicMessageConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:message:event:topic:v2:MessageConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationMessageEventTopicMessageMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationScreenShareEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationScreenShareEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "QueueConversationScreenShareEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationScreenShareEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationScreenShareEventTopicErrorBody"
                    }
                }
            }
        },
        "QueueConversationScreenShareEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationScreenShareEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationScreenShareEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationScreenShareEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationScreenShareEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationScreenShareEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationScreenShareEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationScreenShareEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationScreenShareEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationScreenShareEventTopicScreenShareMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:ScreenShareMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationScreenShareEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "context": {
                    "type": "string"
                },
                "peerCount": {
                    "type": "integer"
                },
                "sharing": {
                    "type": "boolean"
                }
            }
        },
        "QueueConversationScreenShareEventTopicScreenShareConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:screen:share:event:topic:v2:ScreenShareConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationScreenShareEventTopicScreenShareMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Wrapup",
            "description": "Call wrap up or disposition data.",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:ConversationRoutingData",
            "description": "Information on how a communication should be routed to an agent.",
            "properties": {
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicUriReference"
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicErrorDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:ErrorDetails",
            "description": "Detailed information about an error response.",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message (400, 401, 403, 404, 500, etc."
                },
                "code": {
                    "type": "string",
                    "description": "A code unique to this error."
                },
                "message": {
                    "type": "string",
                    "description": "Friendly description of this error."
                },
                "messageWithParams": {
                    "type": "string",
                    "description": "This is the same as message except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "messageParams": {
                    "type": "object",
                    "description": "Used in conjunction with messageWithParams. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'john.doe'",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicAddress": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Address",
            "description": "Address and name data for a call endpoint.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "This will be nameRaw if present, or a locality lookup of the address field otherwise."
                },
                "nameRaw": {
                    "type": "string",
                    "description": "The name as close to the bits on the wire as possible."
                },
                "addressNormalized": {
                    "type": "string",
                    "description": "The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                },
                "addressRaw": {
                    "type": "string",
                    "description": "The address as close to the bits on the wire as possible."
                },
                "addressDisplayable": {
                    "type": "string",
                    "description": "The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicDisconnectReason": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:DisconnectReason",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Disconnect reason protocol type.",
                    "enum": [
                        "q850",
                        "sip"
                    ]
                },
                "code": {
                    "type": "integer",
                    "description": "Protocol specific reason code. See the Q.850 and SIP specs."
                },
                "phrase": {
                    "type": "string",
                    "description": "Human readable English description of the disconnect reason."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicFaxStatus": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:FaxStatus",
            "description": "Extra information on fax transmission.",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The fax direction, either \"send\" or \"receive\"."
                },
                "expectedPages": {
                    "type": "integer",
                    "description": "Total number of expected pages, if known."
                },
                "activePage": {
                    "type": "integer",
                    "description": "Active page of the transmission."
                },
                "linesTransmitted": {
                    "type": "integer",
                    "description": "Number of lines that have completed transmission."
                },
                "bytesTransmitted": {
                    "type": "integer",
                    "description": "Number of bytes that have competed transmission."
                },
                "baudRate": {
                    "type": "integer",
                    "description": "Current signaling rate of transmission, baud rate."
                },
                "pageErrors": {
                    "type": "integer",
                    "description": "Number of page errors."
                },
                "lineErrors": {
                    "type": "integer",
                    "description": "Number of line errors."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicAfterCallWork": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:AfterCallWork",
            "description": "A communication's after-call work data.",
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The communication's after-call work state.",
                    "enum": [
                        "unknown",
                        "skipped",
                        "pending",
                        "complete",
                        "notApplicable"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The timestamp when this communication started after-call work in the cloud clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this communication ended after-call work in the cloud clock.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicCall": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Call",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "recording": {
                    "type": "boolean",
                    "description": "True if this call is being recorded."
                },
                "recordingState": {
                    "type": "string",
                    "description": "State of recording on this call.",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "muted": {
                    "type": "boolean",
                    "description": "True if this call is muted so that remote participants can't hear any audio from this end."
                },
                "confined": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears hold music."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "securePause": {
                    "type": "boolean",
                    "description": "True when the recording of this call is in secure pause status."
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicErrorDetails"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the call was placed on hold in the cloud clock if the call is currently on hold.",
                    "format": "date-time"
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a call is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "documentId": {
                    "type": "string",
                    "description": "If call is a fax of a document in content management, the id of the document in content management."
                },
                "self": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                },
                "other": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the call."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "disconnectReasons": {
                    "type": "array",
                    "description": "List of reasons that this call was disconnected. This will be set once the call disconnects.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicDisconnectReason"
                    }
                },
                "faxStatus": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicFaxStatus"
                },
                "uuiData": {
                    "type": "string",
                    "description": "User to User Information (UUI) data managed by SIP session application."
                },
                "bargedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the barge conference in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:PhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicDialerPreview": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:DialerPreview",
            "description": "The preview data to be used when this callback is a Preview.",
            "properties": {
                "id": {
                    "type": "string"
                },
                "contactId": {
                    "type": "string",
                    "description": "The contact associated with this preview data pop"
                },
                "contactListId": {
                    "type": "string",
                    "description": "The contactList associated with this preview data pop."
                },
                "campaignId": {
                    "type": "string",
                    "description": "The campaignId associated with this preview data pop."
                },
                "phoneNumberColumns": {
                    "type": "array",
                    "description": "The phone number columns associated with this campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicPhoneNumberColumn"
                    }
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicVoicemail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Voicemail",
            "description": "The voicemail data to be used when this callback is an ACD voicemail.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The voicemail id"
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "current state of the voicemail upload",
                    "enum": [
                        "pending",
                        "complete",
                        "failed",
                        "timeout",
                        "none"
                    ]
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicCallback": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Callback",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the call",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold.",
                    "format": "date-time"
                },
                "dialerPreview": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicDialerPreview"
                },
                "voicemail": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicVoicemail"
                },
                "callbackNumbers": {
                    "type": "array",
                    "description": "The phone number(s) to use to place the callback.",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackUserName": {
                    "type": "string",
                    "description": "The name of the user requesting a callback."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "externalCampaign": {
                    "type": "boolean",
                    "description": "True if the call for the callback uses external dialing."
                },
                "skipEnabled": {
                    "type": "boolean",
                    "description": "True if the ability to skip a callback should be enabled."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the callback."
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "callbackScheduledTime": {
                    "type": "string",
                    "description": "The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately.",
                    "format": "date-time"
                },
                "automatedCallbackConfigId": {
                    "type": "string",
                    "description": "The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "callerId": {
                    "type": "string",
                    "description": "The phone number displayed to recipients of the phone call. The value should conform to the E164 format."
                },
                "callerIdName": {
                    "type": "string",
                    "description": "The name displayed to recipients of the phone call."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:JourneyContext",
            "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicChat": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Chat",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the chat."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "avatarImageUrl": {
                    "type": "string",
                    "description": "The avatar for the chat (if available)."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicJourneyContext"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicCobrowse": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Cobrowse",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                        }
                    ]
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "cobrowseSessionId": {
                    "type": "string",
                    "description": "The co-browse session ID."
                },
                "cobrowseRole": {
                    "type": "string",
                    "description": "This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer)."
                },
                "controlling": {
                    "type": "array",
                    "description": "ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).",
                    "items": {
                        "type": "string"
                    }
                },
                "viewerUrl": {
                    "type": "string",
                    "description": "The URL that can be used to open co-browse session in web browser."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the co-browse communication."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "providerEventTime": {
                    "type": "string",
                    "description": "The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC).",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicAttachment": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Attachment",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "The unique identifier for the attachment."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment."
                },
                "contentUri": {
                    "type": "string",
                    "description": "The content uri of the attachment. If set, this is commonly a public api download location."
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of file the attachment is."
                },
                "contentLength": {
                    "type": "integer",
                    "description": "The length of the attachment file."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicEmail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Email",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Indicates that the email was auto-generated like an Out of Office reply."
                },
                "subject": {
                    "type": "string",
                    "description": "The subject for the initial email that started this conversation."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "messagesSent": {
                    "type": "integer",
                    "description": "The number of email messages sent by this participant."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicErrorDetails"
                        }
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "messageId": {
                    "type": "string",
                    "description": "A globally unique identifier for the stored content of this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "Whether an email is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "draftAttachments": {
                    "type": "array",
                    "description": "A list of uploaded attachments on the email draft.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAttachment"
                    }
                },
                "spam": {
                    "type": "boolean",
                    "description": "Indicates if the inbound email was marked as spam."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessageMedia": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:MessageMedia",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the media, useful for retrieving it"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url"
                },
                "contentLengthBytes": {
                    "type": "integer",
                    "description": "The optional content length of the the media object, in bytes."
                },
                "name": {
                    "type": "string",
                    "description": "The optional name of the the media object."
                },
                "id": {
                    "type": "string",
                    "description": "The optional id of the the media object."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessageSticker": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:MessageSticker",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the sticker, useful for retrieving it"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the the sticker object."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessageMetadataEvent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:MessageMetadataEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Type of this event element."
                },
                "subType": {
                    "type": "string",
                    "description": "Event subtype, if any"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessageMetadataContent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:MessageMetadataContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Type of this content element."
                },
                "subType": {
                    "type": "string",
                    "description": "Content subtype, if any"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessageMetadata": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:MessageMetadata",
            "description": "Metadata information about a message.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Message type."
                },
                "events": {
                    "type": "array",
                    "description": "List of message events, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessageMetadataEvent"
                    }
                },
                "content": {
                    "type": "array",
                    "description": "List of message content, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessageMetadataContent"
                    }
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessageDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:MessageDetails",
            "properties": {
                "messageId": {
                    "type": "string",
                    "description": "UUID identifying the message media."
                },
                "messageTime": {
                    "type": "string",
                    "description": "The time when the message was sent or received.",
                    "format": "date-time"
                },
                "messageStatus": {
                    "type": "string",
                    "description": "Indicates the delivery status of the message.",
                    "enum": [
                        "queued",
                        "sent",
                        "failed",
                        "received",
                        "delivery-success",
                        "delivery-failed",
                        "read",
                        "removed"
                    ]
                },
                "messageSegmentCount": {
                    "type": "integer",
                    "description": "The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits."
                },
                "media": {
                    "type": "array",
                    "description": "The media (images, files, etc) associated with this message, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessageMedia"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicErrorDetails"
                        }
                    ]
                },
                "stickers": {
                    "type": "array",
                    "description": "A list of stickers included in the message",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessageSticker"
                    }
                },
                "messageMetadata": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessageMetadata"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicMessage": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Message",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a message is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicErrorDetails"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "toAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                        }
                    ]
                },
                "fromAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                        }
                    ]
                },
                "messages": {
                    "type": "array",
                    "description": "The messages sent on this communication channel.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessageDetails"
                    }
                },
                "messagesTranscriptUri": {
                    "type": "string",
                    "description": "the messages transcript file uri."
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the type of message platform from which the message originated.",
                    "enum": [
                        "unknown",
                        "sms",
                        "twitter",
                        "facebook",
                        "line",
                        "viber",
                        "wechat",
                        "whatsapp",
                        "telegram",
                        "kakao",
                        "webmessaging",
                        "open",
                        "instagram"
                    ]
                },
                "recipientCountry": {
                    "type": "string",
                    "description": "Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format."
                },
                "recipientType": {
                    "type": "string",
                    "description": "The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type."
                },
                "journeyContext": {
                    "type": "object",
                    "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicJourneyContext"
                        }
                    ]
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                },
                "byoSmsIntegrationId": {
                    "type": "string"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Object",
            "description": "The number of peer participants from the perspective of the participant in the conference."
        },
        "QueueConversationSocialExpressionEventTopicScreenshare": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Screenshare",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "sharing": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the screen share."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "peerCount": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicObject"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicSocialExpression": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:SocialExpression",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "socialMediaId": {
                    "type": "string",
                    "description": "A globally unique identifier for the social media."
                },
                "socialMediaHub": {
                    "type": "string",
                    "description": "The social network of the communication"
                },
                "socialUserName": {
                    "type": "string",
                    "description": "The social media user name of the communication"
                },
                "previewText": {
                    "type": "string",
                    "description": "The text preview of the communication contents"
                },
                "recordingId": {
                    "type": "string",
                    "description": "A globally unique identifier for the recording associated with this chat."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the social expression."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicVideo": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Video",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "audioMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted their outgoing audio."
                },
                "videoMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted/paused their outgoing video."
                },
                "sharingScreen": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "peerCount": {
                    "type": "object",
                    "description": "The number of peer participants from the perspective of the participant in the conference.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicObject"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The media provider controlling the video."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "msids": {
                    "type": "array",
                    "description": "List of media stream ids",
                    "items": {
                        "type": "string"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicWorkflow": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Workflow",
            "description": "Information about the workflow.",
            "properties": {
                "workflowId": {
                    "type": "string",
                    "description": "The id of the workflow"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Participant",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this conversation."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the conversation in the provider clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this participant disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "userId": {
                    "type": "string",
                    "description": "If this participant represents a user, then this will be the globally unique identifier for the user."
                },
                "externalContactId": {
                    "type": "string",
                    "description": "If this participant represents an external contact, then this will be the globally unique identifier for the external contact."
                },
                "externalOrganizationId": {
                    "type": "string",
                    "description": "If this participant represents an external org, then this will be the globally unique identifier for the external org."
                },
                "name": {
                    "type": "string",
                    "description": "A human readable name identifying the participant."
                },
                "queueId": {
                    "type": "string",
                    "description": "If present, the queue id that the communication channel came in on."
                },
                "groupId": {
                    "type": "string",
                    "description": "If present, the group id that the participant represents."
                },
                "teamId": {
                    "type": "string",
                    "description": "The team id that this participant is a member of when added to the conversation."
                },
                "purpose": {
                    "type": "string",
                    "description": "A well known string that specifies the purpose or type of this participant."
                },
                "consultParticipantId": {
                    "type": "string",
                    "description": "If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred."
                },
                "address": {
                    "type": "string",
                    "description": "The address for the this participant. For a phone call this will be the ANI."
                },
                "wrapupRequired": {
                    "type": "boolean",
                    "description": "True iff this participant is required to enter wrapup for this conversation."
                },
                "wrapupExpected": {
                    "type": "boolean",
                    "description": "True when a participant is expected to enter a wrapup code once the call connects."
                },
                "wrapupPrompt": {
                    "type": "string",
                    "description": "This field controls how the UI prompts the agent for a wrapup."
                },
                "wrapupTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long a timed ACW session will last."
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWrapup"
                },
                "startAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant started after-call work.",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant ended after-call work.",
                    "format": "date-time"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicConversationRoutingData"
                },
                "alertingTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long the agent has to answer an interaction before being marked as not responding."
                },
                "monitoredParticipantId": {
                    "type": "string",
                    "description": "If this participant is a monitor, then this will be the id of the participant that is being monitored."
                },
                "coachedParticipantId": {
                    "type": "string",
                    "description": "If this participant is a coach, then this will be the id of the participant that is being coached."
                },
                "bargedParticipantId": {
                    "type": "string",
                    "description": "If this participant created a barge in conference, then this will be the id of the participant that is barged in."
                },
                "mediaRoles": {
                    "type": "array",
                    "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc.",
                    "items": {
                        "type": "string"
                    }
                },
                "screenRecordingState": {
                    "type": "string",
                    "description": "The current screen recording state for this participant.",
                    "enum": [
                        "requested",
                        "active",
                        "paused",
                        "stopped",
                        "error",
                        "timeout"
                    ]
                },
                "flaggedReason": {
                    "type": "string",
                    "description": "If this participant has flagged the conversation, the reason code given."
                },
                "attributes": {
                    "type": "object",
                    "description": "Additional participant attributes",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "calls": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicCall"
                    }
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicCallback"
                    }
                },
                "chats": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicChat"
                    }
                },
                "cobrowsesessions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicCobrowse"
                    }
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicEmail"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicMessage"
                    }
                },
                "screenshares": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicScreenshare"
                    }
                },
                "socialExpressions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicSocialExpression"
                    }
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicVideo"
                    }
                },
                "workflow": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicWorkflow"
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicInitiator": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Initiator",
            "description": "Fields identifying the initiator of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user who initiated the command if it was initiated by a user."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicModifiedBy": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:ModifiedBy",
            "description": "Fields identifying the entity that updated the command.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the user if the updater is an internal user."
                },
                "selfUri": {
                    "type": "string",
                    "description": "The URI for the user if the updater is an internal user."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicDestination": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Destination",
            "description": "Fields identifying the destination of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user if the command destination is a user."
                },
                "address": {
                    "type": "string",
                    "description": "The destination address if the command destination is an endpoint."
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicRecentTransfer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:RecentTransfer",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the command."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "active",
                        "complete",
                        "canceled",
                        "failed",
                        "timeout",
                        "unknown"
                    ]
                },
                "dateIssued": {
                    "type": "string",
                    "description": "The date/time that this command was issued.",
                    "format": "date-time"
                },
                "initiator": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicInitiator"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicModifiedBy"
                },
                "destination": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicDestination"
                },
                "transferType": {
                    "type": "string",
                    "description": "The type of transfer to perform.",
                    "enum": [
                        "attended",
                        "unattended"
                    ]
                }
            }
        },
        "QueueConversationSocialExpressionEventTopicConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:social:expression:event:topic:v2:Conversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "maxParticipants": {
                    "type": "integer"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicParticipant"
                    }
                },
                "recentTransfers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationSocialExpressionEventTopicRecentTransfer"
                    }
                },
                "recordingState": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "securePause": {
                    "type": "boolean"
                }
            }
        },
        "QueueConversationVideoEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Wrapup",
            "description": "Call wrap up or disposition data.",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationVideoEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "QueueConversationVideoEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "QueueConversationVideoEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:ConversationRoutingData",
            "description": "Information on how a communication should be routed to an agent.",
            "properties": {
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicUriReference"
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicScoredAgent"
                    }
                }
            }
        },
        "QueueConversationVideoEventTopicErrorDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:ErrorDetails",
            "description": "Detailed information about an error response.",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message (400, 401, 403, 404, 500, etc."
                },
                "code": {
                    "type": "string",
                    "description": "A code unique to this error."
                },
                "message": {
                    "type": "string",
                    "description": "Friendly description of this error."
                },
                "messageWithParams": {
                    "type": "string",
                    "description": "This is the same as message except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "messageParams": {
                    "type": "object",
                    "description": "Used in conjunction with messageWithParams. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'john.doe'",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "QueueConversationVideoEventTopicAddress": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Address",
            "description": "Address and name data for a call endpoint.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "This will be nameRaw if present, or a locality lookup of the address field otherwise."
                },
                "nameRaw": {
                    "type": "string",
                    "description": "The name as close to the bits on the wire as possible."
                },
                "addressNormalized": {
                    "type": "string",
                    "description": "The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                },
                "addressRaw": {
                    "type": "string",
                    "description": "The address as close to the bits on the wire as possible."
                },
                "addressDisplayable": {
                    "type": "string",
                    "description": "The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                }
            }
        },
        "QueueConversationVideoEventTopicDisconnectReason": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:DisconnectReason",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Disconnect reason protocol type.",
                    "enum": [
                        "q850",
                        "sip"
                    ]
                },
                "code": {
                    "type": "integer",
                    "description": "Protocol specific reason code. See the Q.850 and SIP specs."
                },
                "phrase": {
                    "type": "string",
                    "description": "Human readable English description of the disconnect reason."
                }
            }
        },
        "QueueConversationVideoEventTopicFaxStatus": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:FaxStatus",
            "description": "Extra information on fax transmission.",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The fax direction, either \"send\" or \"receive\"."
                },
                "expectedPages": {
                    "type": "integer",
                    "description": "Total number of expected pages, if known."
                },
                "activePage": {
                    "type": "integer",
                    "description": "Active page of the transmission."
                },
                "linesTransmitted": {
                    "type": "integer",
                    "description": "Number of lines that have completed transmission."
                },
                "bytesTransmitted": {
                    "type": "integer",
                    "description": "Number of bytes that have competed transmission."
                },
                "baudRate": {
                    "type": "integer",
                    "description": "Current signaling rate of transmission, baud rate."
                },
                "pageErrors": {
                    "type": "integer",
                    "description": "Number of page errors."
                },
                "lineErrors": {
                    "type": "integer",
                    "description": "Number of line errors."
                }
            }
        },
        "QueueConversationVideoEventTopicAfterCallWork": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:AfterCallWork",
            "description": "A communication's after-call work data.",
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The communication's after-call work state.",
                    "enum": [
                        "unknown",
                        "skipped",
                        "pending",
                        "complete",
                        "notApplicable"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The timestamp when this communication started after-call work in the cloud clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this communication ended after-call work in the cloud clock.",
                    "format": "date-time"
                }
            }
        },
        "QueueConversationVideoEventTopicCall": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Call",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "recording": {
                    "type": "boolean",
                    "description": "True if this call is being recorded."
                },
                "recordingState": {
                    "type": "string",
                    "description": "State of recording on this call.",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "muted": {
                    "type": "boolean",
                    "description": "True if this call is muted so that remote participants can't hear any audio from this end."
                },
                "confined": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears hold music."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "securePause": {
                    "type": "boolean",
                    "description": "True when the recording of this call is in secure pause status."
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicErrorDetails"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the call was placed on hold in the cloud clock if the call is currently on hold.",
                    "format": "date-time"
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a call is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "documentId": {
                    "type": "string",
                    "description": "If call is a fax of a document in content management, the id of the document in content management."
                },
                "self": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                },
                "other": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the call."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "disconnectReasons": {
                    "type": "array",
                    "description": "List of reasons that this call was disconnected. This will be set once the call disconnects.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicDisconnectReason"
                    }
                },
                "faxStatus": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicFaxStatus"
                },
                "uuiData": {
                    "type": "string",
                    "description": "User to User Information (UUI) data managed by SIP session application."
                },
                "bargedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the barge conference in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                }
            }
        },
        "QueueConversationVideoEventTopicPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:PhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "QueueConversationVideoEventTopicDialerPreview": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:DialerPreview",
            "description": "The preview data to be used when this callback is a Preview.",
            "properties": {
                "id": {
                    "type": "string"
                },
                "contactId": {
                    "type": "string",
                    "description": "The contact associated with this preview data pop"
                },
                "contactListId": {
                    "type": "string",
                    "description": "The contactList associated with this preview data pop."
                },
                "campaignId": {
                    "type": "string",
                    "description": "The campaignId associated with this preview data pop."
                },
                "phoneNumberColumns": {
                    "type": "array",
                    "description": "The phone number columns associated with this campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicPhoneNumberColumn"
                    }
                }
            }
        },
        "QueueConversationVideoEventTopicVoicemail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Voicemail",
            "description": "The voicemail data to be used when this callback is an ACD voicemail.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The voicemail id"
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "current state of the voicemail upload",
                    "enum": [
                        "pending",
                        "complete",
                        "failed",
                        "timeout",
                        "none"
                    ]
                }
            }
        },
        "QueueConversationVideoEventTopicCallback": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Callback",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the call",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold.",
                    "format": "date-time"
                },
                "dialerPreview": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicDialerPreview"
                },
                "voicemail": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicVoicemail"
                },
                "callbackNumbers": {
                    "type": "array",
                    "description": "The phone number(s) to use to place the callback.",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackUserName": {
                    "type": "string",
                    "description": "The name of the user requesting a callback."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "externalCampaign": {
                    "type": "boolean",
                    "description": "True if the call for the callback uses external dialing."
                },
                "skipEnabled": {
                    "type": "boolean",
                    "description": "True if the ability to skip a callback should be enabled."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the callback."
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "callbackScheduledTime": {
                    "type": "string",
                    "description": "The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately.",
                    "format": "date-time"
                },
                "automatedCallbackConfigId": {
                    "type": "string",
                    "description": "The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "callerId": {
                    "type": "string",
                    "description": "The phone number displayed to recipients of the phone call. The value should conform to the E164 format."
                },
                "callerIdName": {
                    "type": "string",
                    "description": "The name displayed to recipients of the phone call."
                }
            }
        },
        "QueueConversationVideoEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "QueueConversationVideoEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "QueueConversationVideoEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "QueueConversationVideoEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicJourneyActionMap"
                }
            }
        },
        "QueueConversationVideoEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:JourneyContext",
            "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicJourneyAction"
                }
            }
        },
        "QueueConversationVideoEventTopicChat": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Chat",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the chat."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "avatarImageUrl": {
                    "type": "string",
                    "description": "The avatar for the chat (if available)."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicJourneyContext"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationVideoEventTopicCobrowse": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Cobrowse",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                        }
                    ]
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "cobrowseSessionId": {
                    "type": "string",
                    "description": "The co-browse session ID."
                },
                "cobrowseRole": {
                    "type": "string",
                    "description": "This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer)."
                },
                "controlling": {
                    "type": "array",
                    "description": "ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).",
                    "items": {
                        "type": "string"
                    }
                },
                "viewerUrl": {
                    "type": "string",
                    "description": "The URL that can be used to open co-browse session in web browser."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the co-browse communication."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "providerEventTime": {
                    "type": "string",
                    "description": "The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC).",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationVideoEventTopicAttachment": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Attachment",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "The unique identifier for the attachment."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment."
                },
                "contentUri": {
                    "type": "string",
                    "description": "The content uri of the attachment. If set, this is commonly a public api download location."
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of file the attachment is."
                },
                "contentLength": {
                    "type": "integer",
                    "description": "The length of the attachment file."
                }
            }
        },
        "QueueConversationVideoEventTopicEmail": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Email",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Indicates that the email was auto-generated like an Out of Office reply."
                },
                "subject": {
                    "type": "string",
                    "description": "The subject for the initial email that started this conversation."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "messagesSent": {
                    "type": "integer",
                    "description": "The number of email messages sent by this participant."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicErrorDetails"
                        }
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "messageId": {
                    "type": "string",
                    "description": "A globally unique identifier for the stored content of this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "Whether an email is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "draftAttachments": {
                    "type": "array",
                    "description": "A list of uploaded attachments on the email draft.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicAttachment"
                    }
                },
                "spam": {
                    "type": "boolean",
                    "description": "Indicates if the inbound email was marked as spam."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationVideoEventTopicMessageMedia": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:MessageMedia",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the media, useful for retrieving it"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url"
                },
                "contentLengthBytes": {
                    "type": "integer",
                    "description": "The optional content length of the the media object, in bytes."
                },
                "name": {
                    "type": "string",
                    "description": "The optional name of the the media object."
                },
                "id": {
                    "type": "string",
                    "description": "The optional id of the the media object."
                }
            }
        },
        "QueueConversationVideoEventTopicMessageSticker": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:MessageSticker",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the sticker, useful for retrieving it"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the the sticker object."
                }
            }
        },
        "QueueConversationVideoEventTopicMessageMetadataEvent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:MessageMetadataEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Type of this event element."
                },
                "subType": {
                    "type": "string",
                    "description": "Event subtype, if any"
                }
            }
        },
        "QueueConversationVideoEventTopicMessageMetadataContent": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:MessageMetadataContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Type of this content element."
                },
                "subType": {
                    "type": "string",
                    "description": "Content subtype, if any"
                }
            }
        },
        "QueueConversationVideoEventTopicMessageMetadata": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:MessageMetadata",
            "description": "Metadata information about a message.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Message type."
                },
                "events": {
                    "type": "array",
                    "description": "List of message events, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicMessageMetadataEvent"
                    }
                },
                "content": {
                    "type": "array",
                    "description": "List of message content, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicMessageMetadataContent"
                    }
                }
            }
        },
        "QueueConversationVideoEventTopicMessageDetails": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:MessageDetails",
            "properties": {
                "messageId": {
                    "type": "string",
                    "description": "UUID identifying the message media."
                },
                "messageTime": {
                    "type": "string",
                    "description": "The time when the message was sent or received.",
                    "format": "date-time"
                },
                "messageStatus": {
                    "type": "string",
                    "description": "Indicates the delivery status of the message.",
                    "enum": [
                        "queued",
                        "sent",
                        "failed",
                        "received",
                        "delivery-success",
                        "delivery-failed",
                        "read",
                        "removed"
                    ]
                },
                "messageSegmentCount": {
                    "type": "integer",
                    "description": "The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits."
                },
                "media": {
                    "type": "array",
                    "description": "The media (images, files, etc) associated with this message, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicMessageMedia"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicErrorDetails"
                        }
                    ]
                },
                "stickers": {
                    "type": "array",
                    "description": "A list of stickers included in the message",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicMessageSticker"
                    }
                },
                "messageMetadata": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicMessageMetadata"
                }
            }
        },
        "QueueConversationVideoEventTopicMessage": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Message",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a message is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicErrorDetails"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "toAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                        }
                    ]
                },
                "fromAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                        }
                    ]
                },
                "messages": {
                    "type": "array",
                    "description": "The messages sent on this communication channel.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicMessageDetails"
                    }
                },
                "messagesTranscriptUri": {
                    "type": "string",
                    "description": "the messages transcript file uri."
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the type of message platform from which the message originated.",
                    "enum": [
                        "unknown",
                        "sms",
                        "twitter",
                        "facebook",
                        "line",
                        "viber",
                        "wechat",
                        "whatsapp",
                        "telegram",
                        "kakao",
                        "webmessaging",
                        "open",
                        "instagram"
                    ]
                },
                "recipientCountry": {
                    "type": "string",
                    "description": "Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format."
                },
                "recipientType": {
                    "type": "string",
                    "description": "The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type."
                },
                "journeyContext": {
                    "type": "object",
                    "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicJourneyContext"
                        }
                    ]
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                },
                "byoSmsIntegrationId": {
                    "type": "string"
                }
            }
        },
        "QueueConversationVideoEventTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Object",
            "description": "The number of peer participants from the perspective of the participant in the conference."
        },
        "QueueConversationVideoEventTopicScreenshare": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Screenshare",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "sharing": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the screen share."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "peerCount": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicObject"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationVideoEventTopicSocialExpression": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:SocialExpression",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "socialMediaId": {
                    "type": "string",
                    "description": "A globally unique identifier for the social media."
                },
                "socialMediaHub": {
                    "type": "string",
                    "description": "The social network of the communication"
                },
                "socialUserName": {
                    "type": "string",
                    "description": "The social media user name of the communication"
                },
                "previewText": {
                    "type": "string",
                    "description": "The text preview of the communication contents"
                },
                "recordingId": {
                    "type": "string",
                    "description": "A globally unique identifier for the recording associated with this chat."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the social expression."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationVideoEventTopicVideo": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Video",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "audioMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted their outgoing audio."
                },
                "videoMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted/paused their outgoing video."
                },
                "sharingScreen": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "peerCount": {
                    "type": "object",
                    "description": "The number of peer participants from the perspective of the participant in the conference.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicObject"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The media provider controlling the video."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "msids": {
                    "type": "array",
                    "description": "List of media stream ids",
                    "items": {
                        "type": "string"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/QueueConversationVideoEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "QueueConversationVideoEventTopicWorkflow": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Workflow",
            "description": "Information about the workflow.",
            "properties": {
                "workflowId": {
                    "type": "string",
                    "description": "The id of the workflow"
                }
            }
        },
        "QueueConversationVideoEventTopicParticipant": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Participant",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this conversation."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the conversation in the provider clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this participant disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "userId": {
                    "type": "string",
                    "description": "If this participant represents a user, then this will be the globally unique identifier for the user."
                },
                "externalContactId": {
                    "type": "string",
                    "description": "If this participant represents an external contact, then this will be the globally unique identifier for the external contact."
                },
                "externalOrganizationId": {
                    "type": "string",
                    "description": "If this participant represents an external org, then this will be the globally unique identifier for the external org."
                },
                "name": {
                    "type": "string",
                    "description": "A human readable name identifying the participant."
                },
                "queueId": {
                    "type": "string",
                    "description": "If present, the queue id that the communication channel came in on."
                },
                "groupId": {
                    "type": "string",
                    "description": "If present, the group id that the participant represents."
                },
                "teamId": {
                    "type": "string",
                    "description": "The team id that this participant is a member of when added to the conversation."
                },
                "purpose": {
                    "type": "string",
                    "description": "A well known string that specifies the purpose or type of this participant."
                },
                "consultParticipantId": {
                    "type": "string",
                    "description": "If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred."
                },
                "address": {
                    "type": "string",
                    "description": "The address for the this participant. For a phone call this will be the ANI."
                },
                "wrapupRequired": {
                    "type": "boolean",
                    "description": "True iff this participant is required to enter wrapup for this conversation."
                },
                "wrapupExpected": {
                    "type": "boolean",
                    "description": "True when a participant is expected to enter a wrapup code once the call connects."
                },
                "wrapupPrompt": {
                    "type": "string",
                    "description": "This field controls how the UI prompts the agent for a wrapup."
                },
                "wrapupTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long a timed ACW session will last."
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicWrapup"
                },
                "startAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant started after-call work.",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant ended after-call work.",
                    "format": "date-time"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicConversationRoutingData"
                },
                "alertingTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long the agent has to answer an interaction before being marked as not responding."
                },
                "monitoredParticipantId": {
                    "type": "string",
                    "description": "If this participant is a monitor, then this will be the id of the participant that is being monitored."
                },
                "coachedParticipantId": {
                    "type": "string",
                    "description": "If this participant is a coach, then this will be the id of the participant that is being coached."
                },
                "bargedParticipantId": {
                    "type": "string",
                    "description": "If this participant created a barge in conference, then this will be the id of the participant that is barged in."
                },
                "mediaRoles": {
                    "type": "array",
                    "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc.",
                    "items": {
                        "type": "string"
                    }
                },
                "screenRecordingState": {
                    "type": "string",
                    "description": "The current screen recording state for this participant.",
                    "enum": [
                        "requested",
                        "active",
                        "paused",
                        "stopped",
                        "error",
                        "timeout"
                    ]
                },
                "flaggedReason": {
                    "type": "string",
                    "description": "If this participant has flagged the conversation, the reason code given."
                },
                "attributes": {
                    "type": "object",
                    "description": "Additional participant attributes",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "calls": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicCall"
                    }
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicCallback"
                    }
                },
                "chats": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicChat"
                    }
                },
                "cobrowsesessions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicCobrowse"
                    }
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicEmail"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicMessage"
                    }
                },
                "screenshares": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicScreenshare"
                    }
                },
                "socialExpressions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicSocialExpression"
                    }
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicVideo"
                    }
                },
                "workflow": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicWorkflow"
                }
            }
        },
        "QueueConversationVideoEventTopicInitiator": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Initiator",
            "description": "Fields identifying the initiator of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user who initiated the command if it was initiated by a user."
                }
            }
        },
        "QueueConversationVideoEventTopicModifiedBy": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:ModifiedBy",
            "description": "Fields identifying the entity that updated the command.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the user if the updater is an internal user."
                },
                "selfUri": {
                    "type": "string",
                    "description": "The URI for the user if the updater is an internal user."
                }
            }
        },
        "QueueConversationVideoEventTopicDestination": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Destination",
            "description": "Fields identifying the destination of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user if the command destination is a user."
                },
                "address": {
                    "type": "string",
                    "description": "The destination address if the command destination is an endpoint."
                }
            }
        },
        "QueueConversationVideoEventTopicRecentTransfer": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:RecentTransfer",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the command."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "active",
                        "complete",
                        "canceled",
                        "failed",
                        "timeout",
                        "unknown"
                    ]
                },
                "dateIssued": {
                    "type": "string",
                    "description": "The date/time that this command was issued.",
                    "format": "date-time"
                },
                "initiator": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicInitiator"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicModifiedBy"
                },
                "destination": {
                    "type": "object",
                    "$ref": "#/definitions/QueueConversationVideoEventTopicDestination"
                },
                "transferType": {
                    "type": "string",
                    "description": "The type of transfer to perform.",
                    "enum": [
                        "attended",
                        "unattended"
                    ]
                }
            }
        },
        "QueueConversationVideoEventTopicConversation": {
            "type": "object",
            "id": "urn:jsonschema:queue:conversation:video:event:topic:v2:Conversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "maxParticipants": {
                    "type": "integer"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicParticipant"
                    }
                },
                "recentTransfers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/QueueConversationVideoEventTopicRecentTransfer"
                    }
                },
                "recordingState": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "securePause": {
                    "type": "boolean"
                }
            }
        },
        "QueueUserEventTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:queue:user:event:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "QueueUserEventTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:queue:user:event:topic:v2:Object"
        },
        "QueueUserEventTopicQueueMember": {
            "type": "object",
            "id": "urn:jsonschema:queue:user:event:topic:v2:QueueMember",
            "properties": {
                "id": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/QueueUserEventTopicUserReference"
                },
                "queueId": {
                    "type": "string"
                },
                "joined": {
                    "type": "boolean"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/QueueUserEventTopicObject"
                    }
                }
            }
        },
        "CreateGeneralProgramTopicsDefinitionsJob": {
            "type": "object",
            "id": "urn:jsonschema:create:general:program:TopicsDefinitionsJob",
            "properties": {
                "id": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Completed",
                        "Failed"
                    ]
                }
            }
        },
        "PublishProgramTopicsDefinitionsJob": {
            "type": "object",
            "id": "urn:jsonschema:publish:program:TopicsDefinitionsJob",
            "properties": {
                "id": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Completed",
                        "Failed"
                    ]
                }
            }
        },
        "PublishTopicTopicsDefinitionsJob": {
            "type": "object",
            "id": "urn:jsonschema:publish:topic:TopicsDefinitionsJob",
            "properties": {
                "id": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Completed",
                        "Failed"
                    ]
                }
            }
        },
        "SystemMessageObject": {
            "type": "object",
            "id": "urn:jsonschema:system:message:Object"
        },
        "SystemMessageSystemMessage": {
            "type": "object",
            "id": "urn:jsonschema:system:message:SystemMessage",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "systemTopicType": {
                    "type": "string",
                    "enum": [
                        "no_longer_subscribed",
                        "subscription_changed",
                        "token_revoked"
                    ]
                },
                "correlationId": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "oauthClientId": {
                    "type": "string"
                },
                "reason": {
                    "type": "string",
                    "enum": [
                        "another_channel_subscribed",
                        "user_tokens_revoked"
                    ]
                },
                "message": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/SystemMessageObject"
                    }
                }
            }
        },
        "WorkitemsQueueEventsNotificationDelta": {
            "type": "object",
            "id": "urn:jsonschema:workitems:queue:events:notification:Delta",
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace",
                        "unknown"
                    ]
                },
                "field": {
                    "type": "string"
                },
                "oldValue": {
                    "type": "string"
                },
                "newValue": {
                    "type": "string"
                }
            }
        },
        "WorkitemsQueueEventsNotificationCustomAttribute": {
            "type": "object",
            "id": "urn:jsonschema:workitems:queue:events:notification:CustomAttribute",
            "properties": {
                "dataType": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "string",
                        "number",
                        "boolean$",
                        "integer"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "WorkitemsQueueEventsNotificationWrapup": {
            "type": "object",
            "id": "urn:jsonschema:workitems:queue:events:notification:Wrapup",
            "properties": {
                "code": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "op": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove"
                    ]
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove"
                    ]
                }
            }
        },
        "WorkitemsQueueEventsNotificationWorkitem": {
            "type": "object",
            "id": "urn:jsonschema:workitems:queue:events:notification:Workitem",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "typeId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "languageId": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dateDue": {
                    "type": "string"
                },
                "dateExpires": {
                    "type": "string"
                },
                "dateAssignmentStateChanged": {
                    "type": "string"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "integer"
                },
                "statusId": {
                    "type": "string"
                },
                "statusCategory": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Open",
                        "InProgress",
                        "Waiting",
                        "Closed"
                    ]
                },
                "dateClosed": {
                    "type": "string"
                },
                "workbinId": {
                    "type": "string"
                },
                "reporterId": {
                    "type": "string"
                },
                "assigneeId": {
                    "type": "string"
                },
                "externalContactId": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "wrapupId": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "add",
                        "edit",
                        "delete",
                        "view",
                        "upload",
                        "download",
                        "activate",
                        "deactivate",
                        "purge",
                        "processed",
                        "published",
                        "assigned",
                        "unassigned",
                        "reset",
                        "reassigned",
                        "reassign",
                        "archive",
                        "unarchive",
                        "reschedule"
                    ]
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WorkitemsQueueEventsNotificationDelta"
                    }
                },
                "assignmentState": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Idle",
                        "AcdStarted",
                        "Alerting",
                        "AlertTimeout",
                        "Declined",
                        "Connected",
                        "Disconnected",
                        "Parked",
                        "Held",
                        "AcdCancelled",
                        "Terminated",
                        "AcdExpired"
                    ]
                },
                "assignmentId": {
                    "type": "string"
                },
                "alertTimeoutSeconds": {
                    "type": "integer"
                },
                "queueId": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/WorkitemsQueueEventsNotificationCustomAttribute"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/WorkitemsQueueEventsNotificationWrapup"
                }
            }
        },
        "WorkitemsUserEventsNotificationDelta": {
            "type": "object",
            "id": "urn:jsonschema:workitems:user:events:notification:Delta",
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace",
                        "unknown"
                    ]
                },
                "field": {
                    "type": "string"
                },
                "oldValue": {
                    "type": "string"
                },
                "newValue": {
                    "type": "string"
                }
            }
        },
        "WorkitemsUserEventsNotificationCustomAttribute": {
            "type": "object",
            "id": "urn:jsonschema:workitems:user:events:notification:CustomAttribute",
            "properties": {
                "dataType": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "string",
                        "number",
                        "boolean$",
                        "integer"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "WorkitemsUserEventsNotificationWrapup": {
            "type": "object",
            "id": "urn:jsonschema:workitems:user:events:notification:Wrapup",
            "properties": {
                "code": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "op": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove"
                    ]
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove"
                    ]
                }
            }
        },
        "WorkitemsUserEventsNotificationWorkitem": {
            "type": "object",
            "id": "urn:jsonschema:workitems:user:events:notification:Workitem",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "typeId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "languageId": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dateDue": {
                    "type": "string"
                },
                "dateExpires": {
                    "type": "string"
                },
                "dateAssignmentStateChanged": {
                    "type": "string"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "integer"
                },
                "statusId": {
                    "type": "string"
                },
                "statusCategory": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Open",
                        "InProgress",
                        "Waiting",
                        "Closed"
                    ]
                },
                "dateClosed": {
                    "type": "string"
                },
                "workbinId": {
                    "type": "string"
                },
                "reporterId": {
                    "type": "string"
                },
                "assigneeId": {
                    "type": "string"
                },
                "externalContactId": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "wrapupId": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "add",
                        "edit",
                        "delete",
                        "view",
                        "upload",
                        "download",
                        "activate",
                        "deactivate",
                        "purge",
                        "processed",
                        "published",
                        "assigned",
                        "unassigned",
                        "reset",
                        "reassigned",
                        "reassign",
                        "archive",
                        "unarchive",
                        "reschedule"
                    ]
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WorkitemsUserEventsNotificationDelta"
                    }
                },
                "assignmentState": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Idle",
                        "AcdStarted",
                        "Alerting",
                        "AlertTimeout",
                        "Declined",
                        "Connected",
                        "Disconnected",
                        "Parked",
                        "Held",
                        "AcdCancelled",
                        "Terminated",
                        "AcdExpired"
                    ]
                },
                "assignmentId": {
                    "type": "string"
                },
                "alertTimeoutSeconds": {
                    "type": "integer"
                },
                "queueId": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/WorkitemsUserEventsNotificationCustomAttribute"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/WorkitemsUserEventsNotificationWrapup"
                }
            }
        },
        "WorkitemsEventsNotificationDelta": {
            "type": "object",
            "id": "urn:jsonschema:workitems:events:notification:Delta",
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace",
                        "unknown"
                    ]
                },
                "field": {
                    "type": "string"
                },
                "oldValue": {
                    "type": "string"
                },
                "newValue": {
                    "type": "string"
                }
            }
        },
        "WorkitemsEventsNotificationCustomAttribute": {
            "type": "object",
            "id": "urn:jsonschema:workitems:events:notification:CustomAttribute",
            "properties": {
                "dataType": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "string",
                        "number",
                        "boolean$",
                        "integer"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "WorkitemsEventsNotificationWrapup": {
            "type": "object",
            "id": "urn:jsonschema:workitems:events:notification:Wrapup",
            "properties": {
                "code": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "op": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove"
                    ]
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove"
                    ]
                }
            }
        },
        "WorkitemsEventsNotificationWorkitem": {
            "type": "object",
            "id": "urn:jsonschema:workitems:events:notification:Workitem",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "typeId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "languageId": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "dateDue": {
                    "type": "string"
                },
                "dateExpires": {
                    "type": "string"
                },
                "dateAssignmentStateChanged": {
                    "type": "string"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "integer"
                },
                "statusId": {
                    "type": "string"
                },
                "statusCategory": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Open",
                        "InProgress",
                        "Waiting",
                        "Closed"
                    ]
                },
                "dateClosed": {
                    "type": "string"
                },
                "workbinId": {
                    "type": "string"
                },
                "reporterId": {
                    "type": "string"
                },
                "assigneeId": {
                    "type": "string"
                },
                "externalContactId": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "wrapupId": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "add",
                        "edit",
                        "delete",
                        "view",
                        "upload",
                        "download",
                        "activate",
                        "deactivate",
                        "purge",
                        "processed",
                        "published",
                        "assigned",
                        "unassigned",
                        "reset",
                        "reassigned",
                        "reassign",
                        "archive",
                        "unarchive",
                        "reschedule"
                    ]
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WorkitemsEventsNotificationDelta"
                    }
                },
                "assignmentState": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Idle",
                        "AcdStarted",
                        "Alerting",
                        "AlertTimeout",
                        "Declined",
                        "Connected",
                        "Disconnected",
                        "Parked",
                        "Held",
                        "AcdCancelled",
                        "Terminated",
                        "AcdExpired"
                    ]
                },
                "assignmentId": {
                    "type": "string"
                },
                "alertTimeoutSeconds": {
                    "type": "integer"
                },
                "queueId": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/WorkitemsEventsNotificationCustomAttribute"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/WorkitemsEventsNotificationWrapup"
                }
            }
        },
        "PhoneChangeTopicUserAgentInfo": {
            "type": "object",
            "id": "urn:jsonschema:phone:change:topic:v2:UserAgentInfo",
            "properties": {
                "firmwareVersion": {
                    "type": "string"
                },
                "manufacturer": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                }
            }
        },
        "PhoneChangeTopicEdgeReference": {
            "type": "object",
            "id": "urn:jsonschema:phone:change:topic:v2:EdgeReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "selfUri": {
                    "type": "string"
                }
            }
        },
        "PhoneChangeTopicProvisionInfo": {
            "type": "object",
            "id": "urn:jsonschema:phone:change:topic:v2:ProvisionInfo",
            "properties": {
                "time": {
                    "type": "string",
                    "format": "date-time"
                },
                "source": {
                    "type": "string"
                },
                "errorInfo": {
                    "type": "string"
                }
            }
        },
        "PhoneChangeTopicLineStatus": {
            "type": "object",
            "id": "urn:jsonschema:phone:change:topic:v2:LineStatus",
            "properties": {
                "id": {
                    "type": "string"
                },
                "reachable": {
                    "type": "boolean"
                },
                "addressOfRecord": {
                    "type": "string"
                },
                "contactAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "reachableStateTime": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "PhoneChangeTopicPhoneStatus": {
            "type": "object",
            "id": "urn:jsonschema:phone:change:topic:v2:PhoneStatus",
            "properties": {
                "id": {
                    "type": "string"
                },
                "operationalStatus": {
                    "type": "string",
                    "enum": [
                        "OPERATIONAL",
                        "DEGRADED",
                        "OFFLINE"
                    ]
                },
                "edge": {
                    "type": "object",
                    "$ref": "#/definitions/PhoneChangeTopicEdgeReference"
                },
                "provision": {
                    "type": "object",
                    "$ref": "#/definitions/PhoneChangeTopicProvisionInfo"
                },
                "lineStatuses": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/PhoneChangeTopicLineStatus"
                    }
                },
                "eventCreationTime": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "PhoneChangeTopicPhone": {
            "type": "object",
            "id": "urn:jsonschema:phone:change:topic:v2:Phone",
            "properties": {
                "userAgentInfo": {
                    "type": "object",
                    "$ref": "#/definitions/PhoneChangeTopicUserAgentInfo"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "object",
                    "$ref": "#/definitions/PhoneChangeTopicPhoneStatus"
                },
                "secondaryStatus": {
                    "type": "object",
                    "$ref": "#/definitions/PhoneChangeTopicPhoneStatus"
                }
            }
        },
        "TrunkInstanceTopicTrunkConnectedStatus": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:TrunkConnectedStatus",
            "properties": {
                "connected": {
                    "type": "boolean"
                },
                "connectedStateTime": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "TrunkInstanceTopicTrunkErrorInfoDetails": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:TrunkErrorInfoDetails",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                }
            }
        },
        "TrunkInstanceTopicTrunkErrorInfo": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:TrunkErrorInfo",
            "properties": {
                "text": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkInstanceTopicTrunkErrorInfoDetails"
                }
            }
        },
        "TrunkInstanceTopicTrunkMetricsOptions": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:TrunkMetricsOptions",
            "properties": {
                "proxyAddress": {
                    "type": "string"
                },
                "optionState": {
                    "type": "boolean"
                },
                "optionStateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkInstanceTopicTrunkErrorInfo"
                }
            }
        },
        "TrunkInstanceTopicTrunkMetricsRegisters": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:TrunkMetricsRegisters",
            "properties": {
                "proxyAddress": {
                    "type": "string"
                },
                "registerState": {
                    "type": "boolean"
                },
                "registerStateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkInstanceTopicTrunkErrorInfo"
                }
            }
        },
        "TrunkInstanceTopicTrunkMetricsNetworkTypeIp": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:TrunkMetricsNetworkTypeIp",
            "properties": {
                "address": {
                    "type": "string"
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkInstanceTopicTrunkErrorInfo"
                }
            }
        },
        "TrunkInstanceTopicTrunk": {
            "type": "object",
            "id": "urn:jsonschema:trunk:instance:topic:Trunk",
            "properties": {
                "id": {
                    "type": "string"
                },
                "connectedStatus": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkInstanceTopicTrunkConnectedStatus"
                },
                "optionsStatus": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/TrunkInstanceTopicTrunkMetricsOptions"
                    }
                },
                "registersStatus": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/TrunkInstanceTopicTrunkMetricsRegisters"
                    }
                },
                "ipStatus": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkInstanceTopicTrunkMetricsNetworkTypeIp"
                }
            }
        },
        "TrunkMetricsTopicTrunkMetricsCalls": {
            "type": "object",
            "id": "urn:jsonschema:trunk:metrics:topic:TrunkMetricsCalls",
            "properties": {
                "inboundCallCount": {
                    "type": "integer"
                },
                "outboundCallCount": {
                    "type": "integer"
                }
            }
        },
        "TrunkMetricsTopicTrunkMetricsQoS": {
            "type": "object",
            "id": "urn:jsonschema:trunk:metrics:topic:TrunkMetricsQoS",
            "properties": {
                "mismatchCount": {
                    "type": "integer"
                }
            }
        },
        "TrunkMetricsTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:trunk:metrics:topic:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "TrunkMetricsTopicTrunkMetrics": {
            "type": "object",
            "id": "urn:jsonschema:trunk:metrics:topic:TrunkMetrics",
            "properties": {
                "calls": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkMetricsTopicTrunkMetricsCalls"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "qos": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkMetricsTopicTrunkMetricsQoS"
                },
                "trunk": {
                    "type": "object",
                    "$ref": "#/definitions/TrunkMetricsTopicUriReference"
                }
            }
        },
        "EdgeChangeTopicEdge": {
            "type": "object",
            "id": "urn:jsonschema:edge:change:topic:v2:Edge",
            "properties": {
                "id": {
                    "type": "string"
                },
                "onlineStatus": {
                    "type": "string",
                    "enum": [
                        "ONLINE",
                        "OFFLINE"
                    ]
                }
            }
        },
        "EdgeLogicalInterfacesChangeTopicErrorInfo": {
            "type": "object",
            "id": "urn:jsonschema:edge:logical:interfaces:change:topic:v2:ErrorInfo",
            "properties": {
                "message": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "code": {
                    "type": "string"
                }
            }
        },
        "EdgeLogicalInterfacesChangeTopicDomainLogicalInterfaceChange": {
            "type": "object",
            "id": "urn:jsonschema:edge:logical:interfaces:change:topic:v2:DomainLogicalInterfaceChange",
            "properties": {
                "id": {
                    "type": "string"
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/EdgeLogicalInterfacesChangeTopicErrorInfo"
                }
            }
        },
        "EdgeMetricsTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetricProcessor": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetricProcessor",
            "properties": {
                "cpuId": {
                    "type": "string"
                },
                "idleTimePct": {
                    "type": "integer"
                },
                "activeTimePct": {
                    "type": "integer"
                },
                "privilegedTimePct": {
                    "type": "integer"
                },
                "userTimePct": {
                    "type": "integer"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetricMemory": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetricMemory",
            "properties": {
                "type": {
                    "type": "string"
                },
                "availableBytes": {
                    "type": "integer"
                },
                "totalBytes": {
                    "type": "integer"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetricDisk": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetricDisk",
            "properties": {
                "partitionName": {
                    "type": "string"
                },
                "availableBytes": {
                    "type": "integer"
                },
                "totalBytes": {
                    "type": "integer"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetricSubsystemMedia": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetricSubsystemMedia",
            "properties": {
                "processName": {
                    "type": "string"
                },
                "delayMs": {
                    "type": "integer"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetricSubsystem": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetricSubsystem",
            "properties": {
                "processName": {
                    "type": "string"
                },
                "delayMs": {
                    "type": "integer"
                },
                "mediaSubsystem": {
                    "type": "object",
                    "$ref": "#/definitions/EdgeMetricsTopicEdgeMetricSubsystemMedia"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetricNetworks": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetricNetworks",
            "properties": {
                "ifname": {
                    "type": "string"
                },
                "sentBytesPerSec": {
                    "type": "integer"
                },
                "receivedBytesPerSec": {
                    "type": "integer"
                },
                "bandwidthBitsPerSec": {
                    "type": "integer"
                },
                "utilizationPct": {
                    "type": "number"
                }
            }
        },
        "EdgeMetricsTopicEdgeMetrics": {
            "type": "object",
            "id": "urn:jsonschema:edge:metrics:topic:EdgeMetrics",
            "properties": {
                "edge": {
                    "type": "object",
                    "$ref": "#/definitions/EdgeMetricsTopicUriReference"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "upTimeMsec": {
                    "type": "integer"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/EdgeMetricsTopicEdgeMetricProcessor"
                    }
                },
                "memory": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/EdgeMetricsTopicEdgeMetricMemory"
                    }
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/EdgeMetricsTopicEdgeMetricDisk"
                    }
                },
                "subsystems": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/EdgeMetricsTopicEdgeMetricSubsystem"
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/EdgeMetricsTopicEdgeMetricNetworks"
                    }
                }
            }
        },
        "EdgeSoftwareUpdateTopicDomainEdgeSoftwareUpdate": {
            "type": "object",
            "id": "urn:jsonschema:edge:software:update:topic:v2:DomainEdgeSoftwareUpdate",
            "properties": {
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NONE",
                        "INIT",
                        "IN_PROGRESS",
                        "EXPIRED",
                        "EXCEPTION",
                        "ABORTED",
                        "FAILED",
                        "SUCCEEDED",
                        "DELETE"
                    ]
                },
                "downloadStartTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "executeStartTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "executeStopTime": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "AgentActivityChangedTopicRoutingStatus": {
            "type": "object",
            "id": "urn:jsonschema:agent:activity:changed:topic:RoutingStatus",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Indicates the Routing State of the agent.",
                    "enum": [
                        "OFF_QUEUE",
                        "IDLE",
                        "INTERACTING",
                        "NOT_RESPONDING",
                        "COMMUNICATING"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The timestamp when the agent went into this state.",
                    "format": "date-time"
                }
            }
        },
        "AgentActivityChangedTopicOrganizationPresence": {
            "type": "object",
            "id": "urn:jsonschema:agent:activity:changed:topic:OrganizationPresence",
            "properties": {
                "id": {
                    "type": "string"
                },
                "systemPresence": {
                    "type": "string"
                }
            }
        },
        "AgentActivityChangedTopicPresence": {
            "type": "object",
            "id": "urn:jsonschema:agent:activity:changed:topic:Presence",
            "properties": {
                "presenceDefinition": {
                    "type": "object",
                    "$ref": "#/definitions/AgentActivityChangedTopicOrganizationPresence"
                },
                "presenceMessage": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "AgentActivityChangedTopicOutOfOffice": {
            "type": "object",
            "id": "urn:jsonschema:agent:activity:changed:topic:OutOfOffice",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "AgentActivityChangedTopicAgentActivity": {
            "type": "object",
            "id": "urn:jsonschema:agent:activity:changed:topic:AgentActivity",
            "properties": {
                "id": {
                    "type": "string"
                },
                "routingStatus": {
                    "type": "object",
                    "$ref": "#/definitions/AgentActivityChangedTopicRoutingStatus"
                },
                "presence": {
                    "type": "object",
                    "$ref": "#/definitions/AgentActivityChangedTopicPresence"
                },
                "outOfOffice": {
                    "type": "object",
                    "$ref": "#/definitions/AgentActivityChangedTopicOutOfOffice"
                },
                "activeQueueIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dateActiveQueuesChanged": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "V2MobiusAlertsTopicAlertRuleProperties": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:AlertRuleProperties",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "ConversationMetrics",
                        "UserPresence",
                        "WorkforceManagement",
                        "Unknown"
                    ]
                }
            }
        },
        "V2MobiusAlertsTopicAlertNotification": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:AlertNotification",
            "properties": {
                "recipient": {
                    "type": "string"
                },
                "notificationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Device",
                            "Email",
                            "Sms",
                            "Unknown"
                        ]
                    }
                }
            }
        },
        "V2MobiusAlertsTopicEntityProperties": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:EntityProperties",
            "properties": {
                "entityType": {
                    "type": "string",
                    "enum": [
                        "Organization",
                        "User",
                        "Queue",
                        "Group",
                        "Edge",
                        "Team",
                        "TeamMembers"
                    ]
                },
                "userDisplayName": {
                    "type": "string"
                },
                "groupDisplayName": {
                    "type": "string"
                },
                "queueDisplayName": {
                    "type": "string"
                },
                "teamDisplayName": {
                    "type": "string"
                }
            }
        },
        "V2MobiusAlertsTopicConditionRulePredicate": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:ConditionRulePredicate",
            "properties": {
                "entity": {
                    "type": "object",
                    "$ref": "#/definitions/V2MobiusAlertsTopicEntityProperties"
                },
                "metric": {
                    "type": "string"
                },
                "metricType": {
                    "type": "string",
                    "enum": [
                        "Interval",
                        "Instance",
                        "Unknown"
                    ]
                },
                "metricValueType": {
                    "type": "string",
                    "enum": [
                        "Count",
                        "Percentage",
                        "Average",
                        "Timer",
                        "Observation",
                        "Min",
                        "Max",
                        "Unknown"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "comparisonOperator": {
                    "type": "string",
                    "enum": [
                        "Gt",
                        "Gte",
                        "Lt",
                        "Lte",
                        "Eq",
                        "Ne",
                        "Unknown"
                    ]
                }
            }
        },
        "V2MobiusAlertsTopicCondition": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:Condition",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusAlertsTopicCondition"
                    }
                },
                "predicates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusAlertsTopicConditionRulePredicate"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "And",
                        "Or",
                        "Not",
                        "Unknown"
                    ]
                }
            }
        },
        "V2MobiusAlertsTopicAlertSummaryEntity": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:AlertSummaryEntity",
            "properties": {
                "entityType": {
                    "type": "string",
                    "enum": [
                        "Organization",
                        "User",
                        "Queue",
                        "Group",
                        "Edge",
                        "Team",
                        "TeamMembers"
                    ]
                },
                "userDisplayName": {
                    "type": "string"
                },
                "groupDisplayName": {
                    "type": "string"
                },
                "queueDisplayName": {
                    "type": "string"
                },
                "teamDisplayName": {
                    "type": "string"
                },
                "alerting": {
                    "type": "boolean"
                }
            }
        },
        "V2MobiusAlertsTopicAlertSummary": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:AlertSummary",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusAlertsTopicAlertSummaryEntity"
                    }
                },
                "conversationId": {
                    "type": "string",
                    "format": "uuid"
                },
                "metricType": {
                    "type": "string",
                    "enum": [
                        "Interval",
                        "Instance",
                        "Unknown"
                    ]
                },
                "isTeamMemberRuleSummary": {
                    "type": "boolean"
                },
                "teamMemberRuleSummary": {
                    "type": "boolean"
                }
            }
        },
        "V2MobiusAlertsTopicAlert": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:alerts:topic:Alert",
            "properties": {
                "rule": {
                    "type": "object",
                    "$ref": "#/definitions/V2MobiusAlertsTopicAlertRuleProperties"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusAlertsTopicAlertNotification"
                    }
                },
                "dateStart": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateEnd": {
                    "type": "string",
                    "format": "date-time"
                },
                "conditions": {
                    "type": "object",
                    "$ref": "#/definitions/V2MobiusAlertsTopicCondition"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "active": {
                    "type": "boolean"
                },
                "unread": {
                    "type": "boolean"
                },
                "muted": {
                    "type": "boolean"
                },
                "snoozed": {
                    "type": "boolean"
                },
                "dateMutedUntil": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateSnoozedUntil": {
                    "type": "string",
                    "format": "date-time"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "CREATE",
                        "UPDATE",
                        "DELETE",
                        "CLOSE",
                        "RENOTIFY"
                    ]
                },
                "alertSummary": {
                    "type": "object",
                    "$ref": "#/definitions/V2MobiusAlertsTopicAlertSummary"
                }
            }
        },
        "KlaxonHeartBeatAlertsTopicNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:heart:beat:alerts:topic:v2:NotificationUser",
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "KlaxonHeartBeatAlertsTopicHeartBeatAlert": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:heart:beat:alerts:topic:v2:HeartBeatAlert",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "heartBeatTimeoutInMinutes": {
                    "type": "number"
                },
                "ruleId": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "notificationUsers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/KlaxonHeartBeatAlertsTopicNotificationUser"
                    }
                },
                "alertTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SMS",
                            "DEVICE",
                            "EMAIL"
                        ]
                    }
                },
                "ruleType": {
                    "type": "string",
                    "enum": [
                        "EDGE"
                    ]
                }
            }
        },
        "KlaxonHeartBeatRulesTopicNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:heart:beat:rules:topic:v2:NotificationUser",
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "KlaxonHeartBeatRulesTopicHeartBeatRule": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:heart:beat:rules:topic:v2:HeartBeatRule",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "heartBeatTimeoutInMinutes": {
                    "type": "number"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inAlarm": {
                    "type": "boolean"
                },
                "notificationUsers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/KlaxonHeartBeatRulesTopicNotificationUser"
                    }
                },
                "alertTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SMS",
                            "DEVICE",
                            "EMAIL"
                        ]
                    }
                },
                "ruleType": {
                    "type": "string",
                    "enum": [
                        "EDGE"
                    ]
                }
            }
        },
        "KlaxonInteractionStatsAlertsTopicNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:interaction:stats:alerts:topic:v2:NotificationUser",
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "KlaxonInteractionStatsAlertsTopicInteractionStatAlert": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:interaction:stats:alerts:topic:v2:InteractionStatAlert",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ruleId": {
                    "type": "string"
                },
                "dimension": {
                    "type": "string",
                    "enum": [
                        "queueId",
                        "userId"
                    ]
                },
                "dimensionValue": {
                    "type": "string"
                },
                "dimensionValueName": {
                    "type": "string"
                },
                "metric": {
                    "type": "string",
                    "enum": [
                        "tAbandon",
                        "tAnswered",
                        "tTalk",
                        "nOffered",
                        "tHandle",
                        "nTransferred",
                        "oServiceLevel",
                        "tWait",
                        "tHeld",
                        "tAcw"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "voice",
                        "chat",
                        "email",
                        "callback",
                        "message"
                    ]
                },
                "numericRange": {
                    "type": "string",
                    "enum": [
                        "gt",
                        "gte",
                        "lt",
                        "lte",
                        "eq",
                        "ne"
                    ]
                },
                "statistic": {
                    "type": "string",
                    "enum": [
                        "count",
                        "min",
                        "ratio",
                        "max"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "unread": {
                    "type": "boolean"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "notificationUsers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/KlaxonInteractionStatsAlertsTopicNotificationUser"
                    }
                },
                "alertTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SMS",
                            "DEVICE",
                            "EMAIL"
                        ]
                    }
                }
            }
        },
        "KlaxonInteractionStatsRulesTopicNotificationUser": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:interaction:stats:rules:topic:v2:NotificationUser",
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "KlaxonInteractionStatsRulesTopicInteractionStatRule": {
            "type": "object",
            "id": "urn:jsonschema:klaxon:interaction:stats:rules:topic:v2:InteractionStatRule",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "dimension": {
                    "type": "string",
                    "enum": [
                        "queueId",
                        "userId"
                    ]
                },
                "dimensionValue": {
                    "type": "string"
                },
                "dimensionValueName": {
                    "type": "string"
                },
                "metric": {
                    "type": "string",
                    "enum": [
                        "tAbandon",
                        "tAnswered",
                        "tTalk",
                        "nOffered",
                        "tHandle",
                        "nTransferred",
                        "oServiceLevel",
                        "tWait",
                        "tHeld",
                        "tAcw"
                    ]
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "voice",
                        "chat",
                        "email",
                        "callback",
                        "message"
                    ]
                },
                "numericRange": {
                    "type": "string",
                    "enum": [
                        "gt",
                        "gte",
                        "lt",
                        "lte",
                        "eq",
                        "ne"
                    ]
                },
                "statistic": {
                    "type": "string",
                    "enum": [
                        "count",
                        "min",
                        "ratio",
                        "max"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "inAlarm": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "notificationUsers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/KlaxonInteractionStatsRulesTopicNotificationUser"
                    }
                },
                "alertTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SMS",
                            "DEVICE",
                            "EMAIL"
                        ]
                    }
                }
            }
        },
        "V2MobiusRulesTopicAlertNotification": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:rules:topic:AlertNotification",
            "properties": {
                "recipient": {
                    "type": "string"
                },
                "notificationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Device",
                            "Email",
                            "Sms",
                            "Unknown"
                        ]
                    }
                }
            }
        },
        "V2MobiusRulesTopicEntityProperties": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:rules:topic:EntityProperties",
            "properties": {
                "entityType": {
                    "type": "string",
                    "enum": [
                        "Organization",
                        "User",
                        "Queue",
                        "Group",
                        "Edge",
                        "Team",
                        "TeamMembers"
                    ]
                },
                "userDisplayName": {
                    "type": "string"
                },
                "groupDisplayName": {
                    "type": "string"
                },
                "queueDisplayName": {
                    "type": "string"
                },
                "teamDisplayName": {
                    "type": "string"
                }
            }
        },
        "V2MobiusRulesTopicConditionRulePredicate": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:rules:topic:ConditionRulePredicate",
            "properties": {
                "entity": {
                    "type": "object",
                    "$ref": "#/definitions/V2MobiusRulesTopicEntityProperties"
                },
                "metric": {
                    "type": "string"
                },
                "metricType": {
                    "type": "string",
                    "enum": [
                        "Interval",
                        "Instance",
                        "Unknown"
                    ]
                },
                "metricValueType": {
                    "type": "string",
                    "enum": [
                        "Count",
                        "Percentage",
                        "Average",
                        "Timer",
                        "Observation",
                        "Min",
                        "Max",
                        "Unknown"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "comparisonOperator": {
                    "type": "string",
                    "enum": [
                        "Gt",
                        "Gte",
                        "Lt",
                        "Lte",
                        "Eq",
                        "Ne",
                        "Unknown"
                    ]
                }
            }
        },
        "V2MobiusRulesTopicCondition": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:rules:topic:Condition",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusRulesTopicCondition"
                    }
                },
                "predicates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusRulesTopicConditionRulePredicate"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "And",
                        "Or",
                        "Not",
                        "Unknown"
                    ]
                }
            }
        },
        "V2MobiusRulesTopicRule": {
            "type": "object",
            "id": "urn:jsonschema:v2:mobius:rules:topic:Rule",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "ConversationMetrics",
                        "UserPresence",
                        "WorkforceManagement",
                        "Unknown"
                    ]
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2MobiusRulesTopicAlertNotification"
                    }
                },
                "conditions": {
                    "type": "object",
                    "$ref": "#/definitions/V2MobiusRulesTopicCondition"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inAlarm": {
                    "type": "boolean"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "CREATE",
                        "UPDATE",
                        "DELETE"
                    ]
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ReportingDataExportTopicDataExportNotification": {
            "type": "object",
            "id": "urn:jsonschema:reporting:data:export:topic:DataExportNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "runId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "SUBMITTED",
                        "RUNNING",
                        "CANCELLING",
                        "CANCELLED",
                        "COMPLETED",
                        "COMPLETED_WITH_PARTIAL_RESULTS",
                        "FAILED"
                    ]
                },
                "exportFormat": {
                    "type": "string",
                    "enum": [
                        "CSV",
                        "PDF"
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "viewType": {
                    "type": "string",
                    "enum": [
                        "QUEUE_PERFORMANCE_SUMMARY_VIEW",
                        "QUEUE_PERFORMANCE_DETAIL_VIEW",
                        "INTERACTION_SEARCH_VIEW",
                        "AGENT_PERFORMANCE_SUMMARY_VIEW",
                        "AGENT_PERFORMANCE_DETAIL_VIEW",
                        "AGENT_STATUS_SUMMARY_VIEW",
                        "AGENT_STATUS_DETAIL_VIEW",
                        "AGENT_EVALUATION_SUMMARY_VIEW",
                        "AGENT_EVALUATION_DETAIL_VIEW",
                        "AGENT_QUEUE_DETAIL_VIEW",
                        "AGENT_INTERACTION_DETAIL_VIEW",
                        "ABANDON_INSIGHTS_VIEW",
                        "SKILLS_PERFORMANCE_VIEW",
                        "SURVEY_FORM_PERFORMANCE_SUMMARY_VIEW",
                        "SURVEY_FORM_PERFORMANCE_DETAIL_VIEW",
                        "DNIS_PERFORMANCE_SUMMARY_VIEW",
                        "DNIS_PERFORMANCE_DETAIL_VIEW",
                        "WRAP_UP_PERFORMANCE_SUMMARY_VIEW",
                        "AGENT_WRAP_UP_PERFORMANCE_DETAIL_VIEW",
                        "QUEUE_ACTIVITY_SUMMARY_VIEW",
                        "QUEUE_ACTIVITY_DETAIL_VIEW",
                        "AGENT_QUEUE_ACTIVITY_SUMMARY_VIEW",
                        "QUEUE_AGENT_DETAIL_VIEW",
                        "QUEUE_INTERACTION_DETAIL_VIEW",
                        "AGENT_SCHEDULE_DETAIL_VIEW",
                        "IVR_PERFORMANCE_SUMMARY_VIEW",
                        "IVR_PERFORMANCE_DETAIL_VIEW",
                        "ANSWER_INSIGHTS_VIEW",
                        "HANDLE_INSIGHTS_VIEW",
                        "TALK_INSIGHTS_VIEW",
                        "HOLD_INSIGHTS_VIEW",
                        "ACW_INSIGHTS_VIEW",
                        "WAIT_INSIGHTS_VIEW",
                        "AGENT_WRAP_UP_PERFORMANCE_INTERVAL_DETAIL_VIEW",
                        "FLOW_OUTCOME_SUMMARY_VIEW",
                        "FLOW_OUTCOME_PERFORMANCE_DETAIL_VIEW",
                        "FLOW_OUTCOME_PERFORMANCE_INTERVAL_DETAIL_VIEW",
                        "FLOW_DESTINATION_SUMMARY_VIEW",
                        "FLOW_DESTINATION_DETAIL_VIEW",
                        "SCHEDULED_CALLBACKS_VIEW",
                        "CONTENT_SEARCH_VIEW",
                        "JOURNEY_ACTION_MAP_SUMMARY_VIEW",
                        "JOURNEY_OUTCOME_SUMMARY_VIEW",
                        "JOURNEY_SEGMENT_SUMMARY_VIEW",
                        "AGENT_DEVELOPMENT_DETAIL_VIEW",
                        "AGENT_DEVELOPMENT_DETAIL_ME_VIEW",
                        "AGENT_DEVELOPMENT_SUMMARY_VIEW",
                        "AGENT_SCORECARD_VIEW",
                        "AGENT_SCORECARD_ME_VIEW",
                        "AGENT_GAMIFICATION_LEADERSHIP_VIEW",
                        "AGENT_SCHEDULE_ME_VIEW",
                        "BOT_PERFORMANCE_SUMMARY_VIEW",
                        "BOT_PERFORMANCE_DETAIL_VIEW",
                        "TOPIC_TREND_SUMMARY_VIEW",
                        "TOPIC_TREND_DETAIL_VIEW",
                        "ACTION_MAP_BLOCKED_CONSTRAINTS_DETAIL_VIEW",
                        "ACTION_MAP_BLOCKED_CONSTRAINTS_INTERVAL_DETAIL_VIEW",
                        "FLOW_MILESTONE_PERFORMANCE_DETAIL_VIEW",
                        "FLOW_MILESTONE_PERFORMANCE_INTERVAL_DETAIL_VIEW",
                        "AGENT_TOPIC_SUMMARY_VIEW",
                        "AGENT_TOPIC_DETAIL_VIEW",
                        "QUEUE_TOPIC_SUMMARY_VIEW",
                        "QUEUE_TOPIC_DETAIL_VIEW",
                        "FLOW_TOPIC_SUMMARY_VIEW",
                        "FLOW_TOPIC_DETAIL_VIEW",
                        "AGENT_INTERACTIONS_ME_VIEW",
                        "DATA_ACTIONS_PERFORMANCE_SUMMARY_VIEW",
                        "DATA_ACTIONS_PERFORMANCE_DETAIL_VIEW",
                        "AGENT_TIMELINE_SUMMARY_VIEW",
                        "AGENT_TIMELINE_DETAIL_VIEW",
                        "AGENT_LOGIN_LOGOUT_SUMMARY_VIEW",
                        "AGENT_LOGIN_LOGOUT_DETAIL_VIEW",
                        "CAMPAIGN_PERFORMANCE_SUMMARY_VIEW",
                        "CAMPAIGN_PERFORMANCE_DETAIL_VIEW",
                        "QUEUE_WRAPUP_DETAIL_VIEW",
                        "CAMPAIGN_INTERACTION_DETAIL_VIEW",
                        "CAMPAIGN_ATTEMPT_DETAIL_VIEW",
                        "WORKITEM_PERFORMANCE_SUMMARY_VIEW",
                        "QUEUE_ROUTING_PERFORMANCE_VIEW"
                    ]
                },
                "exportErrorMessagesType": {
                    "type": "string",
                    "enum": [
                        "FAILED_CONVERTING_EXPORT_JOB",
                        "FAILED_NO_DATA_EXPORT_JOB_FOUND",
                        "FAILED_GETTING_DATA_FROM_SERVICE",
                        "FAILED_GENERATING_TEMP_FILE",
                        "FAILED_SAVING_FILE_TO_S3",
                        "FAILED_NOTIFYING_SKYWALKER_OF_DOWNLOAD",
                        "FAILED_BUILDING_DOWNLOAD_URL_FROM_SKYWALKER_RESPONSE",
                        "EXPORT_TYPE_NOT_IMPLEMENTED",
                        "REACHED_MAXIMUM_ATTEMPT_OF_RETRY",
                        "FAILED_LONG_RUNNING_EXPORT",
                        "TOO_MANY_REQUESTS_FROM_AN_ORGANIZATION",
                        "FAILED_AS_EXPORT_FILE_SIZE_IS_GREATER_THAN_10MB",
                        "NOT_AUTHORIZED_TO_VIEW_EXPORT",
                        "STATIC_LINK_EXPORT_FAILED",
                        "TOO_MANY_SEARCH_CRITERIA",
                        "SEARCH_CRITERIA_VALUES_EXCEED_LIMIT"
                    ]
                },
                "read": {
                    "type": "boolean"
                },
                "createdDateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "modifiedDateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "percentageComplete": {
                    "type": "number"
                },
                "emailStatuses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "enum": [
                            "Sent",
                            "Pending",
                            "Failed"
                        ]
                    }
                },
                "emailErrorDescription": {
                    "type": "string"
                },
                "scheduleExpression": {
                    "type": "string"
                },
                "scheduleStaticLinkUrl": {
                    "type": "string"
                },
                "exportAllowedToRerun": {
                    "type": "boolean"
                }
            }
        },
        "ChatBadgeTopicBadgeEntity": {
            "type": "object",
            "id": "urn:jsonschema:chat:badge:topic:BadgeEntity",
            "properties": {
                "jabberId": {
                    "type": "string"
                }
            }
        },
        "ChatBadgeTopicChatBadge": {
            "type": "object",
            "id": "urn:jsonschema:chat:badge:topic:ChatBadge",
            "properties": {
                "entity": {
                    "type": "object",
                    "$ref": "#/definitions/ChatBadgeTopicBadgeEntity"
                },
                "unreadCount": {
                    "type": "integer"
                },
                "lastUnreadNotificationDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "CallForwardingEventUser": {
            "type": "object",
            "id": "urn:jsonschema:call:forwarding:event:v2:User",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "CallForwardingEventTarget": {
            "type": "object",
            "id": "urn:jsonschema:call:forwarding:event:v2:Target",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "CallForwardingEventCall": {
            "type": "object",
            "id": "urn:jsonschema:call:forwarding:event:v2:Call",
            "properties": {
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/CallForwardingEventTarget"
                    }
                }
            }
        },
        "CallForwardingEventCallForwarding": {
            "type": "object",
            "id": "urn:jsonschema:call:forwarding:event:v2:CallForwarding",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/CallForwardingEventUser"
                },
                "enabled": {
                    "type": "boolean"
                },
                "calls": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/CallForwardingEventCall"
                    }
                },
                "voicemail": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ConversationEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Wrapup",
            "description": "Call wrap up or disposition data.",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:UriReference",
            "description": "A UriReference for a resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:ConversationRoutingData",
            "description": "Information on how a communication should be routed to an agent.",
            "properties": {
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicUriReference"
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationEventTopicErrorDetails": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:ErrorDetails",
            "description": "Detailed information about an error response.",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message (400, 401, 403, 404, 500, etc."
                },
                "code": {
                    "type": "string",
                    "description": "A code unique to this error."
                },
                "message": {
                    "type": "string",
                    "description": "Friendly description of this error."
                },
                "messageWithParams": {
                    "type": "string",
                    "description": "This is the same as message except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "messageParams": {
                    "type": "object",
                    "description": "Used in conjunction with messageWithParams. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'john.doe'",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "ConversationEventTopicAddress": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Address",
            "description": "Address and name data for a call endpoint.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "This will be nameRaw if present, or a locality lookup of the address field otherwise."
                },
                "nameRaw": {
                    "type": "string",
                    "description": "The name as close to the bits on the wire as possible."
                },
                "addressNormalized": {
                    "type": "string",
                    "description": "The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                },
                "addressRaw": {
                    "type": "string",
                    "description": "The address as close to the bits on the wire as possible."
                },
                "addressDisplayable": {
                    "type": "string",
                    "description": "The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table."
                }
            }
        },
        "ConversationEventTopicDisconnectReason": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:DisconnectReason",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Disconnect reason protocol type.",
                    "enum": [
                        "q850",
                        "sip"
                    ]
                },
                "code": {
                    "type": "integer",
                    "description": "Protocol specific reason code. See the Q.850 and SIP specs."
                },
                "phrase": {
                    "type": "string",
                    "description": "Human readable English description of the disconnect reason."
                }
            }
        },
        "ConversationEventTopicFaxStatus": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:FaxStatus",
            "description": "Extra information on fax transmission.",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The fax direction, either \"send\" or \"receive\"."
                },
                "expectedPages": {
                    "type": "integer",
                    "description": "Total number of expected pages, if known."
                },
                "activePage": {
                    "type": "integer",
                    "description": "Active page of the transmission."
                },
                "linesTransmitted": {
                    "type": "integer",
                    "description": "Number of lines that have completed transmission."
                },
                "bytesTransmitted": {
                    "type": "integer",
                    "description": "Number of bytes that have competed transmission."
                },
                "baudRate": {
                    "type": "integer",
                    "description": "Current signaling rate of transmission, baud rate."
                },
                "pageErrors": {
                    "type": "integer",
                    "description": "Number of page errors."
                },
                "lineErrors": {
                    "type": "integer",
                    "description": "Number of line errors."
                }
            }
        },
        "ConversationEventTopicAfterCallWork": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:AfterCallWork",
            "description": "A communication's after-call work data.",
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The communication's after-call work state.",
                    "enum": [
                        "unknown",
                        "skipped",
                        "pending",
                        "complete",
                        "notApplicable"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The timestamp when this communication started after-call work in the cloud clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this communication ended after-call work in the cloud clock.",
                    "format": "date-time"
                }
            }
        },
        "ConversationEventTopicCall": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Call",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "uploading",
                        "converting",
                        "transmitting",
                        "none"
                    ]
                },
                "recording": {
                    "type": "boolean",
                    "description": "True if this call is being recorded."
                },
                "recordingState": {
                    "type": "string",
                    "description": "State of recording on this call.",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "muted": {
                    "type": "boolean",
                    "description": "True if this call is muted so that remote participants can't hear any audio from this end."
                },
                "confined": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears hold music."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "securePause": {
                    "type": "boolean",
                    "description": "True when the recording of this call is in secure pause status."
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicErrorDetails"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the call was placed on hold in the cloud clock if the call is currently on hold.",
                    "format": "date-time"
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a call is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "documentId": {
                    "type": "string",
                    "description": "If call is a fax of a document in content management, the id of the document in content management."
                },
                "self": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicAddress"
                },
                "other": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAddress"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the call."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "disconnectReasons": {
                    "type": "array",
                    "description": "List of reasons that this call was disconnected. This will be set once the call disconnects.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicDisconnectReason"
                    }
                },
                "faxStatus": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicFaxStatus"
                },
                "uuiData": {
                    "type": "string",
                    "description": "User to User Information (UUI) data managed by SIP session application."
                },
                "bargedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the barge conference in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                }
            }
        },
        "ConversationEventTopicPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:PhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ConversationEventTopicDialerPreview": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:DialerPreview",
            "description": "The preview data to be used when this callback is a Preview.",
            "properties": {
                "id": {
                    "type": "string"
                },
                "contactId": {
                    "type": "string",
                    "description": "The contact associated with this preview data pop"
                },
                "contactListId": {
                    "type": "string",
                    "description": "The contactList associated with this preview data pop."
                },
                "campaignId": {
                    "type": "string",
                    "description": "The campaignId associated with this preview data pop."
                },
                "phoneNumberColumns": {
                    "type": "array",
                    "description": "The phone number columns associated with this campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicPhoneNumberColumn"
                    }
                }
            }
        },
        "ConversationEventTopicVoicemail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Voicemail",
            "description": "The voicemail data to be used when this callback is an ACD voicemail.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The voicemail id"
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "current state of the voicemail upload",
                    "enum": [
                        "pending",
                        "complete",
                        "failed",
                        "timeout",
                        "none"
                    ]
                }
            }
        },
        "ConversationEventTopicCallback": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Callback",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "scheduled",
                        "uploading",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the call",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold.",
                    "format": "date-time"
                },
                "dialerPreview": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicDialerPreview"
                },
                "voicemail": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicVoicemail"
                },
                "callbackNumbers": {
                    "type": "array",
                    "description": "The phone number(s) to use to place the callback.",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackUserName": {
                    "type": "string",
                    "description": "The name of the user requesting a callback."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "externalCampaign": {
                    "type": "boolean",
                    "description": "True if the call for the callback uses external dialing."
                },
                "skipEnabled": {
                    "type": "boolean",
                    "description": "True if the ability to skip a callback should be enabled."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the callback."
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "callbackScheduledTime": {
                    "type": "string",
                    "description": "The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately.",
                    "format": "date-time"
                },
                "automatedCallbackConfigId": {
                    "type": "string",
                    "description": "The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "callerId": {
                    "type": "string",
                    "description": "The phone number displayed to recipients of the phone call. The value should conform to the E164 format."
                },
                "callerIdName": {
                    "type": "string",
                    "description": "The name displayed to recipients of the phone call."
                }
            }
        },
        "ConversationEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:JourneyContext",
            "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicJourneyAction"
                }
            }
        },
        "ConversationEventTopicChat": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Chat",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the chat."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "avatarImageUrl": {
                    "type": "string",
                    "description": "The avatar for the chat (if available)."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicJourneyContext"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "ConversationEventTopicCobrowse": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Cobrowse",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAddress"
                        }
                    ]
                },
                "roomId": {
                    "type": "string",
                    "description": "The room id for the chat."
                },
                "cobrowseSessionId": {
                    "type": "string",
                    "description": "The co-browse session ID."
                },
                "cobrowseRole": {
                    "type": "string",
                    "description": "This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer)."
                },
                "controlling": {
                    "type": "array",
                    "description": "ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).",
                    "items": {
                        "type": "string"
                    }
                },
                "viewerUrl": {
                    "type": "string",
                    "description": "The URL that can be used to open co-browse session in web browser."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the co-browse communication."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "providerEventTime": {
                    "type": "string",
                    "description": "The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC).",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "ConversationEventTopicAttachment": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Attachment",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "The unique identifier for the attachment."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment."
                },
                "contentUri": {
                    "type": "string",
                    "description": "The content uri of the attachment. If set, this is commonly a public api download location."
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of file the attachment is."
                },
                "contentLength": {
                    "type": "integer",
                    "description": "The length of the attachment file."
                }
            }
        },
        "ConversationEventTopicEmail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Email",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected",
                        "none",
                        "transmitting"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Indicates that the email was auto-generated like an Out of Office reply."
                },
                "subject": {
                    "type": "string",
                    "description": "The subject for the initial email that started this conversation."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "messagesSent": {
                    "type": "integer",
                    "description": "The number of email messages sent by this participant."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicErrorDetails"
                        }
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "messageId": {
                    "type": "string",
                    "description": "A globally unique identifier for the stored content of this communication."
                },
                "direction": {
                    "type": "string",
                    "description": "Whether an email is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "draftAttachments": {
                    "type": "array",
                    "description": "A list of uploaded attachments on the email draft.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicAttachment"
                    }
                },
                "spam": {
                    "type": "boolean",
                    "description": "Indicates if the inbound email was marked as spam."
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "ConversationEventTopicMessageMedia": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:MessageMedia",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the media, useful for retrieving it"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url"
                },
                "contentLengthBytes": {
                    "type": "integer",
                    "description": "The optional content length of the the media object, in bytes."
                },
                "name": {
                    "type": "string",
                    "description": "The optional name of the the media object."
                },
                "id": {
                    "type": "string",
                    "description": "The optional id of the the media object."
                }
            }
        },
        "ConversationEventTopicMessageSticker": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:MessageSticker",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the sticker, useful for retrieving it"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the the sticker object."
                }
            }
        },
        "ConversationEventTopicMessageMetadataEvent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:MessageMetadataEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Type of this event element."
                },
                "subType": {
                    "type": "string",
                    "description": "Event subtype, if any"
                }
            }
        },
        "ConversationEventTopicMessageMetadataContent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:MessageMetadataContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Type of this content element."
                },
                "subType": {
                    "type": "string",
                    "description": "Content subtype, if any"
                }
            }
        },
        "ConversationEventTopicMessageMetadata": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:MessageMetadata",
            "description": "Metadata information about a message.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Message type."
                },
                "events": {
                    "type": "array",
                    "description": "List of message events, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicMessageMetadataEvent"
                    }
                },
                "content": {
                    "type": "array",
                    "description": "List of message content, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicMessageMetadataContent"
                    }
                }
            }
        },
        "ConversationEventTopicMessageDetails": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:MessageDetails",
            "properties": {
                "messageId": {
                    "type": "string",
                    "description": "UUID identifying the message media."
                },
                "messageTime": {
                    "type": "string",
                    "description": "The time when the message was sent or received.",
                    "format": "date-time"
                },
                "messageStatus": {
                    "type": "string",
                    "description": "Indicates the delivery status of the message.",
                    "enum": [
                        "queued",
                        "sent",
                        "failed",
                        "received",
                        "delivery-success",
                        "delivery-failed",
                        "read",
                        "removed"
                    ]
                },
                "messageSegmentCount": {
                    "type": "integer",
                    "description": "The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits."
                },
                "media": {
                    "type": "array",
                    "description": "The media (images, files, etc) associated with this message, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicMessageMedia"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicErrorDetails"
                        }
                    ]
                },
                "stickers": {
                    "type": "array",
                    "description": "A list of stickers included in the message",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicMessageSticker"
                    }
                },
                "messageMetadata": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicMessageMetadata"
                }
            }
        },
        "ConversationEventTopicMessage": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Message",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "connected",
                        "disconnected"
                    ]
                },
                "direction": {
                    "type": "string",
                    "description": "Whether a message is inbound or outbound.",
                    "enum": [
                        "outbound",
                        "inbound"
                    ]
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "errorInfo": {
                    "type": "object",
                    "description": "Detailed information about an error response.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicErrorDetails"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the email."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "toAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAddress"
                        }
                    ]
                },
                "fromAddress": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAddress"
                        }
                    ]
                },
                "messages": {
                    "type": "array",
                    "description": "The messages sent on this communication channel.",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicMessageDetails"
                    }
                },
                "messagesTranscriptUri": {
                    "type": "string",
                    "description": "the messages transcript file uri."
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the type of message platform from which the message originated.",
                    "enum": [
                        "unknown",
                        "sms",
                        "twitter",
                        "facebook",
                        "line",
                        "viber",
                        "wechat",
                        "whatsapp",
                        "telegram",
                        "kakao",
                        "webmessaging",
                        "open",
                        "instagram"
                    ]
                },
                "recipientCountry": {
                    "type": "string",
                    "description": "Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format."
                },
                "recipientType": {
                    "type": "string",
                    "description": "The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type."
                },
                "journeyContext": {
                    "type": "object",
                    "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicJourneyContext"
                        }
                    ]
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                },
                "agentAssistantId": {
                    "type": "string",
                    "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation."
                },
                "byoSmsIntegrationId": {
                    "type": "string"
                }
            }
        },
        "ConversationEventTopicObject": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Object",
            "description": "The number of peer participants from the perspective of the participant in the conference."
        },
        "ConversationEventTopicScreenshare": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Screenshare",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "sharing": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the screen share."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "peerCount": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicObject"
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "ConversationEventTopicSocialExpression": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:SocialExpression",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "socialMediaId": {
                    "type": "string",
                    "description": "A globally unique identifier for the social media."
                },
                "socialMediaHub": {
                    "type": "string",
                    "description": "The social network of the communication"
                },
                "socialUserName": {
                    "type": "string",
                    "description": "The social media user name of the communication"
                },
                "previewText": {
                    "type": "string",
                    "description": "The text preview of the communication contents"
                },
                "recordingId": {
                    "type": "string",
                    "description": "A globally unique identifier for the recording associated with this chat."
                },
                "held": {
                    "type": "boolean",
                    "description": "True if this call is held and the person on this side hears silence."
                },
                "provider": {
                    "type": "string",
                    "description": "The source provider of the social expression."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "startHoldTime": {
                    "type": "string",
                    "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold.",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "ConversationEventTopicVideo": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Video",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "none"
                    ]
                },
                "self": {
                    "type": "object",
                    "description": "Address and name data for a call endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAddress"
                        }
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this communication."
                },
                "context": {
                    "type": "string",
                    "description": "The room id context (xmpp jid) for the conference session."
                },
                "audioMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted their outgoing audio."
                },
                "videoMuted": {
                    "type": "boolean",
                    "description": "Indicates whether this participant has muted/paused their outgoing video."
                },
                "sharingScreen": {
                    "type": "boolean",
                    "description": "Indicates whether this participant is sharing their screen to the session."
                },
                "peerCount": {
                    "type": "object",
                    "description": "The number of peer participants from the perspective of the participant in the conference.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicObject"
                        }
                    ]
                },
                "provider": {
                    "type": "string",
                    "description": "The media provider controlling the video."
                },
                "scriptId": {
                    "type": "string",
                    "description": "The UUID of the script to use."
                },
                "peerId": {
                    "type": "string",
                    "description": "The id of the peer communication corresponding to a matching leg for this communication."
                },
                "disconnectType": {
                    "type": "string",
                    "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "timeout",
                        "transfer",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication was connected in the cloud clock.",
                    "format": "date-time"
                },
                "disconnectedTime": {
                    "type": "string",
                    "description": "The timestamp when this communication disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "msids": {
                    "type": "array",
                    "description": "List of media stream ids",
                    "items": {
                        "type": "string"
                    }
                },
                "wrapup": {
                    "type": "object",
                    "description": "Call wrap up or disposition data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicWrapup"
                        }
                    ]
                },
                "afterCallWork": {
                    "type": "object",
                    "description": "A communication's after-call work data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEventTopicAfterCallWork"
                        }
                    ]
                },
                "afterCallWorkRequired": {
                    "type": "boolean",
                    "description": "Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested."
                }
            }
        },
        "ConversationEventTopicWorkflow": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Workflow",
            "description": "Information about the workflow.",
            "properties": {
                "workflowId": {
                    "type": "string",
                    "description": "The id of the workflow"
                }
            }
        },
        "ConversationEventTopicParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Participant",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A globally unique identifier for this conversation."
                },
                "connectedTime": {
                    "type": "string",
                    "description": "The timestamp when this participant was connected to the conversation in the provider clock.",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when this participant disconnected from the conversation in the provider clock.",
                    "format": "date-time"
                },
                "userId": {
                    "type": "string",
                    "description": "If this participant represents a user, then this will be the globally unique identifier for the user."
                },
                "externalContactId": {
                    "type": "string",
                    "description": "If this participant represents an external contact, then this will be the globally unique identifier for the external contact."
                },
                "externalOrganizationId": {
                    "type": "string",
                    "description": "If this participant represents an external org, then this will be the globally unique identifier for the external org."
                },
                "name": {
                    "type": "string",
                    "description": "A human readable name identifying the participant."
                },
                "queueId": {
                    "type": "string",
                    "description": "If present, the queue id that the communication channel came in on."
                },
                "groupId": {
                    "type": "string",
                    "description": "If present, the group id that the participant represents."
                },
                "teamId": {
                    "type": "string",
                    "description": "The team id that this participant is a member of when added to the conversation."
                },
                "purpose": {
                    "type": "string",
                    "description": "A well known string that specifies the purpose or type of this participant."
                },
                "consultParticipantId": {
                    "type": "string",
                    "description": "If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred."
                },
                "address": {
                    "type": "string",
                    "description": "The address for the this participant. For a phone call this will be the ANI."
                },
                "wrapupRequired": {
                    "type": "boolean",
                    "description": "True iff this participant is required to enter wrapup for this conversation."
                },
                "wrapupExpected": {
                    "type": "boolean",
                    "description": "True when a participant is expected to enter a wrapup code once the call connects."
                },
                "wrapupPrompt": {
                    "type": "string",
                    "description": "This field controls how the UI prompts the agent for a wrapup."
                },
                "wrapupTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long a timed ACW session will last."
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicWrapup"
                },
                "startAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant started after-call work.",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "description": "The timestamp when this participant ended after-call work.",
                    "format": "date-time"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicConversationRoutingData"
                },
                "alertingTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies how long the agent has to answer an interaction before being marked as not responding."
                },
                "monitoredParticipantId": {
                    "type": "string",
                    "description": "If this participant is a monitor, then this will be the id of the participant that is being monitored."
                },
                "coachedParticipantId": {
                    "type": "string",
                    "description": "If this participant is a coach, then this will be the id of the participant that is being coached."
                },
                "bargedParticipantId": {
                    "type": "string",
                    "description": "If this participant created a barge in conference, then this will be the id of the participant that is barged in."
                },
                "mediaRoles": {
                    "type": "array",
                    "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc.",
                    "items": {
                        "type": "string"
                    }
                },
                "screenRecordingState": {
                    "type": "string",
                    "description": "The current screen recording state for this participant.",
                    "enum": [
                        "requested",
                        "active",
                        "paused",
                        "stopped",
                        "error",
                        "timeout"
                    ]
                },
                "flaggedReason": {
                    "type": "string",
                    "description": "If this participant has flagged the conversation, the reason code given."
                },
                "attributes": {
                    "type": "object",
                    "description": "Additional participant attributes",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "calls": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicCall"
                    }
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicCallback"
                    }
                },
                "chats": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicChat"
                    }
                },
                "cobrowsesessions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicCobrowse"
                    }
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicEmail"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicMessage"
                    }
                },
                "screenshares": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicScreenshare"
                    }
                },
                "socialExpressions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicSocialExpression"
                    }
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicVideo"
                    }
                },
                "workflow": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicWorkflow"
                }
            }
        },
        "ConversationEventTopicInitiator": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Initiator",
            "description": "Fields identifying the initiator of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user who initiated the command if it was initiated by a user."
                }
            }
        },
        "ConversationEventTopicModifiedBy": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:ModifiedBy",
            "description": "Fields identifying the entity that updated the command.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the user if the updater is an internal user."
                },
                "selfUri": {
                    "type": "string",
                    "description": "The URI for the user if the updater is an internal user."
                }
            }
        },
        "ConversationEventTopicDestination": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Destination",
            "description": "Fields identifying the destination of a given conversation command.",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "The id of the user if the command destination is a user."
                },
                "address": {
                    "type": "string",
                    "description": "The destination address if the command destination is an endpoint."
                }
            }
        },
        "ConversationEventTopicRecentTransfer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:RecentTransfer",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the command."
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "active",
                        "complete",
                        "canceled",
                        "failed",
                        "timeout",
                        "unknown"
                    ]
                },
                "dateIssued": {
                    "type": "string",
                    "description": "The date/time that this command was issued.",
                    "format": "date-time"
                },
                "initiator": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicInitiator"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicModifiedBy"
                },
                "destination": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEventTopicDestination"
                },
                "transferType": {
                    "type": "string",
                    "description": "The type of transfer to perform.",
                    "enum": [
                        "attended",
                        "unattended"
                    ]
                }
            }
        },
        "ConversationEventTopicConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:event:topic:v2:Conversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "maxParticipants": {
                    "type": "integer"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicParticipant"
                    }
                },
                "recentTransfers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEventTopicRecentTransfer"
                    }
                },
                "recordingState": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "externalTag": {
                    "type": "string"
                },
                "securePause": {
                    "type": "boolean"
                }
            }
        },
        "ConversationCallbackEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationCallbackEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationCallbackEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallbackEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallbackEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationCallbackEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationCallbackEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationCallbackEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallbackEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationCallbackEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationCallbackEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationCallbackEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationCallbackEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationCallbackEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicJourneyAction"
                }
            }
        },
        "ConversationCallbackEventTopicPhoneNumberColumn": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:PhoneNumberColumn",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ConversationCallbackEventTopicDialerPreview": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:DialerPreview",
            "properties": {
                "id": {
                    "type": "string"
                },
                "contactId": {
                    "type": "string",
                    "description": "The contact associated with this preview data pop"
                },
                "contactListId": {
                    "type": "string",
                    "description": "The contactList associated with this preview data pop."
                },
                "campaignId": {
                    "type": "string",
                    "description": "The campaignId associated with this preview data pop."
                },
                "phoneNumberColumns": {
                    "type": "array",
                    "description": "The phone number columns associated with this campaign",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallbackEventTopicPhoneNumberColumn"
                    }
                }
            }
        },
        "ConversationCallbackEventTopicVoicemail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:Voicemail",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The voicemail id"
                },
                "uploadStatus": {
                    "type": "string",
                    "description": "current state of the voicemail upload",
                    "enum": [
                        "pending",
                        "complete",
                        "failed",
                        "timeout",
                        "none"
                    ]
                }
            }
        },
        "ConversationCallbackEventTopicCallbackMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:CallbackMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outboundPreview": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicDialerPreview"
                },
                "voicemail": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallbackEventTopicVoicemail"
                },
                "callbackNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "callbackUserName": {
                    "type": "string"
                },
                "skipEnabled": {
                    "type": "boolean"
                },
                "externalCampaign": {
                    "type": "boolean"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "callbackScheduledTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "automatedCallbackConfigId": {
                    "type": "string"
                }
            }
        },
        "ConversationCallbackEventTopicCallbackConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:callback:event:topic:v2:CallbackConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallbackEventTopicCallbackMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationCallEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationCallEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationCallEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationCallEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationCallEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationCallEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationCallEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationCallEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationCallEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationCallEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationCallEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicJourneyAction"
                }
            }
        },
        "ConversationCallEventTopicFaxStatus": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:FaxStatus",
            "properties": {
                "direction": {
                    "type": "string"
                },
                "expectedPages": {
                    "type": "integer"
                },
                "activePage": {
                    "type": "integer"
                },
                "linesTransmitted": {
                    "type": "integer"
                },
                "bytesTransmitted": {
                    "type": "integer"
                },
                "dataRate": {
                    "type": "integer"
                },
                "pageErrors": {
                    "type": "integer"
                },
                "lineErrors": {
                    "type": "integer"
                }
            }
        },
        "ConversationCallEventTopicCallMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:CallMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "muted": {
                    "type": "boolean"
                },
                "confined": {
                    "type": "boolean"
                },
                "recording": {
                    "type": "boolean"
                },
                "recordingState": {
                    "type": "string",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "securePause": {
                    "type": "boolean"
                },
                "group": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicUriReference"
                },
                "ani": {
                    "type": "string"
                },
                "dnis": {
                    "type": "string"
                },
                "documentId": {
                    "type": "string"
                },
                "monitoredParticipantId": {
                    "type": "string"
                },
                "coachedParticipantId": {
                    "type": "string"
                },
                "bargedParticipantId": {
                    "type": "string"
                },
                "bargedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "consultParticipantId": {
                    "type": "string"
                },
                "faxStatus": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCallEventTopicFaxStatus"
                }
            }
        },
        "ConversationCallEventTopicCallConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:call:event:topic:v2:CallConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCallEventTopicCallMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recordingState": {
                    "type": "string",
                    "enum": [
                        "none",
                        "active",
                        "paused"
                    ]
                },
                "securePause": {
                    "type": "boolean"
                },
                "maxParticipants": {
                    "type": "integer"
                }
            }
        },
        "ConversationChatEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationChatEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationChatEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationChatEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationChatEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationChatEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationChatEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationChatEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationChatEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationChatEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationChatEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationChatEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationChatEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationChatEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicJourneyAction"
                }
            }
        },
        "ConversationChatEventTopicChatMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:ChatMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationChatEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roomId": {
                    "type": "string"
                },
                "avatarImageUrl": {
                    "type": "string"
                }
            }
        },
        "ConversationChatEventTopicChatConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:chat:event:topic:v2:ChatConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationChatEventTopicChatMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationCobrowseEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationCobrowseEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationCobrowseEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCobrowseEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCobrowseEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationCobrowseEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationCobrowseEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationCobrowseEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCobrowseEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationCobrowseEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationCobrowseEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationCobrowseEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationCobrowseEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationCobrowseEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicJourneyAction"
                }
            }
        },
        "ConversationCobrowseEventTopicCobrowseMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:CobrowseMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationCobrowseEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cobrowseSessionId": {
                    "type": "string"
                },
                "cobrowseRole": {
                    "type": "string"
                },
                "viewerUrl": {
                    "type": "string"
                },
                "providerEventTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "controlling": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationCobrowseEventTopicCobrowseConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:cobrowse:event:topic:v2:CobrowseConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationCobrowseEventTopicCobrowseMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationEmailEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationEmailEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationEmailEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEmailEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEmailEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationEmailEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationEmailEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationEmailEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEmailEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationEmailEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationEmailEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationEmailEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationEmailEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationEmailEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicJourneyAction"
                }
            }
        },
        "ConversationEmailEventTopicAttachment": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:Attachment",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "The unique identifier for the attachment."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment."
                },
                "contentUri": {
                    "type": "string",
                    "description": "The content uri of the attachment. If set, this is commonly a public api download location."
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of file the attachment is."
                },
                "contentLength": {
                    "type": "integer",
                    "description": "The length of the attachment file."
                }
            }
        },
        "ConversationEmailEventTopicEmailMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:EmailMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationEmailEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "type": "string"
                },
                "messagesSent": {
                    "type": "integer"
                },
                "autoGenerated": {
                    "type": "boolean"
                },
                "messageId": {
                    "type": "string"
                },
                "draftAttachments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEmailEventTopicAttachment"
                    }
                },
                "spam": {
                    "type": "boolean"
                }
            }
        },
        "ConversationEmailEventTopicEmailConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:email:event:topic:v2:EmailConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationEmailEventTopicEmailMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationRecipientAdditionalIdentifier": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationRecipientAdditionalIdentifier",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Deployment",
                        "Subject",
                        "Unknown"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationMessagingToRecipient": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationMessagingToRecipient",
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idType": {
                    "type": "string",
                    "enum": [
                        "Email",
                        "Phone",
                        "Opaque"
                    ]
                },
                "image": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "additionalIds": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationRecipientAdditionalIdentifier"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationMessagingFromRecipient": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationMessagingFromRecipient",
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idType": {
                    "type": "string",
                    "enum": [
                        "Email",
                        "Phone",
                        "Opaque"
                    ]
                },
                "image": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "additionalIds": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationRecipientAdditionalIdentifier"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationMessagingChannelMetadata": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationMessagingChannelMetadata",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationMessagingChannel": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationMessagingChannel",
            "properties": {
                "id": {
                    "type": "string"
                },
                "platform": {
                    "type": "string",
                    "enum": [
                        "Twitter",
                        "Facebook",
                        "Instagram",
                        "Line",
                        "Whatsapp",
                        "WebMessaging",
                        "Open",
                        "Sms"
                    ]
                },
                "messageId": {
                    "type": "string"
                },
                "to": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationMessagingToRecipient"
                },
                "from": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationMessagingFromRecipient"
                },
                "time": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateDeleted": {
                    "type": "string",
                    "format": "date-time"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationMessagingChannelMetadata"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentLocation": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentLocation",
            "properties": {
                "url": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentStory": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentStory",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Mention",
                        "Reply"
                    ]
                },
                "url": {
                    "type": "string"
                },
                "replyToId": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentAttachment": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentAttachment",
            "properties": {
                "id": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "Image",
                        "Video",
                        "Audio",
                        "File",
                        "Link"
                    ]
                },
                "url": {
                    "type": "string"
                },
                "mime": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentQuickReply": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentQuickReply",
            "properties": {
                "text": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "Message"
                    ]
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateParameter": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationNotificationTemplateParameter",
            "properties": {
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateHeader": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationNotificationTemplateHeader",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Media"
                    ]
                },
                "text": {
                    "type": "string"
                },
                "media": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentAttachment"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateParameter"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateBody": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationNotificationTemplateBody",
            "properties": {
                "text": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateParameter"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateFooter": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationNotificationTemplateFooter",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentNotificationTemplate": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentNotificationTemplate",
            "properties": {
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateHeader"
                },
                "body": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateBody"
                },
                "footer": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationNotificationTemplateFooter"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentButtonResponse": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentButtonResponse",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Button",
                        "QuickReply"
                    ]
                },
                "text": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentActions": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentActions",
            "properties": {
                "url": {
                    "type": "string"
                },
                "urlTarget": {
                    "type": "string"
                },
                "textback": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationButtonComponent": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationButtonComponent",
            "properties": {
                "title": {
                    "type": "string"
                },
                "actions": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentActions"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationContentGeneric": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationContentGeneric",
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "video": {
                    "type": "string"
                },
                "actions": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentActions"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationButtonComponent"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationMessageContent": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationMessageContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "enum": [
                        "Attachment",
                        "Location",
                        "Story",
                        "QuickReply",
                        "Notification",
                        "ButtonResponse",
                        "GenericTemplate"
                    ]
                },
                "location": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentLocation"
                },
                "story": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentStory"
                },
                "attachment": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentAttachment"
                },
                "quickReply": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentQuickReply"
                },
                "template": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentNotificationTemplate"
                },
                "buttonResponse": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentButtonResponse"
                },
                "generic": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationContentGeneric"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationEventCoBrowse": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationEventCoBrowse",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Offering",
                        "OfferingExpired",
                        "OfferingAccepted",
                        "OfferingRejected"
                    ]
                },
                "sessionId": {
                    "type": "string"
                },
                "sessionJoinToken": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationEventTyping": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationEventTyping",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "On"
                    ]
                },
                "duration": {
                    "type": "integer"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationMessageEvent": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationMessageEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "enum": [
                        "CoBrowse",
                        "Typing"
                    ]
                },
                "coBrowse": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationEventCoBrowse"
                },
                "typing": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationEventTyping"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationReason": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationReason",
            "properties": {
                "code": {
                    "type": "string",
                    "enum": [
                        "MessageExpired",
                        "RateLimited",
                        "MessageNotAllowed",
                        "GeneralError",
                        "UnsupportedMessage",
                        "UnknownMessage",
                        "InvalidMessageStructure",
                        "InvalidDestination",
                        "ServerError",
                        "MediaTypeNotAllowed",
                        "InvalidMediaContentLength",
                        "RecipientOptedOut"
                    ]
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicConversationNormalizedMessage": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:ConversationNormalizedMessage",
            "properties": {
                "id": {
                    "type": "string"
                },
                "channel": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationMessagingChannel"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Structured",
                        "Receipt",
                        "Event"
                    ]
                },
                "text": {
                    "type": "string"
                },
                "content": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationMessageContent"
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationMessageEvent"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Sent",
                        "Delivered",
                        "Read",
                        "Failed",
                        "Published",
                        "Removed"
                    ]
                },
                "reasons": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationReason"
                    }
                },
                "originatingEntity": {
                    "type": "string",
                    "enum": [
                        "Human",
                        "Bot"
                    ]
                },
                "isFinalReceipt": {
                    "type": "boolean"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "Inbound",
                        "Outbound"
                    ]
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForUserTopicMessageData": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:user:topic:MessageData",
            "properties": {
                "conversationId": {
                    "type": "string"
                },
                "normalizedMessage": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForUserTopicConversationNormalizedMessage"
                }
            }
        },
        "ConversationMessageEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationMessageEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationMessageEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationMessageEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationMessageEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationMessageEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationMessageEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationMessageEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationMessageEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationMessageEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationMessageEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicJourneyAction"
                }
            }
        },
        "ConversationMessageEventTopicMessageMedia": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageMedia",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the media, useful for retrieving it"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url"
                },
                "contentLengthBytes": {
                    "type": "integer",
                    "description": "The optional content length of the the media object, in bytes."
                },
                "name": {
                    "type": "string",
                    "description": "The optional name of the the media object."
                },
                "id": {
                    "type": "string",
                    "description": "The optional id of the the media object."
                }
            }
        },
        "ConversationMessageEventTopicMessageSticker": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageSticker",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The location of the sticker, useful for retrieving it"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the the sticker object."
                }
            }
        },
        "ConversationMessageEventTopicErrorDetails": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:ErrorDetails",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message (400, 401, 403, 404, 500, etc."
                },
                "code": {
                    "type": "string",
                    "description": "A code unique to this error."
                },
                "message": {
                    "type": "string",
                    "description": "Friendly description of this error."
                },
                "messageWithParams": {
                    "type": "string",
                    "description": "This is the same as message except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "messageParams": {
                    "type": "object",
                    "description": "Used in conjunction with messageWithParams. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'john.doe'",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "ConversationMessageEventTopicMessageMetadataEvent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageMetadataEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Type of this event element."
                },
                "subType": {
                    "type": "string",
                    "description": "Event subtype, if any"
                }
            }
        },
        "ConversationMessageEventTopicMessageMetadataContent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageMetadataContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Type of this content element."
                },
                "subType": {
                    "type": "string",
                    "description": "Content subtype, if any"
                }
            }
        },
        "ConversationMessageEventTopicMessageMetadata": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageMetadata",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Message type."
                },
                "events": {
                    "type": "array",
                    "description": "List of message events, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicMessageMetadataEvent"
                    }
                },
                "content": {
                    "type": "array",
                    "description": "List of message content, if any",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicMessageMetadataContent"
                    }
                }
            }
        },
        "ConversationMessageEventTopicMessageDetails": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageDetails",
            "properties": {
                "message": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "messageTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "messageSegmentCount": {
                    "type": "integer"
                },
                "messageStatus": {
                    "type": "string",
                    "enum": [
                        "queued",
                        "sent",
                        "failed",
                        "received",
                        "delivery-success",
                        "delivery-failed",
                        "read",
                        "removed"
                    ]
                },
                "media": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicMessageMedia"
                    }
                },
                "stickers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicMessageSticker"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicErrorDetails"
                },
                "messageMetadata": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicMessageMetadata"
                }
            }
        },
        "ConversationMessageEventTopicMessageMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationMessageEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicMessageDetails"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "sms",
                        "twitter",
                        "facebook",
                        "line",
                        "viber",
                        "wechat",
                        "whatsapp",
                        "telegram",
                        "kakao",
                        "webmessaging",
                        "open",
                        "instagram"
                    ]
                },
                "recipientCountry": {
                    "type": "string"
                },
                "recipientType": {
                    "type": "string"
                },
                "byoSmsIntegrationId": {
                    "type": "string"
                },
                "monitoredParticipantId": {
                    "type": "string"
                }
            }
        },
        "ConversationMessageEventTopicMessageConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:message:event:topic:v2:MessageConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationMessageEventTopicMessageMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationScreenShareEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationScreenShareEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationScreenShareEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationScreenShareEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationScreenShareEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationScreenShareEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationScreenShareEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationScreenShareEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationScreenShareEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationScreenShareEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationScreenShareEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationScreenShareEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationScreenShareEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationScreenShareEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicJourneyAction"
                }
            }
        },
        "ConversationScreenShareEventTopicScreenShareMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:ScreenShareMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationScreenShareEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "context": {
                    "type": "string"
                },
                "peerCount": {
                    "type": "integer"
                },
                "sharing": {
                    "type": "boolean"
                }
            }
        },
        "ConversationScreenShareEventTopicScreenShareConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:screen:share:event:topic:v2:ScreenShareConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationScreenShareEventTopicScreenShareMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationSocialExpressionEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationSocialExpressionEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationSocialExpressionEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationSocialExpressionEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationSocialExpressionEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationSocialExpressionEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationSocialExpressionEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationSocialExpressionEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationSocialExpressionEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationSocialExpressionEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationSocialExpressionEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationSocialExpressionEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationSocialExpressionEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationSocialExpressionEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicJourneyAction"
                }
            }
        },
        "ConversationSocialExpressionEventTopicSocialMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:SocialMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationSocialExpressionEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "socialMediaId": {
                    "type": "string"
                },
                "socialMediaHub": {
                    "type": "string"
                },
                "socialUserName": {
                    "type": "string"
                },
                "previewText": {
                    "type": "string"
                }
            }
        },
        "ConversationSocialExpressionEventTopicSocialConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:social:expression:event:topic:v2:SocialConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationSocialExpressionEventTopicSocialMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationVideoEventTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "ConversationVideoEventTopicDetail": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:Detail",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "ConversationVideoEventTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:ErrorBody",
            "properties": {
                "message": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "messageWithParams": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextId": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationVideoEventTopicDetail"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationVideoEventTopicErrorBody"
                    }
                }
            }
        },
        "ConversationVideoEventTopicWrapup": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:Wrapup",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The user configured wrap up code name."
                },
                "notes": {
                    "type": "string",
                    "description": "Text entered by the agent to describe the call or disposition."
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags selected by the agent to describe the call or disposition.",
                    "items": {
                        "type": "string"
                    }
                },
                "durationSeconds": {
                    "type": "integer",
                    "description": "The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally"
                },
                "endTime": {
                    "type": "string",
                    "description": "The timestamp when the wrapup was finished.",
                    "format": "date-time"
                }
            }
        },
        "ConversationVideoEventTopicScoredAgent": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:ScoredAgent",
            "properties": {
                "agent": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                        }
                    ]
                },
                "score": {
                    "type": "integer",
                    "description": "Agent's score for the current conversation, from 0 - 100, higher being better"
                }
            }
        },
        "ConversationVideoEventTopicConversationRoutingData": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:ConversationRoutingData",
            "properties": {
                "queue": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                        }
                    ]
                },
                "language": {
                    "type": "object",
                    "description": "A UriReference for a resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                        }
                    ]
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the conversation to use for routing decisions"
                },
                "skills": {
                    "type": "array",
                    "description": "The skills to use for routing decisions",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                    }
                },
                "scoredAgents": {
                    "type": "array",
                    "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationVideoEventTopicScoredAgent"
                    }
                }
            }
        },
        "ConversationVideoEventTopicJourneyCustomer": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:JourneyCustomer",
            "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable."
                },
                "idType": {
                    "type": "string",
                    "description": "The type of the customerId within the Journey System (e.g. cookie)."
                }
            }
        },
        "ConversationVideoEventTopicJourneyCustomerSession": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:JourneyCustomerSession",
            "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An ID of a Customer/User's session within the Journey System at a point-in-time"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)"
                }
            }
        },
        "ConversationVideoEventTopicJourneyActionMap": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:JourneyActionMap",
            "description": "Details about the action map from the Journey System which triggered this action",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the actionMap in the Journey System which triggered this action"
                },
                "version": {
                    "type": "integer",
                    "description": "The version number of the actionMap in the Journey System at the time this action was triggered"
                }
            }
        },
        "ConversationVideoEventTopicJourneyAction": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:JourneyAction",
            "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)"
                },
                "actionMap": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicJourneyActionMap"
                }
            }
        },
        "ConversationVideoEventTopicJourneyContext": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:JourneyContext",
            "properties": {
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicJourneyCustomer"
                },
                "customerSession": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicJourneyCustomerSession"
                },
                "triggeringAction": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicJourneyAction"
                }
            }
        },
        "ConversationVideoEventTopicVideoMediaParticipant": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:VideoMediaParticipant",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "connectedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startHoldTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "purpose": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "initialState": {
                    "type": "string",
                    "enum": [
                        "alerting",
                        "dialing",
                        "contacting",
                        "offering",
                        "connected",
                        "disconnected",
                        "terminated",
                        "converting",
                        "uploading",
                        "transmitting",
                        "scheduled",
                        "none"
                    ]
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "inbound",
                        "outbound"
                    ]
                },
                "disconnectType": {
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "client",
                        "system",
                        "transfer",
                        "timeout",
                        "transfer.conference",
                        "transfer.consult",
                        "transfer.forward",
                        "transfer.noanswer",
                        "transfer.notavailable",
                        "transport.failure",
                        "error",
                        "peer",
                        "other",
                        "spam",
                        "uncallable"
                    ]
                },
                "held": {
                    "type": "boolean"
                },
                "wrapupRequired": {
                    "type": "boolean"
                },
                "wrapupPrompt": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                },
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicErrorBody"
                },
                "script": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                },
                "wrapupTimeoutMs": {
                    "type": "integer"
                },
                "wrapupSkipped": {
                    "type": "boolean"
                },
                "alertingTimeoutMs": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "externalContact": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                },
                "externalOrganization": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicUriReference"
                },
                "wrapup": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicWrapup"
                },
                "conversationRoutingData": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicConversationRoutingData"
                },
                "peer": {
                    "type": "string"
                },
                "screenRecordingState": {
                    "type": "string"
                },
                "flaggedReason": {
                    "type": "string",
                    "enum": [
                        "general"
                    ]
                },
                "journeyContext": {
                    "type": "object",
                    "$ref": "#/definitions/ConversationVideoEventTopicJourneyContext"
                },
                "startAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endAcwTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "mediaRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "audioMuted": {
                    "type": "boolean"
                },
                "videoMuted": {
                    "type": "boolean"
                },
                "sharingScreen": {
                    "type": "boolean"
                },
                "peerCount": {
                    "type": "integer"
                },
                "context": {
                    "type": "string"
                },
                "msids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ConversationVideoEventTopicVideoConversation": {
            "type": "object",
            "id": "urn:jsonschema:conversation:video:event:topic:v2:VideoConversation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/ConversationVideoEventTopicVideoMediaParticipant"
                    }
                },
                "otherMediaUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RecordingEventMediaResult": {
            "type": "object",
            "id": "urn:jsonschema:recording:event:v2:MediaResult",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "waveUri": {
                    "type": "string"
                },
                "mediaUri": {
                    "type": "string"
                },
                "waveformData": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "RecordingEventRecording": {
            "type": "object",
            "id": "urn:jsonschema:recording:event:v2:Recording",
            "properties": {
                "id": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "string"
                },
                "fileState": {
                    "type": "string"
                },
                "mediaUris": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/RecordingEventMediaResult"
                    }
                },
                "estimatedTranscodeTimeMs": {
                    "type": "integer"
                },
                "actualTranscodeTimeMs": {
                    "type": "integer"
                }
            }
        },
        "RecordingTranscodeCompleteTopicMediaResult": {
            "type": "object",
            "id": "urn:jsonschema:recording:transcode:complete:topic:v2:MediaResult",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "waveUri": {
                    "type": "string"
                },
                "mediaUri": {
                    "type": "string"
                },
                "waveformData": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "RecordingTranscodeCompleteTopicRecording": {
            "type": "object",
            "id": "urn:jsonschema:recording:transcode:complete:topic:v2:Recording",
            "properties": {
                "id": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "string"
                },
                "fileState": {
                    "type": "string"
                },
                "mediaUris": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/RecordingTranscodeCompleteTopicMediaResult"
                    }
                },
                "estimatedTranscodeTimeMs": {
                    "type": "integer"
                },
                "actualTranscodeTimeMs": {
                    "type": "integer"
                }
            }
        },
        "UserConversationsEventMediaSummaryDetail": {
            "type": "object",
            "id": "urn:jsonschema:user:conversations:event:v2:MediaSummaryDetail",
            "properties": {
                "active": {
                    "type": "integer"
                },
                "acw": {
                    "type": "integer"
                }
            }
        },
        "UserConversationsEventMediaSummary": {
            "type": "object",
            "id": "urn:jsonschema:user:conversations:event:v2:MediaSummary",
            "properties": {
                "contactCenter": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummaryDetail"
                },
                "enterprise": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummaryDetail"
                }
            }
        },
        "UserConversationsEventUserConversationSummary": {
            "type": "object",
            "id": "urn:jsonschema:user:conversations:event:v2:UserConversationSummary",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "call": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                },
                "callback": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                },
                "email": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                },
                "message": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                },
                "chat": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                },
                "socialExpression": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                },
                "video": {
                    "type": "object",
                    "$ref": "#/definitions/UserConversationsEventMediaSummary"
                }
            }
        },
        "FaxTopicWorkspaceData": {
            "type": "object",
            "id": "urn:jsonschema:fax:topic:v2:WorkspaceData",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "FaxTopicUserData": {
            "type": "object",
            "id": "urn:jsonschema:fax:topic:v2:UserData",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "FaxTopicLockData": {
            "type": "object",
            "id": "urn:jsonschema:fax:topic:v2:LockData",
            "properties": {
                "lockedBy": {
                    "type": "object",
                    "$ref": "#/definitions/FaxTopicUserData"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateExpires": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "FaxTopicFaxDataV2": {
            "type": "object",
            "id": "urn:jsonschema:fax:topic:v2:FaxDataV2",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "workspace": {
                    "type": "object",
                    "$ref": "#/definitions/FaxTopicWorkspaceData"
                },
                "createdBy": {
                    "type": "object",
                    "$ref": "#/definitions/FaxTopicUserData"
                },
                "contentType": {
                    "type": "string"
                },
                "contentLength": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "changeNumber": {
                    "type": "integer"
                },
                "dateUploaded": {
                    "type": "string",
                    "format": "date-time"
                },
                "uploadedBy": {
                    "type": "object",
                    "$ref": "#/definitions/FaxTopicUserData"
                },
                "lockInfo": {
                    "type": "object",
                    "$ref": "#/definitions/FaxTopicLockData"
                },
                "selfUri": {
                    "type": "string"
                },
                "callerAddress": {
                    "type": "string"
                },
                "receiverAddress": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                }
            }
        },
        "GeolocationEventGeolocation": {
            "type": "object",
            "id": "urn:jsonschema:geolocation:event:v2:Geolocation",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                }
            }
        },
        "UserGreetingEventGreetingOwner": {
            "type": "object",
            "id": "urn:jsonschema:user:greeting:event:v2:GreetingOwner",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "UserGreetingEventGreetingAudioFile": {
            "type": "object",
            "id": "urn:jsonschema:user:greeting:event:v2:GreetingAudioFile",
            "properties": {
                "durationMilliseconds": {
                    "type": "integer"
                },
                "sizeBytes": {
                    "type": "integer"
                }
            }
        },
        "UserGreetingEventGreeting": {
            "type": "object",
            "id": "urn:jsonschema:user:greeting:event:v2:Greeting",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "ownerType": {
                    "type": "string"
                },
                "owner": {
                    "type": "object",
                    "$ref": "#/definitions/UserGreetingEventGreetingOwner"
                },
                "greetingAudioFile": {
                    "type": "object",
                    "$ref": "#/definitions/UserGreetingEventGreetingAudioFile"
                },
                "audioTTS": {
                    "type": "string"
                }
            }
        },
        "ContactlistDownloadReadyObject": {
            "type": "object",
            "id": "urn:jsonschema:contactlist:download:ready:v2:Object"
        },
        "ContactlistDownloadReadyExportUri": {
            "type": "object",
            "id": "urn:jsonschema:contactlist:download:ready:v2:ExportUri",
            "properties": {
                "uri": {
                    "type": "string"
                },
                "exportTimestamp": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/ContactlistDownloadReadyObject"
                    }
                }
            }
        },
        "DnclistDownloadReadyObject": {
            "type": "object",
            "id": "urn:jsonschema:dnclist:download:ready:v2:Object"
        },
        "DnclistDownloadReadyExportUri": {
            "type": "object",
            "id": "urn:jsonschema:dnclist:download:ready:v2:ExportUri",
            "properties": {
                "uri": {
                    "type": "string"
                },
                "exportTimestamp": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/DnclistDownloadReadyObject"
                    }
                }
            }
        },
        "OutOfOfficeEventUser": {
            "type": "object",
            "id": "urn:jsonschema:out:of:office:event:v2:User",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "OutOfOfficeEventOutOfOffice": {
            "type": "object",
            "id": "urn:jsonschema:out:of:office:event:v2:OutOfOffice",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/OutOfOfficeEventUser"
                },
                "active": {
                    "type": "boolean"
                },
                "indefinite": {
                    "type": "boolean"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "PresenceEventOrganizationPresence": {
            "type": "object",
            "id": "urn:jsonschema:presence:event:v2:OrganizationPresence",
            "properties": {
                "id": {
                    "type": "string"
                },
                "systemPresence": {
                    "type": "string"
                }
            }
        },
        "PresenceEventUserPresence": {
            "type": "object",
            "id": "urn:jsonschema:presence:event:v2:UserPresence",
            "properties": {
                "source": {
                    "type": "string"
                },
                "presenceDefinition": {
                    "type": "object",
                    "$ref": "#/definitions/PresenceEventOrganizationPresence"
                },
                "primary": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "RecordingArchiveRestoreTopicMediaResult": {
            "type": "object",
            "id": "urn:jsonschema:recording:archive:restore:topic:v2:MediaResult",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "waveUri": {
                    "type": "string"
                },
                "mediaUri": {
                    "type": "string"
                },
                "waveformData": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "RecordingArchiveRestoreTopicRecording": {
            "type": "object",
            "id": "urn:jsonschema:recording:archive:restore:topic:v2:Recording",
            "properties": {
                "id": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "string"
                },
                "fileState": {
                    "type": "string"
                },
                "mediaUris": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/RecordingArchiveRestoreTopicMediaResult"
                    }
                },
                "estimatedTranscodeTimeMs": {
                    "type": "integer"
                },
                "actualTranscodeTimeMs": {
                    "type": "integer"
                }
            }
        },
        "UserRoutingStatusRoutingStatus": {
            "type": "object",
            "id": "urn:jsonschema:user:routing:status:v2:RoutingStatus",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Indicates the Routing State of the agent.",
                    "enum": [
                        "OFF_QUEUE",
                        "IDLE",
                        "INTERACTING",
                        "NOT_RESPONDING",
                        "COMMUNICATING"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The timestamp when the agent went into this state.",
                    "format": "date-time"
                }
            }
        },
        "UserRoutingStatusObject": {
            "type": "object",
            "id": "urn:jsonschema:user:routing:status:v2:Object"
        },
        "UserRoutingStatusUserParam": {
            "type": "object",
            "id": "urn:jsonschema:user:routing:status:v2:UserParam",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "$ref": "#/definitions/UserRoutingStatusObject"
                    }
                }
            }
        },
        "UserRoutingStatusErrorInfo": {
            "type": "object",
            "id": "urn:jsonschema:user:routing:status:v2:ErrorInfo",
            "description": "Error information that the Public API will receive in a response body. This allows backend services to pass an error message to consumers of the Public API.",
            "properties": {
                "errorCode": {
                    "type": "string",
                    "description": "A code unique to this error. Typically prefixed with the service that originated the error. For example CONFIG_USER_NOT_FOUND"
                },
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code for this message. If left blank the status code from the HTTP response is used."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation Id or context Id for this message. If left blank the Public API will look at the HTTP response header 'ININ-Correlation-Id' instead."
                },
                "userMessage": {
                    "type": "string",
                    "description": "A customer friendly message. This should be a complete sentence, use proper grammar and only include information useful to a customer. This is not a dev message and should not include things like Org Id"
                },
                "userParamsMessage": {
                    "type": "string",
                    "description": "This is the same as userMessage except it uses template fields for variable replacement. For instance: 'User {username} was not found'"
                },
                "userParams": {
                    "type": "array",
                    "description": "Used in conjunction with userParamsMessage. These are the template parameters. For instance: UserParam.key = 'username', UserParam.value = 'chuck.pulfer'",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/UserRoutingStatusUserParam"
                    }
                }
            }
        },
        "UserRoutingStatusUserRoutingStatus": {
            "type": "object",
            "id": "urn:jsonschema:user:routing:status:v2:UserRoutingStatus",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the user."
                },
                "routingStatus": {
                    "type": "object",
                    "$ref": "#/definitions/UserRoutingStatusRoutingStatus"
                },
                "errorInfo": {
                    "type": "object",
                    "$ref": "#/definitions/UserRoutingStatusErrorInfo"
                }
            }
        },
        "UserStationChangeTopicUser": {
            "type": "object",
            "id": "urn:jsonschema:user:station:change:topic:v2:User",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "UserStationChangeTopicUserStation": {
            "type": "object",
            "id": "urn:jsonschema:user:station:change:topic:v2:UserStation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "associatedUser": {
                    "type": "object",
                    "$ref": "#/definitions/UserStationChangeTopicUser"
                }
            }
        },
        "UserStationChangeTopicUserStations": {
            "type": "object",
            "id": "urn:jsonschema:user:station:change:topic:v2:UserStations",
            "properties": {
                "associatedStation": {
                    "type": "object",
                    "$ref": "#/definitions/UserStationChangeTopicUserStation"
                }
            }
        },
        "UserTokensTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:user:tokens:topic:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "UserTokensTopicTokenNotification": {
            "type": "object",
            "id": "urn:jsonschema:user:tokens:topic:TokenNotification",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/UserTokensTopicUriReference"
                },
                "ipAddress": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string"
                },
                "tokenExpirationDate": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "tokenHash": {
                    "type": "string"
                }
            }
        },
        "AdhocRecordingTopicWorkspaceData": {
            "type": "object",
            "id": "urn:jsonschema:adhoc:recording:topic:v2:WorkspaceData",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "AdhocRecordingTopicUserData": {
            "type": "object",
            "id": "urn:jsonschema:adhoc:recording:topic:v2:UserData",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "AdhocRecordingTopicLockData": {
            "type": "object",
            "id": "urn:jsonschema:adhoc:recording:topic:v2:LockData",
            "properties": {
                "lockedBy": {
                    "type": "object",
                    "$ref": "#/definitions/AdhocRecordingTopicUserData"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateExpires": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "AdhocRecordingTopicConversationData": {
            "type": "object",
            "id": "urn:jsonschema:adhoc:recording:topic:v2:ConversationData",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "AdhocRecordingTopicRecordingDataV2": {
            "type": "object",
            "id": "urn:jsonschema:adhoc:recording:topic:v2:RecordingDataV2",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "workspace": {
                    "type": "object",
                    "$ref": "#/definitions/AdhocRecordingTopicWorkspaceData"
                },
                "createdBy": {
                    "type": "object",
                    "$ref": "#/definitions/AdhocRecordingTopicUserData"
                },
                "contentType": {
                    "type": "string"
                },
                "contentLength": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "changeNumber": {
                    "type": "integer"
                },
                "dateUploaded": {
                    "type": "string",
                    "format": "date-time"
                },
                "uploadedBy": {
                    "type": "object",
                    "$ref": "#/definitions/AdhocRecordingTopicUserData"
                },
                "lockInfo": {
                    "type": "object",
                    "$ref": "#/definitions/AdhocRecordingTopicLockData"
                },
                "selfUri": {
                    "type": "string"
                },
                "durationMillieconds": {
                    "type": "integer"
                },
                "conversation": {
                    "type": "object",
                    "$ref": "#/definitions/AdhocRecordingTopicConversationData"
                },
                "read": {
                    "type": "boolean"
                }
            }
        },
        "VoicemailMessagesTopicOwner": {
            "type": "object",
            "id": "urn:jsonschema:voicemail:messages:topic:v2:Owner",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "VoicemailMessagesTopicVoicemailCopyRecord": {
            "type": "object",
            "id": "urn:jsonschema:voicemail:messages:topic:v2:VoicemailCopyRecord",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/VoicemailMessagesTopicOwner"
                },
                "group": {
                    "type": "object",
                    "$ref": "#/definitions/VoicemailMessagesTopicOwner"
                }
            }
        },
        "VoicemailMessagesTopicVoicemailMessage": {
            "type": "object",
            "id": "urn:jsonschema:voicemail:messages:topic:v2:VoicemailMessage",
            "properties": {
                "id": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "audioRecordingDurationSeconds": {
                    "type": "integer"
                },
                "audioRecordingSizeBytes": {
                    "type": "integer"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "createdDateString": {
                    "type": "string"
                },
                "callerAddress": {
                    "type": "string"
                },
                "callerName": {
                    "type": "string"
                },
                "action": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "modifiedByUserId": {
                    "type": "string"
                },
                "copiedTo": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/VoicemailMessagesTopicVoicemailCopyRecord"
                    }
                },
                "copiedFrom": {
                    "type": "object",
                    "$ref": "#/definitions/VoicemailMessagesTopicVoicemailCopyRecord"
                },
                "modifiedDateString": {
                    "type": "string"
                }
            }
        },
        "WemCoachingUserNotificationTopicCoachingAppointmentReference": {
            "type": "object",
            "id": "urn:jsonschema:wem:coaching:user:notification:topic:CoachingAppointmentReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WemCoachingUserNotificationTopicCoachingUserNotification": {
            "type": "object",
            "id": "urn:jsonschema:wem:coaching:user:notification:topic:CoachingUserNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "markedAsRead": {
                    "type": "boolean"
                },
                "actionType": {
                    "type": "string",
                    "enum": [
                        "Create",
                        "Update",
                        "Delete",
                        "StatusChange"
                    ]
                },
                "relationship": {
                    "type": "string",
                    "enum": [
                        "Attendee",
                        "Facilitator",
                        "Creator"
                    ]
                },
                "appointment": {
                    "type": "object",
                    "$ref": "#/definitions/WemCoachingUserNotificationTopicCoachingAppointmentReference"
                },
                "dateStart": {
                    "type": "string",
                    "format": "date-time"
                },
                "lengthInMinutes": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Scheduled",
                        "InProgress",
                        "Completed",
                        "InvalidSchedule"
                    ]
                }
            }
        },
        "LearningAssignmentTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:learning:assignment:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "LearningAssignmentTopicLearningModuleReference": {
            "type": "object",
            "id": "urn:jsonschema:learning:assignment:topic:LearningModuleReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "LearningAssignmentTopicLearningAssignmentNotification": {
            "type": "object",
            "id": "urn:jsonschema:learning:assignment:topic:LearningAssignmentNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/LearningAssignmentTopicUserReference"
                },
                "module": {
                    "type": "object",
                    "$ref": "#/definitions/LearningAssignmentTopicLearningModuleReference"
                },
                "version": {
                    "type": "integer"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Assigned",
                        "InProgress",
                        "Completed",
                        "Deleted",
                        "NotCompleted",
                        "InvalidSchedule"
                    ]
                },
                "dateRecommendedForCompletion": {
                    "type": "string",
                    "format": "date-time"
                },
                "createdBy": {
                    "type": "object",
                    "$ref": "#/definitions/LearningAssignmentTopicUserReference"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/LearningAssignmentTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "isOverdue": {
                    "type": "boolean"
                },
                "lengthInMinutes": {
                    "type": "integer"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicSecondaryPresenceReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:SecondaryPresenceReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicActivityCodeReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:ActivityCodeReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "secondaryPresences": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTopicSecondaryPresenceReference"
                    }
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicRealTimeAdherenceExplanation": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:RealTimeAdherenceExplanation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "lengthMinutes": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Approved",
                        "Denied"
                    ]
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicQueueReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:QueueReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTopicUserScheduleAdherenceUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:topic:v2:UserScheduleAdherenceUpdate",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTopicUserReference"
                },
                "managementUnitId": {
                    "type": "string"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTopicUriReference"
                },
                "scheduledActivityCategory": {
                    "type": "string"
                },
                "scheduledActivityCode": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTopicActivityCodeReference"
                },
                "systemPresence": {
                    "type": "string"
                },
                "organizationSecondaryPresenceId": {
                    "type": "string"
                },
                "routingStatus": {
                    "type": "string",
                    "enum": [
                        "__EMPTY__",
                        "OFF_QUEUE",
                        "IDLE",
                        "INTERACTING",
                        "NOT_RESPONDING",
                        "COMMUNICATING",
                        "OFFLINE"
                    ]
                },
                "actualActivityCategory": {
                    "type": "string"
                },
                "isOutOfOffice": {
                    "type": "boolean"
                },
                "adherenceState": {
                    "type": "string",
                    "enum": [
                        "InAdherence",
                        "OutOfAdherence",
                        "Unscheduled",
                        "Unknown",
                        "Ignored",
                        "Explained"
                    ]
                },
                "impact": {
                    "type": "string"
                },
                "adherenceExplanation": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTopicRealTimeAdherenceExplanation"
                },
                "adherenceChangeTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "presenceUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "activeQueues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTopicQueueReference"
                    }
                },
                "activeQueuesModifiedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "removedFromManagementUnit": {
                    "type": "boolean"
                }
            }
        },
        "WfmHistoricalAdherenceBulkCalculationsCompleteTopicWfmHistoricalAdherenceBulkCalculationsCompleteNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:historical:adherence:bulk:calculations:complete:topic:WfmHistoricalAdherenceBulkCalculationsCompleteNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "downloadUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "queryState": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Complete",
                        "Error",
                        "Processing"
                    ]
                }
            }
        },
        "WfmHistoricalAdherenceCalculationsCompleteTopicWfmHistoricalAdherenceCalculationsCompleteNotice": {
            "type": "object",
            "id": "urn:jsonschema:wfm:historical:adherence:calculations:complete:topic:v2:WfmHistoricalAdherenceCalculationsCompleteNotice",
            "properties": {
                "id": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "downloadUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "queryState": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                }
            }
        },
        "WfmIntegrationsHrisTimeOffTypesJobTopicHrisTimeOffType": {
            "type": "object",
            "id": "urn:jsonschema:wfm:integrations:hris:time:off:types:job:topic:v2:HrisTimeOffType",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "secondaryId": {
                    "type": "string"
                }
            }
        },
        "WfmIntegrationsHrisTimeOffTypesJobTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:wfm:integrations:hris:time:off:types:job:topic:v2:ErrorBody",
            "properties": {
                "status": {
                    "type": "integer"
                },
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmIntegrationsHrisTimeOffTypesJobTopicHrisTimeOffTypesJobNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:integrations:hris:time:off:types:job:topic:v2:HrisTimeOffTypesJobNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmIntegrationsHrisTimeOffTypesJobTopicHrisTimeOffType"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Error"
                    ]
                },
                "error": {
                    "type": "object",
                    "$ref": "#/definitions/WfmIntegrationsHrisTimeOffTypesJobTopicErrorBody"
                }
            }
        },
        "WfmUserNotificationTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserNotificationTopicShiftTradeNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:ShiftTradeNotification",
            "properties": {
                "weekDate": {
                    "type": "string"
                },
                "tradeId": {
                    "type": "string"
                },
                "oneSided": {
                    "type": "boolean"
                },
                "newState": {
                    "type": "string",
                    "enum": [
                        "Unmatched",
                        "Matched",
                        "Approved",
                        "Denied",
                        "Expired",
                        "Canceled"
                    ]
                },
                "initiatingUser": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicUserReference"
                },
                "initiatingShiftDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "receivingUser": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicUserReference"
                },
                "receivingShiftDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmUserNotificationTopicTimeOffRequestNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:TimeOffRequestNotification",
            "properties": {
                "timeOffRequestId": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicUserReference"
                },
                "isFullDayRequest": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "PENDING",
                        "APPROVED",
                        "DENIED",
                        "CANCELED"
                    ]
                },
                "partialDayStartDateTimes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "fullDayManagementUnitDates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmUserNotificationTopicManagementUnit": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:ManagementUnit",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserNotificationTopicBusinessUnit": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:BusinessUnit",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserNotificationTopicAdherenceExplanationNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:AdherenceExplanationNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "agent": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicUserReference"
                },
                "managementUnit": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicManagementUnit"
                },
                "businessUnit": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicBusinessUnit"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "lengthMinutes": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Approved",
                        "Denied"
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Late"
                    ]
                },
                "notes": {
                    "type": "string"
                }
            }
        },
        "WfmUserNotificationTopicWfmUserNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:notification:topic:v2:WfmUserNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "mutableGroupId": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "ShiftTrade",
                        "TimeOffRequest",
                        "AdherenceExplanation"
                    ]
                },
                "shiftTrade": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicShiftTradeNotification"
                },
                "timeOffRequest": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicTimeOffRequestNotification"
                },
                "adherenceExplanation": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserNotificationTopicAdherenceExplanationNotification"
                },
                "agentNotification": {
                    "type": "boolean"
                },
                "otherNotificationIdsInGroup": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "markedAsRead": {
                    "type": "boolean"
                }
            }
        },
        "WfmAgentScheduleUpdateTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:agent:schedule:update:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmAgentScheduleUpdateTopicAgentScheduleShiftUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:agent:schedule:update:topic:v2:AgentScheduleShiftUpdate",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Added",
                        "Edited",
                        "Deleted"
                    ]
                },
                "shiftStartDates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            }
        },
        "WfmAgentScheduleUpdateTopicAgentScheduleUpdateNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:agent:schedule:update:topic:v2:AgentScheduleUpdateNotification",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmAgentScheduleUpdateTopicUserReference"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "updates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmAgentScheduleUpdateTopicAgentScheduleShiftUpdate"
                    }
                }
            }
        },
        "WfmHistoricalShrinkageCalculationsCompleteTopicHistoricalShrinkageCalculationsCompleteNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:historical:shrinkage:calculations:complete:topic:v2:HistoricalShrinkageCalculationsCompleteNotification",
            "properties": {
                "operationId": {
                    "type": "string"
                },
                "downloadUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Unknown",
                        "Complete",
                        "Error",
                        "Processing"
                    ]
                }
            }
        },
        "WfmTimeOffBalanceJobTopicTimeOffBalance": {
            "type": "object",
            "id": "urn:jsonschema:wfm:time:off:balance:job:topic:v2:TimeOffBalance",
            "properties": {
                "activityCodeId": {
                    "type": "string"
                },
                "hrisTimeOffTypeId": {
                    "type": "string"
                },
                "hrisTimeOffTypeSecondaryId": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "balanceMinutesPerDay": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "WfmTimeOffBalanceJobTopicErrorBody": {
            "type": "object",
            "id": "urn:jsonschema:wfm:time:off:balance:job:topic:v2:ErrorBody",
            "properties": {
                "status": {
                    "type": "integer"
                },
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "messageParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmTimeOffBalanceJobTopicTimeOffBalanceJobNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:time:off:balance:job:topic:v2:TimeOffBalanceJobNotification",
            "properties": {
                "id": {
                    "type": "string"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmTimeOffBalanceJobTopicTimeOffBalance"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Error"
                    ]
                },
                "error": {
                    "type": "object",
                    "$ref": "#/definitions/WfmTimeOffBalanceJobTopicErrorBody"
                }
            }
        },
        "WfmTimeOffRequestUpdateTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:time:off:request:update:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmTimeOffRequestUpdateTopicTimeOffRequestUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:time:off:request:update:topic:TimeOffRequestUpdate",
            "properties": {
                "id": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmTimeOffRequestUpdateTopicUserReference"
                },
                "isFullDayRequest": {
                    "type": "boolean"
                },
                "markedAsRead": {
                    "type": "boolean"
                },
                "activityCodeId": {
                    "type": "string"
                },
                "paid": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "PENDING",
                        "APPROVED",
                        "DENIED",
                        "CANCELED"
                    ]
                },
                "substatus": {
                    "type": "string",
                    "enum": [
                        "AdvanceTimeElapsed",
                        "AutoApproved",
                        "InvalidDailyDuration",
                        "OutsideShift",
                        "RemovedFromWaitlist",
                        "Waitlisted"
                    ]
                },
                "partialDayStartDateTimes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fullDayManagementUnitDates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dailyDurationMinutes": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "reviewedDate": {
                    "type": "string"
                },
                "reviewedBy": {
                    "type": "string"
                },
                "submittedDate": {
                    "type": "string"
                },
                "submittedBy": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                }
            }
        },
        "VideoConferenceUpdateTopicParticipantInfo": {
            "type": "object",
            "id": "urn:jsonschema:video:conference:update:topic:v2:ParticipantInfo",
            "properties": {
                "activeParticipantCount": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "VideoConferenceUpdateTopicVideoConference": {
            "type": "object",
            "id": "urn:jsonschema:video:conference:update:topic:v2:VideoConference",
            "properties": {
                "conversationId": {
                    "type": "string"
                },
                "conferenceId": {
                    "type": "string"
                },
                "participantInfo": {
                    "type": "object",
                    "$ref": "#/definitions/VideoConferenceUpdateTopicParticipantInfo"
                }
            }
        },
        "WebDeploymentsConfigTopicWebMessagingConfigChangeEventBody": {
            "type": "object",
            "id": "urn:jsonschema:web:deployments:config:topic:WebMessagingConfigChangeEventBody",
            "properties": {
                "id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Active",
                        "Inactive",
                        "Error",
                        "Deleting"
                    ]
                }
            }
        },
        "WebDeploymentsDeploymentTopicWebMessagingConfigChangeEventBody": {
            "type": "object",
            "id": "urn:jsonschema:web:deployments:deployment:topic:WebMessagingConfigChangeEventBody",
            "properties": {
                "id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Active",
                        "Inactive",
                        "Error",
                        "Deleting"
                    ]
                }
            }
        },
        "WebDeploymentsDeploymentTopicWebMessagingDeploymentChangeEventBody": {
            "type": "object",
            "id": "urn:jsonschema:web:deployments:deployment:topic:WebMessagingDeploymentChangeEventBody",
            "properties": {
                "id": {
                    "type": "string"
                },
                "configuration": {
                    "type": "object",
                    "$ref": "#/definitions/WebDeploymentsDeploymentTopicWebMessagingConfigChangeEventBody"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Active",
                        "Inactive",
                        "Error",
                        "Deleting"
                    ]
                }
            }
        },
        "LearningAssignmentRuleRunTopicLearningModuleReference": {
            "type": "object",
            "id": "urn:jsonschema:learning:assignment:rule:run:topic:LearningModuleReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "LearningAssignmentRuleRunTopicLearningAssignmentsCreated": {
            "type": "object",
            "id": "urn:jsonschema:learning:assignment:rule:run:topic:LearningAssignmentsCreated",
            "properties": {
                "module": {
                    "type": "object",
                    "$ref": "#/definitions/LearningAssignmentRuleRunTopicLearningModuleReference"
                }
            }
        },
        "LearningAssignmentRuleRunTopicLearningAssignmentRuleRunNotification": {
            "type": "object",
            "id": "urn:jsonschema:learning:assignment:rule:run:topic:LearningAssignmentRuleRunNotification",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/LearningAssignmentRuleRunTopicLearningAssignmentsCreated"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationRecipientAdditionalIdentifier": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationRecipientAdditionalIdentifier",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Deployment",
                        "Subject",
                        "Unknown"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingToRecipient": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationMessagingToRecipient",
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idType": {
                    "type": "string",
                    "enum": [
                        "Email",
                        "Phone",
                        "Opaque"
                    ]
                },
                "image": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "additionalIds": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationRecipientAdditionalIdentifier"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingFromRecipient": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationMessagingFromRecipient",
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idType": {
                    "type": "string",
                    "enum": [
                        "Email",
                        "Phone",
                        "Opaque"
                    ]
                },
                "image": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "additionalIds": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationRecipientAdditionalIdentifier"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingChannelMetadata": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationMessagingChannelMetadata",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingChannel": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationMessagingChannel",
            "properties": {
                "id": {
                    "type": "string"
                },
                "platform": {
                    "type": "string",
                    "enum": [
                        "Twitter",
                        "Facebook",
                        "Instagram",
                        "Line",
                        "Whatsapp",
                        "WebMessaging",
                        "Open",
                        "Sms"
                    ]
                },
                "messageId": {
                    "type": "string"
                },
                "to": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingToRecipient"
                },
                "from": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingFromRecipient"
                },
                "time": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateDeleted": {
                    "type": "string",
                    "format": "date-time"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingChannelMetadata"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentLocation": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentLocation",
            "properties": {
                "url": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentStory": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentStory",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Mention",
                        "Reply"
                    ]
                },
                "url": {
                    "type": "string"
                },
                "replyToId": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentAttachment": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentAttachment",
            "properties": {
                "id": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string",
                    "enum": [
                        "Image",
                        "Video",
                        "Audio",
                        "File",
                        "Link"
                    ]
                },
                "url": {
                    "type": "string"
                },
                "mime": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentQuickReply": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentQuickReply",
            "properties": {
                "text": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "Message"
                    ]
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateParameter": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationNotificationTemplateParameter",
            "properties": {
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateHeader": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationNotificationTemplateHeader",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Media"
                    ]
                },
                "text": {
                    "type": "string"
                },
                "media": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentAttachment"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateParameter"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateBody": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationNotificationTemplateBody",
            "properties": {
                "text": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateParameter"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateFooter": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationNotificationTemplateFooter",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentNotificationTemplate": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentNotificationTemplate",
            "properties": {
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateHeader"
                },
                "body": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateBody"
                },
                "footer": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationNotificationTemplateFooter"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentButtonResponse": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentButtonResponse",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Button",
                        "QuickReply"
                    ]
                },
                "text": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentActions": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentActions",
            "properties": {
                "url": {
                    "type": "string"
                },
                "urlTarget": {
                    "type": "string"
                },
                "textback": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationButtonComponent": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationButtonComponent",
            "properties": {
                "title": {
                    "type": "string"
                },
                "actions": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentActions"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationContentGeneric": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationContentGeneric",
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "video": {
                    "type": "string"
                },
                "actions": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentActions"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationButtonComponent"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationMessageContent": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationMessageContent",
            "properties": {
                "contentType": {
                    "type": "string",
                    "enum": [
                        "Attachment",
                        "Location",
                        "Story",
                        "QuickReply",
                        "Notification",
                        "ButtonResponse",
                        "GenericTemplate"
                    ]
                },
                "location": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentLocation"
                },
                "story": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentStory"
                },
                "attachment": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentAttachment"
                },
                "quickReply": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentQuickReply"
                },
                "template": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentNotificationTemplate"
                },
                "buttonResponse": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentButtonResponse"
                },
                "generic": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationContentGeneric"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationEventCoBrowse": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationEventCoBrowse",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Offering",
                        "OfferingExpired",
                        "OfferingAccepted",
                        "OfferingRejected"
                    ]
                },
                "sessionId": {
                    "type": "string"
                },
                "sessionJoinToken": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationEventTyping": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationEventTyping",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "On"
                    ]
                },
                "duration": {
                    "type": "integer"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationMessageEvent": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationMessageEvent",
            "properties": {
                "eventType": {
                    "type": "string",
                    "enum": [
                        "CoBrowse",
                        "Typing"
                    ]
                },
                "coBrowse": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationEventCoBrowse"
                },
                "typing": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationEventTyping"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationReason": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationReason",
            "properties": {
                "code": {
                    "type": "string",
                    "enum": [
                        "MessageExpired",
                        "RateLimited",
                        "MessageNotAllowed",
                        "GeneralError",
                        "UnsupportedMessage",
                        "UnknownMessage",
                        "InvalidMessageStructure",
                        "InvalidDestination",
                        "ServerError",
                        "MediaTypeNotAllowed",
                        "InvalidMediaContentLength",
                        "RecipientOptedOut"
                    ]
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicConversationNormalizedMessage": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:ConversationNormalizedMessage",
            "properties": {
                "id": {
                    "type": "string"
                },
                "channel": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationMessagingChannel"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Structured",
                        "Receipt",
                        "Event"
                    ]
                },
                "text": {
                    "type": "string"
                },
                "content": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationMessageContent"
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationMessageEvent"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Sent",
                        "Delivered",
                        "Read",
                        "Failed",
                        "Published",
                        "Removed"
                    ]
                },
                "reasons": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationReason"
                    }
                },
                "originatingEntity": {
                    "type": "string",
                    "enum": [
                        "Human",
                        "Bot"
                    ]
                },
                "isFinalReceipt": {
                    "type": "boolean"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "Inbound",
                        "Outbound"
                    ]
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "V2ConversationMessageTypingEventForWorkflowTopicMessageData": {
            "type": "object",
            "id": "urn:jsonschema:v2:conversation:message:typing:event:for:workflow:topic:MessageData",
            "properties": {
                "conversationId": {
                    "type": "string"
                },
                "normalizedMessage": {
                    "type": "object",
                    "$ref": "#/definitions/V2ConversationMessageTypingEventForWorkflowTopicConversationNormalizedMessage"
                }
            }
        },
        "WfmMoveAgentsCompleteTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:move:agents:complete:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmMoveAgentsCompleteTopicManagementUnit": {
            "type": "object",
            "id": "urn:jsonschema:wfm:move:agents:complete:topic:v2:ManagementUnit",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmMoveAgentsCompleteTopicWfmMoveAgentData": {
            "type": "object",
            "id": "urn:jsonschema:wfm:move:agents:complete:topic:v2:WfmMoveAgentData",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmMoveAgentsCompleteTopicUserReference"
                },
                "result": {
                    "type": "string",
                    "enum": [
                        "AlreadyMoved",
                        "DestinationBusinessUnitAgentLimitExceeded",
                        "DestinationManagementUnitAgentLimitExceeded",
                        "DestinationManagementUnitDoesNotExist",
                        "MoveSuccessful",
                        "MovingToDifferentManagementUnit",
                        "NothingToDo",
                        "SourceManagementUnitNotAuthorized"
                    ]
                }
            }
        },
        "WfmMoveAgentsCompleteTopicWfmMoveAgentsComplete": {
            "type": "object",
            "id": "urn:jsonschema:wfm:move:agents:complete:topic:v2:WfmMoveAgentsComplete",
            "properties": {
                "requestingUser": {
                    "type": "object",
                    "$ref": "#/definitions/WfmMoveAgentsCompleteTopicUserReference"
                },
                "destinationManagementUnit": {
                    "type": "object",
                    "$ref": "#/definitions/WfmMoveAgentsCompleteTopicManagementUnit"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmMoveAgentsCompleteTopicWfmMoveAgentData"
                    }
                }
            }
        },
        "WfmBuScheduleTopicBuShortTermForecastReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:BuShortTermForecastReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "WfmBuScheduleTopicManagementUnit": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:ManagementUnit",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuScheduleTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuScheduleTopicBuManagementUnitScheduleSummary": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:BuManagementUnitScheduleSummary",
            "properties": {
                "managementUnit": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleTopicManagementUnit"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "agents": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuScheduleTopicUserReference"
                    }
                },
                "agentCount": {
                    "type": "integer"
                }
            }
        },
        "WfmBuScheduleTopicSchedulerMessageSeverityCount": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:SchedulerMessageSeverityCount",
            "properties": {
                "severity": {
                    "type": "string",
                    "enum": [
                        "Ignore",
                        "Information",
                        "Warning",
                        "Error"
                    ]
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "WfmBuScheduleTopicBuScheduleGenerationResultSummary": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:BuScheduleGenerationResultSummary",
            "properties": {
                "failed": {
                    "type": "boolean"
                },
                "runId": {
                    "type": "string"
                },
                "messageCount": {
                    "type": "integer"
                },
                "messageSeverityCounts": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuScheduleTopicSchedulerMessageSeverityCount"
                    }
                }
            }
        },
        "WfmBuScheduleTopicWfmVersionedEntityMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:WfmVersionedEntityMetadata",
            "properties": {
                "version": {
                    "type": "integer"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuScheduleTopicBuScheduleMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:BuScheduleMetadata",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "weekCount": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "published": {
                    "type": "boolean"
                },
                "shortTermForecast": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleTopicBuShortTermForecastReference"
                },
                "managementUnits": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuScheduleTopicBuManagementUnitScheduleSummary"
                    }
                },
                "generationResults": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleTopicBuScheduleGenerationResultSummary"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleTopicWfmVersionedEntityMetadata"
                }
            }
        },
        "WfmBuScheduleTopicBuScheduleNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:topic:BuScheduleNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "operationId": {
                    "type": "string"
                },
                "eventType": {
                    "type": "string",
                    "enum": [
                        "Update",
                        "Import",
                        "Copy",
                        "Delete"
                    ]
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleTopicBuScheduleMetadata"
                }
            }
        },
        "WfmBuScheduleRunTopicBuScheduleReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:run:topic:BuScheduleReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuScheduleRunTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:run:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuScheduleRunTopicSchedulerMessageSeverityCount": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:run:topic:SchedulerMessageSeverityCount",
            "properties": {
                "severity": {
                    "type": "string",
                    "enum": [
                        "Ignore",
                        "Information",
                        "Warning",
                        "Error"
                    ]
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "WfmBuScheduleRunTopicBuScheduleRun": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:run:topic:BuScheduleRun",
            "properties": {
                "id": {
                    "type": "string"
                },
                "percentComplete": {
                    "type": "number"
                },
                "intradayRescheduling": {
                    "type": "boolean"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "None",
                        "Queued",
                        "Scheduling",
                        "Canceled",
                        "Failed",
                        "Complete"
                    ]
                },
                "weekCount": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleRunTopicBuScheduleReference"
                },
                "schedulingCanceledBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleRunTopicUserReference"
                },
                "schedulingCompletedTime": {
                    "type": "string"
                },
                "messageCount": {
                    "type": "integer"
                },
                "messageSeverityCounts": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuScheduleRunTopicSchedulerMessageSeverityCount"
                    }
                }
            }
        },
        "WfmBuScheduleRunTopicBuSchedulingRunProgressNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:run:topic:BuSchedulingRunProgressNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "operationId": {
                    "type": "string"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuScheduleRunTopicBuScheduleRun"
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicForecastSourceDayPointer": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:ForecastSourceDayPointer",
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "EighthDay"
                    ]
                },
                "weight": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "dataKey": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicModificationIntervalOffsetValue": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:ModificationIntervalOffsetValue",
            "properties": {
                "intervalIndex": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicBuForecastModification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:BuForecastModification",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "MinimumPerInterval",
                        "MaximumPerInterval",
                        "SetValuePerInterval",
                        "ChangeValuePerInterval",
                        "ChangePercentPerInterval",
                        "SetValueOverRange",
                        "ChangeValueOverRange",
                        "SetValuesForIntervalSet",
                        "SetMultiGranularityValuesForIntervalSet"
                    ]
                },
                "startIntervalIndex": {
                    "type": "integer"
                },
                "endIntervalIndex": {
                    "type": "integer"
                },
                "metric": {
                    "type": "string",
                    "enum": [
                        "Offered",
                        "AverageHandleTimeSeconds"
                    ]
                },
                "legacyMetric": {
                    "type": "string",
                    "enum": [
                        "AverageAfterCallWorkTimeSeconds",
                        "AverageHandleTimeSeconds",
                        "AverageTalkTimeSeconds",
                        "Offered"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicModificationIntervalOffsetValue"
                    }
                },
                "secondaryValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicModificationIntervalOffsetValue"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "granularity": {
                    "type": "string"
                },
                "secondaryGranularity": {
                    "type": "string"
                },
                "displayGranularity": {
                    "type": "string"
                },
                "planningGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicWfmVersionedEntityMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:WfmVersionedEntityMetadata",
            "properties": {
                "version": {
                    "type": "integer"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicBuShortTermForecast": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:BuShortTermForecast",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string"
                },
                "creationMethod": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "ImportedHistoricalWeightedAverage",
                        "HistoricalWeightedAverage",
                        "Advanced"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "legacy": {
                    "type": "boolean"
                },
                "referenceStartDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "sourceDays": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicForecastSourceDayPointer"
                    }
                },
                "modifications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicBuForecastModification"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "planningGroupsVersion": {
                    "type": "integer"
                },
                "weekCount": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicWfmVersionedEntityMetadata"
                },
                "canUseForScheduling": {
                    "type": "boolean"
                }
            }
        },
        "WfmBuShortTermForecastUpdateCompleteTopicBuShortTermForecastNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:update:complete:topic:BuShortTermForecastNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastUpdateCompleteTopicBuShortTermForecast"
                },
                "operationId": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicForecastSourceDayPointer": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:ForecastSourceDayPointer",
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "EighthDay"
                    ]
                },
                "weight": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "dataKey": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicModificationIntervalOffsetValue": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:ModificationIntervalOffsetValue",
            "properties": {
                "intervalIndex": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicBuForecastModification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:BuForecastModification",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "MinimumPerInterval",
                        "MaximumPerInterval",
                        "SetValuePerInterval",
                        "ChangeValuePerInterval",
                        "ChangePercentPerInterval",
                        "SetValueOverRange",
                        "ChangeValueOverRange",
                        "SetValuesForIntervalSet",
                        "SetMultiGranularityValuesForIntervalSet"
                    ]
                },
                "startIntervalIndex": {
                    "type": "integer"
                },
                "endIntervalIndex": {
                    "type": "integer"
                },
                "metric": {
                    "type": "string",
                    "enum": [
                        "Offered",
                        "AverageHandleTimeSeconds"
                    ]
                },
                "legacyMetric": {
                    "type": "string",
                    "enum": [
                        "AverageAfterCallWorkTimeSeconds",
                        "AverageHandleTimeSeconds",
                        "AverageTalkTimeSeconds",
                        "Offered"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicModificationIntervalOffsetValue"
                    }
                },
                "secondaryValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicModificationIntervalOffsetValue"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "granularity": {
                    "type": "string"
                },
                "secondaryGranularity": {
                    "type": "string"
                },
                "displayGranularity": {
                    "type": "string"
                },
                "planningGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicWfmVersionedEntityMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:WfmVersionedEntityMetadata",
            "properties": {
                "version": {
                    "type": "integer"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicBuShortTermForecast": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:BuShortTermForecast",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string"
                },
                "creationMethod": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "ImportedHistoricalWeightedAverage",
                        "HistoricalWeightedAverage",
                        "Advanced"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "legacy": {
                    "type": "boolean"
                },
                "referenceStartDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "sourceDays": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicForecastSourceDayPointer"
                    }
                },
                "modifications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicBuForecastModification"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "planningGroupsVersion": {
                    "type": "integer"
                },
                "weekCount": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicWfmVersionedEntityMetadata"
                },
                "canUseForScheduling": {
                    "type": "boolean"
                }
            }
        },
        "WfmBuShortTermForecastCopyCompleteTopicBuShortTermForecastNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:copy:complete:topic:BuShortTermForecastNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastCopyCompleteTopicBuShortTermForecast"
                },
                "operationId": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicForecastSourceDayPointer": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:ForecastSourceDayPointer",
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "EighthDay"
                    ]
                },
                "weight": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "dataKey": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicModificationIntervalOffsetValue": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:ModificationIntervalOffsetValue",
            "properties": {
                "intervalIndex": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicBuForecastModification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:BuForecastModification",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "MinimumPerInterval",
                        "MaximumPerInterval",
                        "SetValuePerInterval",
                        "ChangeValuePerInterval",
                        "ChangePercentPerInterval",
                        "SetValueOverRange",
                        "ChangeValueOverRange",
                        "SetValuesForIntervalSet",
                        "SetMultiGranularityValuesForIntervalSet"
                    ]
                },
                "startIntervalIndex": {
                    "type": "integer"
                },
                "endIntervalIndex": {
                    "type": "integer"
                },
                "metric": {
                    "type": "string",
                    "enum": [
                        "Offered",
                        "AverageHandleTimeSeconds"
                    ]
                },
                "legacyMetric": {
                    "type": "string",
                    "enum": [
                        "AverageAfterCallWorkTimeSeconds",
                        "AverageHandleTimeSeconds",
                        "AverageTalkTimeSeconds",
                        "Offered"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicModificationIntervalOffsetValue"
                    }
                },
                "secondaryValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicModificationIntervalOffsetValue"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "granularity": {
                    "type": "string"
                },
                "secondaryGranularity": {
                    "type": "string"
                },
                "displayGranularity": {
                    "type": "string"
                },
                "planningGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicWfmVersionedEntityMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:WfmVersionedEntityMetadata",
            "properties": {
                "version": {
                    "type": "integer"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicBuShortTermForecast": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:BuShortTermForecast",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string"
                },
                "creationMethod": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "ImportedHistoricalWeightedAverage",
                        "HistoricalWeightedAverage",
                        "Advanced"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "legacy": {
                    "type": "boolean"
                },
                "referenceStartDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "sourceDays": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicForecastSourceDayPointer"
                    }
                },
                "modifications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicBuForecastModification"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "planningGroupsVersion": {
                    "type": "integer"
                },
                "weekCount": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicWfmVersionedEntityMetadata"
                },
                "canUseForScheduling": {
                    "type": "boolean"
                }
            }
        },
        "WfmBuShortTermForecastGenerateProgressTopicGenerateBuShortTermForecastProgressNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:generate:progress:topic:GenerateBuShortTermForecastProgressNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastGenerateProgressTopicBuShortTermForecast"
                },
                "operationId": {
                    "type": "string"
                },
                "progress": {
                    "type": "integer"
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicForecastSourceDayPointer": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:ForecastSourceDayPointer",
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "EighthDay"
                    ]
                },
                "weight": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "dataKey": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicModificationIntervalOffsetValue": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:ModificationIntervalOffsetValue",
            "properties": {
                "intervalIndex": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicBuForecastModification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:BuForecastModification",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "MinimumPerInterval",
                        "MaximumPerInterval",
                        "SetValuePerInterval",
                        "ChangeValuePerInterval",
                        "ChangePercentPerInterval",
                        "SetValueOverRange",
                        "ChangeValueOverRange",
                        "SetValuesForIntervalSet",
                        "SetMultiGranularityValuesForIntervalSet"
                    ]
                },
                "startIntervalIndex": {
                    "type": "integer"
                },
                "endIntervalIndex": {
                    "type": "integer"
                },
                "metric": {
                    "type": "string",
                    "enum": [
                        "Offered",
                        "AverageHandleTimeSeconds"
                    ]
                },
                "legacyMetric": {
                    "type": "string",
                    "enum": [
                        "AverageAfterCallWorkTimeSeconds",
                        "AverageHandleTimeSeconds",
                        "AverageTalkTimeSeconds",
                        "Offered"
                    ]
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicModificationIntervalOffsetValue"
                    }
                },
                "secondaryValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicModificationIntervalOffsetValue"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "granularity": {
                    "type": "string"
                },
                "secondaryGranularity": {
                    "type": "string"
                },
                "displayGranularity": {
                    "type": "string"
                },
                "planningGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicWfmVersionedEntityMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:WfmVersionedEntityMetadata",
            "properties": {
                "version": {
                    "type": "integer"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicBuShortTermForecast": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:BuShortTermForecast",
            "properties": {
                "id": {
                    "type": "string"
                },
                "weekDate": {
                    "type": "string"
                },
                "creationMethod": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "ImportedHistoricalWeightedAverage",
                        "HistoricalWeightedAverage",
                        "Advanced"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "legacy": {
                    "type": "boolean"
                },
                "referenceStartDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "sourceDays": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicForecastSourceDayPointer"
                    }
                },
                "modifications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicBuForecastModification"
                    }
                },
                "timeZone": {
                    "type": "string"
                },
                "planningGroupsVersion": {
                    "type": "integer"
                },
                "weekCount": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicWfmVersionedEntityMetadata"
                },
                "canUseForScheduling": {
                    "type": "boolean"
                }
            }
        },
        "WfmBuShortTermForecastImportCompleteTopicBuShortTermForecastNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:short:term:forecast:import:complete:topic:BuShortTermForecastNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBuShortTermForecastImportCompleteTopicBuShortTermForecast"
                },
                "operationId": {
                    "type": "string"
                }
            }
        },
        "WfmHistoricalDataUploadPurgeRequestStatusTopicHistoricalDataUploadPurgeRequestUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:historical:data:upload:purge:request:status:topic:v2:HistoricalDataUploadPurgeRequestUpdate",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "InProgress",
                        "Success",
                        "Failed"
                    ]
                }
            }
        },
        "WfmHistoricalDataUploadRequestStatusTopicHistoricalDataUploadRequestUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:historical:data:upload:request:status:topic:v2:HistoricalDataUploadRequestUpdate",
            "properties": {
                "requestId": {
                    "type": "string"
                },
                "dateImportStarted": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateImportEnded": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Initiated",
                        "InProgress",
                        "Pending",
                        "Success",
                        "Failed",
                        "Cancelled",
                        "Purged",
                        "PurgePending"
                    ]
                },
                "error": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Csv",
                        "Json"
                    ]
                }
            }
        },
        "WfmMoveManagementUnitTopicBusinessUnit": {
            "type": "object",
            "id": "urn:jsonschema:wfm:move:management:unit:topic:v2:BusinessUnit",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmMoveManagementUnitTopicMoveManagementUnitNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:move:management:unit:topic:v2:MoveManagementUnitNotification",
            "properties": {
                "businessUnit": {
                    "type": "object",
                    "$ref": "#/definitions/WfmMoveManagementUnitTopicBusinessUnit"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicSecondaryPresenceReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:SecondaryPresenceReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicActivityCodeReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:ActivityCodeReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "secondaryPresences": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedMuTopicSecondaryPresenceReference"
                    }
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicRealTimeAdherenceExplanation": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:RealTimeAdherenceExplanation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "lengthMinutes": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Approved",
                        "Denied"
                    ]
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicQueueReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:QueueReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedMuTopicUserScheduleAdherenceUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:mu:topic:v2:UserScheduleAdherenceUpdate",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedMuTopicUserReference"
                },
                "managementUnitId": {
                    "type": "string"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedMuTopicUriReference"
                },
                "scheduledActivityCategory": {
                    "type": "string"
                },
                "scheduledActivityCode": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedMuTopicActivityCodeReference"
                },
                "systemPresence": {
                    "type": "string"
                },
                "organizationSecondaryPresenceId": {
                    "type": "string"
                },
                "routingStatus": {
                    "type": "string",
                    "enum": [
                        "__EMPTY__",
                        "OFF_QUEUE",
                        "IDLE",
                        "INTERACTING",
                        "NOT_RESPONDING",
                        "COMMUNICATING",
                        "OFFLINE"
                    ]
                },
                "actualActivityCategory": {
                    "type": "string"
                },
                "isOutOfOffice": {
                    "type": "boolean"
                },
                "adherenceState": {
                    "type": "string",
                    "enum": [
                        "InAdherence",
                        "OutOfAdherence",
                        "Unscheduled",
                        "Unknown",
                        "Ignored",
                        "Explained"
                    ]
                },
                "impact": {
                    "type": "string"
                },
                "adherenceExplanation": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedMuTopicRealTimeAdherenceExplanation"
                },
                "adherenceChangeTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "presenceUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "activeQueues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedMuTopicQueueReference"
                    }
                },
                "activeQueuesModifiedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "removedFromManagementUnit": {
                    "type": "boolean"
                }
            }
        },
        "WfmUpdateAgentDetailsTopicWfmUpdateAgentDetailsComplete": {
            "type": "object",
            "id": "urn:jsonschema:wfm:update:agent:details:topic:v2:WfmUpdateAgentDetailsComplete",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                }
            }
        },
        "WfmScheduleTopicWfmScheduleNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:schedule:topic:WfmScheduleNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "operationId": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "percentComplete": {
                    "type": "integer"
                },
                "eventType": {
                    "type": "string",
                    "enum": [
                        "Update",
                        "Import",
                        "Copy",
                        "Generate",
                        "Reschedule"
                    ]
                }
            }
        },
        "WfmBulkShiftTradeStateUpdateNotificationTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bulk:shift:trade:state:update:notification:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmBulkShiftTradeStateUpdateNotificationTopicWfmVersionedEntityMetadata": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bulk:shift:trade:state:update:notification:topic:v2:WfmVersionedEntityMetadata",
            "properties": {
                "version": {
                    "type": "integer"
                },
                "modifiedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBulkShiftTradeStateUpdateNotificationTopicUserReference"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmBulkShiftTradeStateUpdateNotificationTopicBulkShiftTradeStateUpdateResult": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bulk:shift:trade:state:update:notification:topic:v2:BulkShiftTradeStateUpdateResult",
            "properties": {
                "id": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Unmatched",
                        "Matched",
                        "Approved",
                        "Denied",
                        "Expired",
                        "Canceled"
                    ]
                },
                "reviewedBy": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBulkShiftTradeStateUpdateNotificationTopicUserReference"
                },
                "reviewedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "failureReason": {
                    "type": "string",
                    "enum": [
                        "InitiatingAgentScheduleNotFound",
                        "InitiatingAgentShiftNotFound",
                        "ReceivingAgentNotFound",
                        "ReceivingAgentScheduleNotFound",
                        "ReceivingAgentShiftNotFound",
                        "ScheduleNotPublished",
                        "TransitionNotAllowed"
                    ]
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBulkShiftTradeStateUpdateNotificationTopicWfmVersionedEntityMetadata"
                }
            }
        },
        "WfmBulkShiftTradeStateUpdateNotificationTopicBulkShiftTradeStateUpdateResultListing": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bulk:shift:trade:state:update:notification:topic:v2:BulkShiftTradeStateUpdateResultListing",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmBulkShiftTradeStateUpdateNotificationTopicBulkShiftTradeStateUpdateResult"
                    }
                }
            }
        },
        "WfmBulkShiftTradeStateUpdateNotificationTopicBulkShiftTradeStateUpdateNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bulk:shift:trade:state:update:notification:topic:v2:BulkShiftTradeStateUpdateNotification",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Complete",
                        "Canceled",
                        "Error"
                    ]
                },
                "operationId": {
                    "type": "string"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/WfmBulkShiftTradeStateUpdateNotificationTopicBulkShiftTradeStateUpdateResultListing"
                },
                "weekDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicUserReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:UserReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicUriReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:UriReference",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicSecondaryPresenceReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:SecondaryPresenceReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicActivityCodeReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:ActivityCodeReference",
            "properties": {
                "id": {
                    "type": "string"
                },
                "secondaryPresences": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTeamTopicSecondaryPresenceReference"
                    }
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicRealTimeAdherenceExplanation": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:RealTimeAdherenceExplanation",
            "properties": {
                "id": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "lengthMinutes": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Approved",
                        "Denied"
                    ]
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicQueueReference": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:QueueReference",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WfmUserScheduleAdherenceUpdatedTeamTopicUserScheduleAdherenceUpdate": {
            "type": "object",
            "id": "urn:jsonschema:wfm:user:schedule:adherence:updated:team:topic:v2:UserScheduleAdherenceUpdate",
            "properties": {
                "user": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTeamTopicUserReference"
                },
                "managementUnitId": {
                    "type": "string"
                },
                "team": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTeamTopicUriReference"
                },
                "scheduledActivityCategory": {
                    "type": "string"
                },
                "scheduledActivityCode": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTeamTopicActivityCodeReference"
                },
                "systemPresence": {
                    "type": "string"
                },
                "organizationSecondaryPresenceId": {
                    "type": "string"
                },
                "routingStatus": {
                    "type": "string",
                    "enum": [
                        "__EMPTY__",
                        "OFF_QUEUE",
                        "IDLE",
                        "INTERACTING",
                        "NOT_RESPONDING",
                        "COMMUNICATING",
                        "OFFLINE"
                    ]
                },
                "actualActivityCategory": {
                    "type": "string"
                },
                "isOutOfOffice": {
                    "type": "boolean"
                },
                "adherenceState": {
                    "type": "string",
                    "enum": [
                        "InAdherence",
                        "OutOfAdherence",
                        "Unscheduled",
                        "Unknown",
                        "Ignored",
                        "Explained"
                    ]
                },
                "impact": {
                    "type": "string"
                },
                "adherenceExplanation": {
                    "type": "object",
                    "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTeamTopicRealTimeAdherenceExplanation"
                },
                "adherenceChangeTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "presenceUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "activeQueues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/WfmUserScheduleAdherenceUpdatedTeamTopicQueueReference"
                    }
                },
                "activeQueuesModifiedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "removedFromManagementUnit": {
                    "type": "boolean"
                }
            }
        },
        "WfmBuScheduleQueryResultTopicBuScheduleSearchResultNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:query:result:topic:BuScheduleSearchResultNotification",
            "properties": {
                "operationId": {
                    "type": "string"
                },
                "businessUnitId": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                }
            }
        },
        "WfmBuScheduleSearchResultTopicBuScheduleSearchResultNotification": {
            "type": "object",
            "id": "urn:jsonschema:wfm:bu:schedule:search:result:topic:BuScheduleSearchResultNotification",
            "properties": {
                "operationId": {
                    "type": "string"
                },
                "businessUnitId": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                }
            }
        }
    },
    "info": {
        "title": "shyrka-chat",
        "version": "1.0.0",
        "license": {
            "name": "UNLICENSED"
        },
        "contact": {
            "name": "Genesys"
        },
        "swagger": "2.0"
    },
    "paths": {},
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "securityDefinitions": {}
}